d6735919f70fc068cc9d94ab642437c6
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AuthService: function() {
        return AuthService;
    },
    authService: function() {
        return authService;
    }
});
const _api = require("./api");
const _jscookie = /*#__PURE__*/ _interop_require_default(require("js-cookie"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class AuthService {
    async login(loginData) {
        const response = await _api.apiService.post("/auth/login", loginData);
        // Store token metadata
        this.setTokens(response);
        this.setUserData(response.user, response.tenant, response.permissions);
        return response;
    }
    async refreshToken() {
        // Prevent multiple concurrent refresh requests
        if (this.refreshTokenPromise) {
            return this.refreshTokenPromise;
        }
        const refreshToken = this.getRefreshToken();
        if (!refreshToken) {
            throw new Error("No refresh token available");
        }
        this.refreshTokenPromise = _api.apiService.post("/auth/refresh", {
            refresh_token: refreshToken
        });
        try {
            const response = await this.refreshTokenPromise;
            this.setTokens(response);
            this.setUserData(response.user, response.tenant, response.permissions);
            return response;
        } catch (error) {
            // If refresh fails, clear tokens and redirect to login
            this.clearTokens();
            throw error;
        } finally{
            this.refreshTokenPromise = null;
        }
    }
    async getCurrentUser() {
        try {
            return await _api.apiService.get("/auth/me");
        } catch (error) {
            if (error?.response?.status === 401) {
                // Try to refresh token and retry
                try {
                    await this.refreshToken();
                    return await _api.apiService.get("/auth/me");
                } catch (refreshError) {
                    this.clearTokens();
                    throw refreshError;
                }
            }
            throw error;
        }
    }
    async getAuth0Url(redirectUri, additionalScopes, organizationHint) {
        const params = new URLSearchParams({
            redirect_uri: redirectUri
        });
        if (additionalScopes?.length) {
            params.append("additional_scopes", additionalScopes.join(","));
        }
        if (organizationHint) {
            params.append("organization_hint", organizationHint);
        }
        return _api.apiService.get(`/auth/auth0-url?${params}`);
    }
    async logout(allDevices = false) {
        const refreshToken = this.getRefreshToken();
        try {
            await _api.apiService.post("/auth/logout", {
                refresh_token: refreshToken,
                all_devices: allDevices
            });
        } catch (error) {
            console.warn("Logout API call failed:", error);
        // Continue with local cleanup even if server logout fails
        }
        // Enhanced session cleanup
        this.performCompleteSessionCleanup();
        // Redirect to login page
        window.location.href = "/login";
    }
    performCompleteSessionCleanup() {
        // Clear tokens and user data
        this.clearTokens();
        this.clearUserData();
        // Clear all localStorage with auth-related data
        const keysToRemove = [
            "current_user",
            "tenant_info",
            "user_permissions",
            "token_expires_at",
            "auth_state",
            "last_activity"
        ];
        keysToRemove.forEach((key)=>{
            localStorage.removeItem(key);
        });
        // Clear all sessionStorage
        sessionStorage.clear();
        // Clear intervals
        if (typeof window !== "undefined") {
            const refreshInterval = window.__authRefreshInterval;
            const timeoutInterval = window.__sessionTimeoutInterval;
            if (refreshInterval) {
                clearInterval(refreshInterval);
                delete window.__authRefreshInterval;
            }
            if (timeoutInterval) {
                clearInterval(timeoutInterval);
                delete window.__sessionTimeoutInterval;
            }
        }
        // Clear any cached data from API service
        if (_api.apiService.clearCache) {
            _api.apiService.clearCache();
        }
        // Clear browser history state related to auth
        if (typeof window !== "undefined" && window.history.replaceState) {
            const currentUrl = window.location.pathname;
            window.history.replaceState(null, "", currentUrl);
        }
        console.info("Complete session cleanup performed");
    }
    async checkSession() {
        return _api.apiService.get("/auth/session/check");
    }
    async extendSession() {
        return _api.apiService.post("/auth/session/extend");
    }
    getToken() {
        return _jscookie.default.get("access_token");
    }
    getRefreshToken() {
        return _jscookie.default.get("refresh_token");
    }
    isAuthenticated() {
        const token = this.getToken();
        const user = this.getStoredUser();
        return !!(token && user);
    }
    getUserPermissions() {
        try {
            const permissions = localStorage.getItem("user_permissions");
            return permissions ? JSON.parse(permissions) : [];
        } catch  {
            return [];
        }
    }
    hasPermission(permission) {
        const permissions = this.getUserPermissions();
        return permissions.includes(permission);
    }
    hasAnyPermission(requiredPermissions) {
        const userPermissions = this.getUserPermissions();
        return requiredPermissions.some((perm)=>userPermissions.includes(perm));
    }
    getUserRole() {
        const user = this.getStoredUser();
        return user?.role || null;
    }
    getTenantInfo() {
        try {
            const tenantData = localStorage.getItem("tenant_info");
            return tenantData ? JSON.parse(tenantData) : null;
        } catch  {
            return null;
        }
    }
    shouldRefreshToken() {
        // Check if we should proactively refresh the token
        const tokenExpiry = localStorage.getItem("token_expires_at");
        if (!tokenExpiry) return false;
        const expiryTime = new Date(tokenExpiry).getTime();
        const currentTime = Date.now();
        return expiryTime - currentTime <= this.tokenRefreshThreshold;
    }
    // Auto-refresh token if needed
    async ensureValidToken() {
        const token = this.getToken();
        if (!token) return null;
        if (this.shouldRefreshToken()) {
            try {
                await this.refreshToken();
                return this.getToken();
            } catch (error) {
                console.error("Token refresh failed:", error);
                return null;
            }
        }
        return token;
    }
    setTokens(tokenResponse) {
        // Set HTTP-only cookies are handled by the server
        // Store token expiry for refresh logic
        const expiryTime = new Date(Date.now() + tokenResponse.expires_in * 1000);
        localStorage.setItem("token_expires_at", expiryTime.toISOString());
    }
    setUserData(user, tenant, permissions) {
        localStorage.setItem("current_user", JSON.stringify(user));
        localStorage.setItem("tenant_info", JSON.stringify(tenant));
        localStorage.setItem("user_permissions", JSON.stringify(permissions));
    }
    getStoredUser() {
        try {
            const userData = localStorage.getItem("current_user");
            return userData ? JSON.parse(userData) : null;
        } catch  {
            return null;
        }
    }
    clearTokens() {
        _jscookie.default.remove("access_token");
        _jscookie.default.remove("refresh_token");
        localStorage.removeItem("token_expires_at");
    }
    clearUserData() {
        localStorage.removeItem("current_user");
        localStorage.removeItem("tenant_info");
        localStorage.removeItem("user_permissions");
    }
    // Enhanced auto-refresh with tenant validation and better error handling
    initializeAutoRefresh() {
        if (!this.isAuthenticated() || process.env.NODE_ENV === "test") return;
        // Check token status every minute
        const refreshInterval = setInterval(()=>{
            if (!this.isAuthenticated()) {
                clearInterval(refreshInterval);
                return;
            }
            if (this.shouldRefreshToken()) {
                this.refreshToken().catch((error)=>{
                    console.error("Background token refresh failed:", error);
                    // If refresh fails due to invalid token, clear session and redirect
                    if (error?.response?.status === 401) {
                        console.warn("Session expired, redirecting to login");
                        this.clearTokens();
                        this.clearUserData();
                        window.location.href = "/login";
                    }
                });
            }
        }, 60000) // Check every minute
        ;
        // Store interval ID for cleanup
        if (typeof window !== "undefined") {
            window.__authRefreshInterval = refreshInterval;
        }
    }
    trackUserActivity() {
        this.lastActivityTime = Date.now();
    }
    checkSessionTimeout() {
        const now = Date.now();
        const timeSinceLastActivity = now - this.lastActivityTime;
        return timeSinceLastActivity > this.sessionTimeoutThreshold;
    }
    initializeActivityTracking() {
        if (typeof window === "undefined" || process.env.NODE_ENV === "test") return;
        // Track user activity
        const activityEvents = [
            "mousedown",
            "mousemove",
            "keypress",
            "scroll",
            "touchstart",
            "click"
        ];
        const handleActivity = ()=>{
            this.trackUserActivity();
        };
        activityEvents.forEach((event)=>{
            document.addEventListener(event, handleActivity, {
                passive: true
            });
        });
        // Check for session timeout every 5 minutes
        const timeoutCheckInterval = setInterval(()=>{
            if (!this.isAuthenticated()) {
                clearInterval(timeoutCheckInterval);
                return;
            }
            if (this.checkSessionTimeout()) {
                console.warn("Session timeout due to inactivity");
                this.logout();
            }
        }, 5 * 60 * 1000) // Check every 5 minutes
        (window).__sessionTimeoutInterval = timeoutCheckInterval;
    }
    constructor(){
        this.refreshTokenPromise = null;
        this.tokenRefreshThreshold = 5 * 60 * 1000 // 5 minutes in milliseconds
        ;
        // Enhanced session timeout detection
        this.sessionTimeoutThreshold = 30 * 60 * 1000 // 30 minutes
        ;
        this.lastActivityTime = Date.now();
    }
}
const authService = new AuthService();
// Initialize auto-refresh and activity tracking on module load
if (typeof window !== "undefined") {
    authService.initializeAutoRefresh();
    authService.initializeActivityTracking();
}

//# sourceMappingURL=data:application/json;base64,