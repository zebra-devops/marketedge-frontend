e4862667d7dca4ac03ce489ce5b5b8ff
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AuthContext: function() {
        return AuthContext;
    },
    useAuth: function() {
        return useAuth;
    },
    useAuthContext: function() {
        return useAuthContext;
    }
});
const _react = require("react");
const _auth = require("../services/auth");
const AuthContext = (0, _react.createContext)(undefined);
const useAuthContext = ()=>{
    const context = (0, _react.useContext)(AuthContext);
    if (!context) {
        throw new Error("useAuthContext must be used within an AuthProvider");
    }
    return context;
};
const useAuth = ()=>{
    const [user, setUser] = (0, _react.useState)(null);
    const [isLoading, setIsLoading] = (0, _react.useState)(true);
    (0, _react.useEffect)(()=>{
        const initAuth = async ()=>{
            try {
                if (_auth.authService.isAuthenticated()) {
                    const userData = await _auth.authService.getCurrentUser();
                    setUser(userData);
                }
            } catch (error) {
                console.error("Auth initialization failed:", error);
                _auth.authService.logout();
            } finally{
                setIsLoading(false);
            }
        };
        initAuth();
    }, []);
    const login = async (code, redirectUri)=>{
        try {
            const response = await _auth.authService.login({
                code,
                redirect_uri: redirectUri
            });
            setUser(response.user);
        } catch (error) {
            console.error("Login failed:", error);
            throw error;
        }
    };
    const logout = ()=>{
        _auth.authService.logout();
        setUser(null);
    };
    const refreshUser = async ()=>{
        try {
            const userData = await _auth.authService.getCurrentUser();
            setUser(userData);
        } catch (error) {
            console.error("User refresh failed:", error);
            logout();
        }
    };
    return {
        user,
        isAuthenticated: !!user,
        isLoading,
        login,
        logout,
        refreshUser
    };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0L1NpdGVzL01hcmtldEVkZ2UvcGxhdGZvcm0td3JhcHBlci9mcm9udGVuZC9zcmMvaG9va3MvdXNlQXV0aC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIGNsaWVudCdcblxuaW1wb3J0IHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgY3JlYXRlQ29udGV4dCwgdXNlQ29udGV4dCB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgVXNlciwgQXV0aFN0YXRlIH0gZnJvbSAnQC90eXBlcy9hdXRoJ1xuaW1wb3J0IHsgYXV0aFNlcnZpY2UgfSBmcm9tICdAL3NlcnZpY2VzL2F1dGgnXG5cbmludGVyZmFjZSBBdXRoQ29udGV4dFR5cGUgZXh0ZW5kcyBBdXRoU3RhdGUge1xuICBsb2dpbjogKGNvZGU6IHN0cmluZywgcmVkaXJlY3RVcmk6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPlxuICBsb2dvdXQ6ICgpID0+IHZvaWRcbiAgcmVmcmVzaFVzZXI6ICgpID0+IFByb21pc2U8dm9pZD5cbn1cblxuY29uc3QgQXV0aENvbnRleHQgPSBjcmVhdGVDb250ZXh0PEF1dGhDb250ZXh0VHlwZSB8IHVuZGVmaW5lZD4odW5kZWZpbmVkKVxuXG5leHBvcnQgY29uc3QgdXNlQXV0aENvbnRleHQgPSAoKTogQXV0aENvbnRleHRUeXBlID0+IHtcbiAgY29uc3QgY29udGV4dCA9IHVzZUNvbnRleHQoQXV0aENvbnRleHQpXG4gIGlmICghY29udGV4dCkge1xuICAgIHRocm93IG5ldyBFcnJvcigndXNlQXV0aENvbnRleHQgbXVzdCBiZSB1c2VkIHdpdGhpbiBhbiBBdXRoUHJvdmlkZXInKVxuICB9XG4gIHJldHVybiBjb250ZXh0XG59XG5cbmV4cG9ydCBjb25zdCB1c2VBdXRoID0gKCkgPT4ge1xuICBjb25zdCBbdXNlciwgc2V0VXNlcl0gPSB1c2VTdGF0ZTxVc2VyIHwgbnVsbD4obnVsbClcbiAgY29uc3QgW2lzTG9hZGluZywgc2V0SXNMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpXG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBpbml0QXV0aCA9IGFzeW5jICgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGlmIChhdXRoU2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkge1xuICAgICAgICAgIGNvbnN0IHVzZXJEYXRhID0gYXdhaXQgYXV0aFNlcnZpY2UuZ2V0Q3VycmVudFVzZXIoKVxuICAgICAgICAgIHNldFVzZXIodXNlckRhdGEpXG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0F1dGggaW5pdGlhbGl6YXRpb24gZmFpbGVkOicsIGVycm9yKVxuICAgICAgICBhdXRoU2VydmljZS5sb2dvdXQoKVxuICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgc2V0SXNMb2FkaW5nKGZhbHNlKVxuICAgICAgfVxuICAgIH1cblxuICAgIGluaXRBdXRoKClcbiAgfSwgW10pXG5cbiAgY29uc3QgbG9naW4gPSBhc3luYyAoY29kZTogc3RyaW5nLCByZWRpcmVjdFVyaTogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXV0aFNlcnZpY2UubG9naW4oeyBjb2RlLCByZWRpcmVjdF91cmk6IHJlZGlyZWN0VXJpIH0pXG4gICAgICBzZXRVc2VyKHJlc3BvbnNlLnVzZXIpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0xvZ2luIGZhaWxlZDonLCBlcnJvcilcbiAgICAgIHRocm93IGVycm9yXG4gICAgfVxuICB9XG5cbiAgY29uc3QgbG9nb3V0ID0gKCkgPT4ge1xuICAgIGF1dGhTZXJ2aWNlLmxvZ291dCgpXG4gICAgc2V0VXNlcihudWxsKVxuICB9XG5cbiAgY29uc3QgcmVmcmVzaFVzZXIgPSBhc3luYyAoKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXJEYXRhID0gYXdhaXQgYXV0aFNlcnZpY2UuZ2V0Q3VycmVudFVzZXIoKVxuICAgICAgc2V0VXNlcih1c2VyRGF0YSlcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignVXNlciByZWZyZXNoIGZhaWxlZDonLCBlcnJvcilcbiAgICAgIGxvZ291dCgpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB1c2VyLFxuICAgIGlzQXV0aGVudGljYXRlZDogISF1c2VyLFxuICAgIGlzTG9hZGluZyxcbiAgICBsb2dpbixcbiAgICBsb2dvdXQsXG4gICAgcmVmcmVzaFVzZXIsXG4gIH1cbn1cblxuZXhwb3J0IHsgQXV0aENvbnRleHQgfSJdLCJuYW1lcyI6WyJBdXRoQ29udGV4dCIsInVzZUF1dGgiLCJ1c2VBdXRoQ29udGV4dCIsImNyZWF0ZUNvbnRleHQiLCJ1bmRlZmluZWQiLCJjb250ZXh0IiwidXNlQ29udGV4dCIsIkVycm9yIiwidXNlciIsInNldFVzZXIiLCJ1c2VTdGF0ZSIsImlzTG9hZGluZyIsInNldElzTG9hZGluZyIsInVzZUVmZmVjdCIsImluaXRBdXRoIiwiYXV0aFNlcnZpY2UiLCJpc0F1dGhlbnRpY2F0ZWQiLCJ1c2VyRGF0YSIsImdldEN1cnJlbnRVc2VyIiwiZXJyb3IiLCJjb25zb2xlIiwibG9nb3V0IiwibG9naW4iLCJjb2RlIiwicmVkaXJlY3RVcmkiLCJyZXNwb25zZSIsInJlZGlyZWN0X3VyaSIsInJlZnJlc2hVc2VyIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7O0lBK0VTQSxXQUFXO2VBQVhBOztJQXpESUMsT0FBTztlQUFQQTs7SUFSQUMsY0FBYztlQUFkQTs7O3VCQVprRDtzQkFFbkM7QUFRNUIsTUFBTUYsY0FBY0csSUFBQUEsb0JBQWEsRUFBOEJDO0FBRXhELE1BQU1GLGlCQUFpQjtJQUM1QixNQUFNRyxVQUFVQyxJQUFBQSxpQkFBVSxFQUFDTjtJQUMzQixJQUFJLENBQUNLLFNBQVM7UUFDWixNQUFNLElBQUlFLE1BQU07SUFDbEI7SUFDQSxPQUFPRjtBQUNUO0FBRU8sTUFBTUosVUFBVTtJQUNyQixNQUFNLENBQUNPLE1BQU1DLFFBQVEsR0FBR0MsSUFBQUEsZUFBUSxFQUFjO0lBQzlDLE1BQU0sQ0FBQ0MsV0FBV0MsYUFBYSxHQUFHRixJQUFBQSxlQUFRLEVBQUM7SUFFM0NHLElBQUFBLGdCQUFTLEVBQUM7UUFDUixNQUFNQyxXQUFXO1lBQ2YsSUFBSTtnQkFDRixJQUFJQyxpQkFBVyxDQUFDQyxlQUFlLElBQUk7b0JBQ2pDLE1BQU1DLFdBQVcsTUFBTUYsaUJBQVcsQ0FBQ0csY0FBYztvQkFDakRULFFBQVFRO2dCQUNWO1lBQ0YsRUFBRSxPQUFPRSxPQUFPO2dCQUNkQyxRQUFRRCxLQUFLLENBQUMsK0JBQStCQTtnQkFDN0NKLGlCQUFXLENBQUNNLE1BQU07WUFDcEIsU0FBVTtnQkFDUlQsYUFBYTtZQUNmO1FBQ0Y7UUFFQUU7SUFDRixHQUFHLEVBQUU7SUFFTCxNQUFNUSxRQUFRLE9BQU9DLE1BQWNDO1FBQ2pDLElBQUk7WUFDRixNQUFNQyxXQUFXLE1BQU1WLGlCQUFXLENBQUNPLEtBQUssQ0FBQztnQkFBRUM7Z0JBQU1HLGNBQWNGO1lBQVk7WUFDM0VmLFFBQVFnQixTQUFTakIsSUFBSTtRQUN2QixFQUFFLE9BQU9XLE9BQU87WUFDZEMsUUFBUUQsS0FBSyxDQUFDLGlCQUFpQkE7WUFDL0IsTUFBTUE7UUFDUjtJQUNGO0lBRUEsTUFBTUUsU0FBUztRQUNiTixpQkFBVyxDQUFDTSxNQUFNO1FBQ2xCWixRQUFRO0lBQ1Y7SUFFQSxNQUFNa0IsY0FBYztRQUNsQixJQUFJO1lBQ0YsTUFBTVYsV0FBVyxNQUFNRixpQkFBVyxDQUFDRyxjQUFjO1lBQ2pEVCxRQUFRUTtRQUNWLEVBQUUsT0FBT0UsT0FBTztZQUNkQyxRQUFRRCxLQUFLLENBQUMsd0JBQXdCQTtZQUN0Q0U7UUFDRjtJQUNGO0lBRUEsT0FBTztRQUNMYjtRQUNBUSxpQkFBaUIsQ0FBQyxDQUFDUjtRQUNuQkc7UUFDQVc7UUFDQUQ7UUFDQU07SUFDRjtBQUNGIn0=