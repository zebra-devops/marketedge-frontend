{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/admin/RateLimitManager.tsx"],"sourcesContent":["/**\n * Rate Limit Manager Component\n * \n * Admin component for managing tenant-specific rate limits.\n * Demonstrates multi-tenant testing scenarios and accessibility compliance.\n */\n\nimport React, { useState, useEffect } from 'react'\nimport { ExclamationTriangleIcon, CheckCircleIcon } from '@heroicons/react/24/outline'\n\ninterface RateLimit {\n  id: string\n  tenant_id: string\n  tenant_name: string\n  tier: 'standard' | 'premium' | 'enterprise'\n  requests_per_hour: number\n  burst_size: number\n  enabled: boolean\n  emergency_bypass: boolean\n  bypass_reason?: string\n  bypass_until?: string\n}\n\ninterface RateLimitManagerProps {\n  tenantId?: string\n  className?: string\n  onUpdate?: (rateLimit: RateLimit) => void\n}\n\nconst TIER_COLORS = {\n  standard: 'bg-gray-100 text-gray-800',\n  premium: 'bg-blue-100 text-blue-800',\n  enterprise: 'bg-purple-100 text-purple-800'\n}\n\nconst TIER_LIMITS = {\n  standard: { requests_per_hour: 1000, burst_size: 100 },\n  premium: { requests_per_hour: 5000, burst_size: 250 },\n  enterprise: { requests_per_hour: 10000, burst_size: 500 }\n}\n\nexport const RateLimitManager: React.FC<RateLimitManagerProps> = ({\n  tenantId,\n  className = '',\n  onUpdate\n}) => {\n  const [rateLimits, setRateLimits] = useState<RateLimit[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [selectedRateLimit, setSelectedRateLimit] = useState<RateLimit | null>(null)\n  const [editingMode, setEditingMode] = useState<'edit' | 'emergency' | null>(null)\n\n  // Form state\n  const [formData, setFormData] = useState<{\n    tier: 'standard' | 'premium' | 'enterprise'\n    requests_per_hour: number\n    burst_size: number\n    emergency_reason: string\n  }>({\n    tier: 'standard',\n    requests_per_hour: 1000,\n    burst_size: 100,\n    emergency_reason: ''\n  })\n\n  useEffect(() => {\n    fetchRateLimits()\n  }, [tenantId])\n\n  const fetchRateLimits = async () => {\n    try {\n      setLoading(true)\n      const response = await fetch('/api/v1/admin/rate-limits')\n      \n      if (!response.ok) {\n        throw new Error(`Failed to fetch rate limits: ${response.status}`)\n      }\n      \n      const data = await response.json()\n      const filteredData = tenantId \n        ? data.filter((rl: RateLimit) => rl.tenant_id === tenantId)\n        : data\n      \n      setRateLimits(filteredData)\n      setError(null)\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to fetch rate limits'\n      setError(errorMessage)\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const handleUpdateRateLimit = async (rateLimitId: string, updates: Partial<RateLimit>) => {\n    try {\n      const response = await fetch(`/api/v1/admin/rate-limits/${rateLimitId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(updates)\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to update rate limit: ${response.status}`)\n      }\n\n      const updatedRateLimit = await response.json()\n      \n      setRateLimits(prev => prev.map(rl => \n        rl.id === rateLimitId ? updatedRateLimit : rl\n      ))\n      \n      if (onUpdate) {\n        onUpdate(updatedRateLimit)\n      }\n\n      setEditingMode(null)\n      setSelectedRateLimit(null)\n      \n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to update rate limit'\n      setError(errorMessage)\n    }\n  }\n\n  const handleEmergencyBypass = async (tenantId: string, reason: string, durationHours: number = 1) => {\n    try {\n      const response = await fetch(`/api/v1/admin/rate-limits/${tenantId}/emergency-bypass`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          reason,\n          duration_hours: durationHours\n        })\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to enable emergency bypass: ${response.status}`)\n      }\n\n      const updatedRateLimit = await response.json()\n      \n      setRateLimits(prev => prev.map(rl => \n        rl.tenant_id === tenantId ? updatedRateLimit : rl\n      ))\n      \n      setEditingMode(null)\n      setSelectedRateLimit(null)\n      setFormData({ ...formData, emergency_reason: '' })\n      \n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to enable emergency bypass'\n      setError(errorMessage)\n    }\n  }\n\n  const handleRemoveBypass = async (tenantId: string) => {\n    try {\n      const response = await fetch(`/api/v1/admin/rate-limits/${tenantId}/emergency-bypass`, {\n        method: 'DELETE'\n      })\n\n      if (!response.ok) {\n        throw new Error(`Failed to remove emergency bypass: ${response.status}`)\n      }\n\n      await fetchRateLimits() // Refresh data\n      \n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to remove emergency bypass'\n      setError(errorMessage)\n    }\n  }\n\n  const handleTierChange = (tier: 'standard' | 'premium' | 'enterprise') => {\n    const limits = TIER_LIMITS[tier]\n    setFormData({\n      ...formData,\n      tier,\n      requests_per_hour: limits.requests_per_hour,\n      burst_size: limits.burst_size\n    })\n  }\n\n  const formatBypassUntil = (bypassUntil: string) => {\n    return new Date(bypassUntil).toLocaleString()\n  }\n\n  if (loading) {\n    return (\n      <div className={`flex items-center justify-center p-8 ${className}`}>\n        <div \n          className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600\"\n          data-testid=\"loading-spinner\"\n          aria-label=\"Loading rate limits\"\n        />\n      </div>\n    )\n  }\n\n  if (error) {\n    return (\n      <div className={`p-4 ${className}`} role=\"alert\" aria-live=\"assertive\">\n        <div className=\"flex items-center space-x-2 text-red-600\">\n          <ExclamationTriangleIcon className=\"h-5 w-5\" aria-hidden=\"true\" />\n          <span>{error}</span>\n        </div>\n        <button\n          onClick={fetchRateLimits}\n          className=\"mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700 focus:ring-2 focus:ring-red-500 focus:ring-offset-2\"\n          aria-label=\"Retry loading rate limits\"\n        >\n          Retry\n        </button>\n      </div>\n    )\n  }\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      <div className=\"flex items-center justify-between\">\n        <h2 className=\"text-lg font-semibold text-gray-900\">\n          Rate Limit Management\n          {tenantId && <span className=\"ml-2 text-sm text-gray-500\">(Single Tenant)</span>}\n        </h2>\n        <button\n          onClick={fetchRateLimits}\n          className=\"px-3 py-1 text-sm bg-gray-100 hover:bg-gray-200 rounded focus:ring-2 focus:ring-gray-500 focus:ring-offset-2\"\n          aria-label=\"Refresh rate limits\"\n        >\n          Refresh\n        </button>\n      </div>\n\n      {rateLimits.length === 0 ? (\n        <div className=\"text-center py-8 text-gray-500\">\n          No rate limits found\n        </div>\n      ) : (\n        <div className=\"bg-white shadow overflow-hidden sm:rounded-md\">\n          <ul className=\"divide-y divide-gray-200\">\n            {rateLimits.map((rateLimit) => (\n              <li key={rateLimit.id} className=\"px-6 py-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-4\">\n                      <h3 className=\"text-sm font-medium text-gray-900\">\n                        {rateLimit.tenant_name}\n                      </h3>\n                      <span className={`px-2 py-1 text-xs rounded-full ${TIER_COLORS[rateLimit.tier]}`}>\n                        {rateLimit.tier}\n                      </span>\n                      {rateLimit.emergency_bypass && (\n                        <span className=\"px-2 py-1 text-xs bg-red-100 text-red-800 rounded-full flex items-center space-x-1\">\n                          <ExclamationTriangleIcon className=\"h-3 w-3\" />\n                          <span>Emergency Bypass</span>\n                        </span>\n                      )}\n                      {!rateLimit.enabled && (\n                        <span className=\"px-2 py-1 text-xs bg-gray-100 text-gray-800 rounded-full\">\n                          Disabled\n                        </span>\n                      )}\n                    </div>\n                    \n                    <div className=\"mt-2 text-sm text-gray-600\">\n                      <span>Limit: {rateLimit.requests_per_hour.toLocaleString()} req/hour</span>\n                      <span className=\"ml-4\">Burst: {rateLimit.burst_size}</span>\n                    </div>\n\n                    {rateLimit.emergency_bypass && rateLimit.bypass_reason && (\n                      <div className=\"mt-2 p-2 bg-red-50 border border-red-200 rounded text-sm\">\n                        <p className=\"text-red-700\">\n                          <strong>Reason:</strong> {rateLimit.bypass_reason}\n                        </p>\n                        {rateLimit.bypass_until && (\n                          <p className=\"text-red-600 mt-1\">\n                            <strong>Until:</strong> {formatBypassUntil(rateLimit.bypass_until)}\n                          </p>\n                        )}\n                      </div>\n                    )}\n                  </div>\n\n                  <div className=\"flex items-center space-x-2\">\n                    <button\n                      onClick={() => {\n                        setSelectedRateLimit(rateLimit)\n                        setEditingMode('edit')\n                        setFormData({\n                          tier: rateLimit.tier,\n                          requests_per_hour: rateLimit.requests_per_hour,\n                          burst_size: rateLimit.burst_size,\n                          emergency_reason: ''\n                        })\n                      }}\n                      className=\"px-3 py-1 text-sm bg-blue-600 text-white rounded hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n                      aria-label={`Edit rate limit for ${rateLimit.tenant_name}`}\n                    >\n                      Edit\n                    </button>\n\n                    {rateLimit.emergency_bypass ? (\n                      <button\n                        onClick={() => handleRemoveBypass(rateLimit.tenant_id)}\n                        className=\"px-3 py-1 text-sm bg-green-600 text-white rounded hover:bg-green-700 focus:ring-2 focus:ring-green-500 focus:ring-offset-2\"\n                        aria-label={`Remove emergency bypass for ${rateLimit.tenant_name}`}\n                      >\n                        Remove Bypass\n                      </button>\n                    ) : (\n                      <button\n                        onClick={() => {\n                          setSelectedRateLimit(rateLimit)\n                          setEditingMode('emergency')\n                          setFormData({ ...formData, emergency_reason: '' })\n                        }}\n                        className=\"px-3 py-1 text-sm bg-red-600 text-white rounded hover:bg-red-700 focus:ring-2 focus:ring-red-500 focus:ring-offset-2\"\n                        aria-label={`Enable emergency bypass for ${rateLimit.tenant_name}`}\n                      >\n                        Emergency\n                      </button>\n                    )}\n                  </div>\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      )}\n\n      {/* Edit Modal */}\n      {editingMode === 'edit' && selectedRateLimit && (\n        <div \n          className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50\"\n          role=\"dialog\"\n          aria-labelledby=\"edit-modal-title\"\n          aria-modal=\"true\"\n        >\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\">\n            <h3 id=\"edit-modal-title\" className=\"text-lg font-semibold mb-4\">\n              Edit Rate Limit: {selectedRateLimit.tenant_name}\n            </h3>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Tier\n                </label>\n                <select\n                  value={formData.tier}\n                  onChange={(e) => handleTierChange(e.target.value as 'standard' | 'premium' | 'enterprise')}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  aria-describedby=\"tier-help\"\n                >\n                  <option value=\"standard\">Standard</option>\n                  <option value=\"premium\">Premium</option>\n                  <option value=\"enterprise\">Enterprise</option>\n                </select>\n                <p id=\"tier-help\" className=\"text-xs text-gray-500 mt-1\">\n                  Tier determines default rate limits\n                </p>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Requests per Hour\n                </label>\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"100000\"\n                  value={formData.requests_per_hour}\n                  onChange={(e) => setFormData({\n                    ...formData,\n                    requests_per_hour: parseInt(e.target.value) || 0\n                  })}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  aria-describedby=\"requests-help\"\n                />\n                <p id=\"requests-help\" className=\"text-xs text-gray-500 mt-1\">\n                  Maximum requests allowed per hour\n                </p>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Burst Size\n                </label>\n                <input\n                  type=\"number\"\n                  min=\"1\"\n                  max=\"1000\"\n                  value={formData.burst_size}\n                  onChange={(e) => setFormData({\n                    ...formData,\n                    burst_size: parseInt(e.target.value) || 0\n                  })}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\n                  aria-describedby=\"burst-help\"\n                />\n                <p id=\"burst-help\" className=\"text-xs text-gray-500 mt-1\">\n                  Temporary burst allowance above rate limit\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 mt-6\">\n              <button\n                onClick={() => {\n                  setEditingMode(null)\n                  setSelectedRateLimit(null)\n                }}\n                className=\"px-4 py-2 text-sm border border-gray-300 rounded hover:bg-gray-50 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={() => handleUpdateRateLimit(selectedRateLimit.id, {\n                  tier: formData.tier,\n                  requests_per_hour: formData.requests_per_hour,\n                  burst_size: formData.burst_size\n                })}\n                className=\"px-4 py-2 text-sm bg-blue-600 text-white rounded hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2\"\n                disabled={formData.requests_per_hour < 1 || formData.burst_size < 1}\n                aria-describedby=\"update-help\"\n              >\n                Update\n              </button>\n            </div>\n            <p id=\"update-help\" className=\"text-xs text-gray-500 mt-2\">\n              Changes take effect immediately\n            </p>\n          </div>\n        </div>\n      )}\n\n      {/* Emergency Bypass Modal */}\n      {editingMode === 'emergency' && selectedRateLimit && (\n        <div \n          className=\"fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center z-50\"\n          role=\"dialog\"\n          aria-labelledby=\"emergency-modal-title\"\n          aria-modal=\"true\"\n        >\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-md mx-4\">\n            <h3 id=\"emergency-modal-title\" className=\"text-lg font-semibold mb-4 text-red-700\">\n              Emergency Bypass: {selectedRateLimit.tenant_name}\n            </h3>\n            \n            <div className=\"mb-4 p-3 bg-red-50 border border-red-200 rounded\">\n              <p className=\"text-sm text-red-700\">\n                <strong>Warning:</strong> This will temporarily remove all rate limiting for this tenant.\n                Use only in genuine emergencies.\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Reason for Emergency Bypass *\n                </label>\n                <textarea\n                  value={formData.emergency_reason}\n                  onChange={(e) => setFormData({\n                    ...formData,\n                    emergency_reason: e.target.value\n                  })}\n                  className=\"w-full px-3 py-2 border border-gray-300 rounded focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                  rows={3}\n                  placeholder=\"Explain why emergency bypass is needed...\"\n                  required\n                  aria-describedby=\"reason-help\"\n                />\n                <p id=\"reason-help\" className=\"text-xs text-gray-500 mt-1\">\n                  This reason will be logged for audit purposes\n                </p>\n              </div>\n            </div>\n\n            <div className=\"flex justify-end space-x-2 mt-6\">\n              <button\n                onClick={() => {\n                  setEditingMode(null)\n                  setSelectedRateLimit(null)\n                  setFormData({ ...formData, emergency_reason: '' })\n                }}\n                className=\"px-4 py-2 text-sm border border-gray-300 rounded hover:bg-gray-50 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={() => handleEmergencyBypass(\n                  selectedRateLimit.tenant_id, \n                  formData.emergency_reason\n                )}\n                className=\"px-4 py-2 text-sm bg-red-600 text-white rounded hover:bg-red-700 focus:ring-2 focus:ring-red-500 focus:ring-offset-2\"\n                disabled={formData.emergency_reason.trim().length < 10}\n                aria-describedby=\"emergency-help\"\n              >\n                Enable Emergency Bypass\n              </button>\n            </div>\n            <p id=\"emergency-help\" className=\"text-xs text-gray-500 mt-2\">\n              Bypass will automatically expire in 1 hour\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}"],"names":["RateLimitManager","TIER_COLORS","standard","premium","enterprise","TIER_LIMITS","requests_per_hour","burst_size","tenantId","className","onUpdate","rateLimits","setRateLimits","useState","loading","setLoading","error","setError","selectedRateLimit","setSelectedRateLimit","editingMode","setEditingMode","formData","setFormData","tier","emergency_reason","useEffect","fetchRateLimits","response","fetch","ok","Error","status","data","json","filteredData","filter","rl","tenant_id","err","errorMessage","message","handleUpdateRateLimit","rateLimitId","updates","method","headers","body","JSON","stringify","updatedRateLimit","prev","map","id","handleEmergencyBypass","reason","durationHours","duration_hours","handleRemoveBypass","handleTierChange","limits","formatBypassUntil","bypassUntil","Date","toLocaleString","div","data-testid","aria-label","role","aria-live","ExclamationTriangleIcon","aria-hidden","span","button","onClick","h2","length","ul","rateLimit","li","h3","tenant_name","emergency_bypass","enabled","bypass_reason","p","strong","bypass_until","aria-labelledby","aria-modal","label","select","value","onChange","e","target","aria-describedby","option","input","type","min","max","parseInt","disabled","textarea","rows","placeholder","required","trim"],"mappings":"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"}