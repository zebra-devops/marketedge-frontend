532388c4ca2c3cbd9baf4c8fef748b57
/**
 * Integration Tests for Key User Flows
 * 
 * Tests complete user journeys across the multi-tenant platform
 * including authentication, navigation, and industry-specific workflows
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _msw = require("msw");
const _jestsetup = require("../../../jest.setup");
const _testutils = require("../../utils/test-utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock the main application layout and key components
const MockApp = ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "app-layout",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("header", {
                "data-testid": "app-header",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("nav", {
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
                            href: "/dashboard",
                            "data-testid": "nav-dashboard",
                            children: "Dashboard"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
                            href: "/market-edge",
                            "data-testid": "nav-market-edge",
                            children: "Market Edge"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
                            href: "/admin",
                            "data-testid": "nav-admin",
                            children: "Admin"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                            "data-testid": "user-menu",
                            children: "User Menu"
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("main", {
                "data-testid": "app-content",
                children: children
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("footer", {
                "data-testid": "app-footer",
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                    children: "Platform Wrapper \xa9 2025"
                })
            })
        ]
    });
const MockDashboard = ({ industry })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "dashboard-page",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "Dashboard"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "industry-indicator",
                children: [
                    "Industry: ",
                    industry || "general"
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "dashboard-widgets",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "performance-widget",
                        children: "Performance Metrics"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "alerts-widget",
                        children: "Recent Alerts"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "quick-actions",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                "data-testid": "view-competitors",
                                children: "View Competitors"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                                "data-testid": "manage-settings",
                                children: "Manage Settings"
                            })
                        ]
                    })
                ]
            })
        ]
    });
const MockMarketEdge = ({ industry })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "market-edge-page",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "Market Edge"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "industry-context",
                children: [
                    "Industry: ",
                    industry || "general"
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "market-selector",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                    "data-testid": "market-select",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                            value: "",
                            children: "Select Market"
                        }),
                        industry === "cinema" && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                    value: "cinema-downtown",
                                    children: "Downtown Cinema"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                    value: "cinema-mall",
                                    children: "Mall Cinema"
                                })
                            ]
                        }),
                        industry === "hotel" && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                    value: "hotel-luxury",
                                    children: "Luxury Hotels"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                    value: "hotel-business",
                                    children: "Business Hotels"
                                })
                            ]
                        }),
                        (!industry || industry === "general") && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                    value: "general-local",
                                    children: "Local Market"
                                }),
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                    value: "general-regional",
                                    children: "Regional Market"
                                })
                            ]
                        })
                    ]
                })
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "competitor-table",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                        children: "Competitors"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("table", {
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("thead", {
                                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("tr", {
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("th", {
                                            children: "Name"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("th", {
                                            children: "Market Share"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("th", {
                                            children: "Pricing"
                                        })
                                    ]
                                })
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("tbody", {
                                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("tr", {
                                    children: [
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("td", {
                                            children: "Competitor 1"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("td", {
                                            children: "25%"
                                        }),
                                        /*#__PURE__*/ (0, _jsxruntime.jsx)("td", {
                                            children: "Premium"
                                        })
                                    ]
                                })
                            })
                        ]
                    })
                ]
            })
        ]
    });
const MockAdmin = ()=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "admin-page",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "Admin Panel"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("nav", {
                "data-testid": "admin-nav",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "admin-stats",
                        children: "Statistics"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "admin-users",
                        children: "Manage Users"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "admin-orgs",
                        children: "Manage Organizations"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "admin-features",
                        children: "Feature Flags"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        "data-testid": "admin-rate-limits",
                        children: "Rate Limiting"
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "admin-content",
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "system-health",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("h2", {
                            children: "System Health"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            "data-testid": "health-status",
                            children: "Status: Healthy"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            "data-testid": "active-users",
                            children: "Active Users: 230"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            "data-testid": "total-orgs",
                            children: "Organizations: 45"
                        })
                    ]
                })
            })
        ]
    });
const MockLogin = ({ onLogin })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "login-page",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "Login"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                onSubmit: (e)=>{
                    e.preventDefault();
                    onLogin();
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        type: "email",
                        placeholder: "Email",
                        "data-testid": "login-email",
                        required: true
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        type: "password",
                        placeholder: "Password",
                        "data-testid": "login-password",
                        required: true
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        type: "submit",
                        "data-testid": "login-submit",
                        children: "Sign In"
                    })
                ]
            })
        ]
    });
describe("User Flow Integration Tests", ()=>{
    describe("Authentication Flow", ()=>{
        it("allows user to login and access dashboard", async ()=>{
            const user = (0, _testutils.createTestUser)({
                role: "user"
            });
            const organisation = (0, _testutils.createTestOrganisation)("general");
            _testutils.mockApiEndpoints.mockAuth(user);
            _testutils.mockApiEndpoints.mockOrganisation(organisation);
            let isLoggedIn = false;
            const handleLogin = ()=>{
                isLoggedIn = true;
            };
            // Start unauthenticated
            const { rerender, user: userEvent } = (0, _testutils.renderUnauthenticated)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockLogin, {
                    onLogin: handleLogin
                })
            }));
            expect(_react1.screen.getByTestId("login-page")).toBeInTheDocument();
            // Fill out login form
            await userEvent.type(_react1.screen.getByTestId("login-email"), user.email);
            await userEvent.type(_react1.screen.getByTestId("login-password"), "password123");
            await userEvent.click(_react1.screen.getByTestId("login-submit"));
            // Simulate successful login and redirect
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockDashboard, {
                    industry: organisation.industry
                })
            }), {
                user,
                organisation,
                isAuthenticated: true
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("dashboard-page")).toBeInTheDocument();
            });
            expect(_react1.screen.getByText("Dashboard")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("industry-indicator")).toHaveTextContent("Industry: general");
        });
        it("redirects unauthenticated users to login", async ()=>{
            const { user } = (0, _testutils.renderUnauthenticated)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockLogin, {
                    onLogin: ()=>{}
                })
            }));
            expect(_react1.screen.getByTestId("login-page")).toBeInTheDocument();
            // Try to navigate to protected route
            await user.click(_react1.screen.getByTestId("nav-dashboard"));
            // Should still see login page (in real app, router would handle this)
            expect(_react1.screen.getByTestId("login-page")).toBeInTheDocument();
        });
    });
    describe("Dashboard to Market Edge Navigation Flow", ()=>{
        it("allows seamless navigation between dashboard and market edge", async ()=>{
            const user = (0, _testutils.createTestUser)({
                role: "user"
            });
            const organisation = (0, _testutils.createTestOrganisation)("cinema");
            _testutils.mockApiEndpoints.mockAuth(user);
            _testutils.mockApiEndpoints.mockOrganisation(organisation);
            _testutils.mockApiEndpoints.mockMarketEdge();
            // Start on dashboard
            const { rerender, user: userEvent } = (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockDashboard, {
                    industry: organisation.industry
                })
            }), "cinema");
            expect(_react1.screen.getByTestId("dashboard-page")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("industry-indicator")).toHaveTextContent("Industry: cinema");
            // Navigate to Market Edge from dashboard quick action
            await userEvent.click(_react1.screen.getByTestId("view-competitors"));
            // Simulate navigation to Market Edge
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdge, {
                    industry: organisation.industry
                })
            }), {
                industryType: "cinema"
            });
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("market-edge-page")).toBeInTheDocument();
            });
            expect(_react1.screen.getByText("Market Edge")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("industry-context")).toHaveTextContent("Industry: cinema");
            // Should see cinema-specific market options
            expect(_react1.screen.getByText("Downtown Cinema")).toBeInTheDocument();
            expect(_react1.screen.getByText("Mall Cinema")).toBeInTheDocument();
        });
    });
    describe("Industry-Specific User Flows", ()=>{
        describe("Cinema Industry Flow", ()=>{
            beforeEach(()=>{
                _testutils.industryTestScenarios.cinema.ticketingSystem();
                _testutils.industryTestScenarios.cinema.highTrafficRateLimiting();
            });
            it("supports complete cinema management workflow", async ()=>{
                const cinemaUser = (0, _testutils.createTestUser)({
                    role: "user"
                }, "cinema");
                const cinemaOrg = (0, _testutils.createTestOrganisation)("cinema");
                _testutils.mockApiEndpoints.mockAuth(cinemaUser);
                _testutils.mockApiEndpoints.mockOrganisation(cinemaOrg);
                const { user } = (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockDashboard, {
                        industry: "cinema"
                    })
                }), "cinema");
                // Should see cinema-specific dashboard
                expect(_react1.screen.getByTestId("industry-indicator")).toHaveTextContent("Industry: cinema");
                // Navigate to Market Edge
                await user.click(_react1.screen.getByTestId("view-competitors"));
                // Simulate navigation
                const { rerender } = (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdge, {
                        industry: "cinema"
                    })
                }), "cinema");
                // Should have cinema-specific options
                const marketSelect = _react1.screen.getByTestId("market-select");
                await user.selectOptions(marketSelect, "cinema-downtown");
                expect(marketSelect).toHaveValue("cinema-downtown");
                // Should see competitor data relevant to cinema industry
                expect(_react1.screen.getByTestId("competitor-table")).toBeInTheDocument();
                expect(_react1.screen.getByText("Competitors")).toBeInTheDocument();
            });
        });
        describe("Hotel Industry Flow", ()=>{
            beforeEach(()=>{
                _testutils.industryTestScenarios.hotel.realTimePricing();
            });
            it("supports hotel pricing and competitor analysis workflow", async ()=>{
                const hotelUser = (0, _testutils.createTestUser)({
                    role: "user"
                }, "hotel");
                const hotelOrg = (0, _testutils.createTestOrganisation)("hotel");
                const { user } = (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdge, {
                        industry: "hotel"
                    })
                }), "hotel");
                expect(_react1.screen.getByTestId("industry-context")).toHaveTextContent("Industry: hotel");
                // Select hotel market segment
                const marketSelect = _react1.screen.getByTestId("market-select");
                await user.selectOptions(marketSelect, "hotel-luxury");
                expect(marketSelect).toHaveValue("hotel-luxury");
                // Should integrate with real-time pricing data
                await (0, _react1.waitFor)(()=>{
                    expect(_react1.screen.getByTestId("competitor-table")).toBeInTheDocument();
                });
            });
        });
        describe("Gym Industry Flow", ()=>{
            beforeEach(()=>{
                _testutils.industryTestScenarios.gym.membershipTracking();
            });
            it("supports gym membership and competition analysis", async ()=>{
                const gymUser = (0, _testutils.createTestUser)({
                    role: "user"
                }, "gym");
                const gymOrg = (0, _testutils.createTestOrganisation)("gym");
                const { user } = (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockDashboard, {
                        industry: "gym"
                    })
                }), "gym");
                expect(_react1.screen.getByTestId("industry-indicator")).toHaveTextContent("Industry: gym");
                // Should have gym-specific performance metrics
                expect(_react1.screen.getByTestId("performance-widget")).toBeInTheDocument();
                // Navigate to competitor analysis
                await user.click(_react1.screen.getByTestId("view-competitors"));
                // Should see gym-specific competitor data
                const { rerender } = (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdge, {
                        industry: "gym"
                    })
                }), "gym");
                expect(_react1.screen.getByTestId("industry-context")).toHaveTextContent("Industry: gym");
            });
        });
    });
    describe("Admin User Flows", ()=>{
        it("allows admin to access all system management features", async ()=>{
            const adminUser = (0, _testutils.createTestUser)({
                role: "admin"
            });
            _testutils.mockApiEndpoints.mockAuth(adminUser);
            _testutils.mockApiEndpoints.mockAdmin();
            _testutils.mockApiEndpoints.mockRateLimiting();
            const { user } = (0, _testutils.renderAsAdmin)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockAdmin, {})
            }));
            expect(_react1.screen.getByTestId("admin-page")).toBeInTheDocument();
            // Should see admin navigation
            expect(_react1.screen.getByTestId("admin-nav")).toBeInTheDocument();
            // Check system health
            expect(_react1.screen.getByTestId("system-health")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("health-status")).toHaveTextContent("Status: Healthy");
            // Navigate to different admin sections
            await user.click(_react1.screen.getByTestId("admin-stats"));
            expect(_react1.screen.getByTestId("admin-stats")).toBeInTheDocument();
            await user.click(_react1.screen.getByTestId("admin-rate-limits"));
            expect(_react1.screen.getByTestId("admin-rate-limits")).toBeInTheDocument();
        });
        it("allows admin to manage multi-tenant data", async ()=>{
            const adminUser = (0, _testutils.createTestUser)({
                role: "admin"
            });
            const organisations = [
                (0, _testutils.createTestOrganisation)("cinema"),
                (0, _testutils.createTestOrganisation)("hotel"),
                (0, _testutils.createTestOrganisation)("gym")
            ];
            _testutils.mockApiEndpoints.mockAuth(adminUser);
            _testutils.mockApiEndpoints.mockAdmin();
            const { user } = (0, _testutils.renderAsAdmin)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockAdmin, {})
            }));
            // Should see aggregated statistics
            expect(_react1.screen.getByTestId("system-health")).toBeInTheDocument();
            // Navigate to organization management
            await user.click(_react1.screen.getByTestId("admin-orgs"));
            // Should be able to manage organizations across all industries
            expect(_react1.screen.getByTestId("admin-orgs")).toBeInTheDocument();
        });
    });
    describe("Error Handling Flows", ()=>{
        it("handles API errors gracefully during user flows", async ()=>{
            const user = (0, _testutils.createTestUser)({
                role: "user"
            });
            // Mock API failure
            _jestsetup.server.use(_msw.http.get("/api/v1/auth/me", ()=>{
                return _msw.HttpResponse.error();
            }), _msw.http.get("/api/v1/market-edge/*", ()=>{
                return _msw.HttpResponse.error();
            }));
            const { user: userEvent } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdge, {})
            }), {
                user,
                isAuthenticated: true
            });
            // Should handle errors gracefully
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByTestId("market-edge-page")).toBeInTheDocument();
            });
            // Component should still render with fallback data
            expect(_react1.screen.getByTestId("market-selector")).toBeInTheDocument();
        });
        it("handles rate limiting during user flows", async ()=>{
            const user = (0, _testutils.createTestUser)({
                role: "user"
            });
            // Mock rate limiting response
            _jestsetup.server.use(_msw.http.get("/api/v1/market-edge/*", ()=>{
                return new _msw.HttpResponse(JSON.stringify({
                    detail: "Rate limit exceeded"
                }), {
                    status: 429,
                    headers: {
                        "X-RateLimit-Remaining": "0",
                        "X-RateLimit-Reset": String(Date.now() + 60000),
                        "Retry-After": "60"
                    }
                });
            }));
            const { user: userEvent } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdge, {})
            }), {
                user,
                isAuthenticated: true
            });
            // Try to trigger API call
            const marketSelect = _react1.screen.getByTestId("market-select");
            await userEvent.selectOptions(marketSelect, "general-local");
            // Should show rate limiting message or handle gracefully
            await (0, _react1.waitFor)(()=>{
                // Component should still be functional with cached/fallback data
                expect(_react1.screen.getByTestId("market-edge-page")).toBeInTheDocument();
            });
        });
    });
    describe("Cross-tenant Data Isolation", ()=>{
        it("properly isolates data between different tenants", async ()=>{
            const tenant1User = (0, _testutils.createTestUser)({
                organisation_id: "tenant-1"
            });
            const tenant1Org = (0, _testutils.createTestOrganisation)("cinema", {
                id: "tenant-1"
            });
            const tenant2User = (0, _testutils.createTestUser)({
                organisation_id: "tenant-2"
            });
            const tenant2Org = (0, _testutils.createTestOrganisation)("hotel", {
                id: "tenant-2"
            });
            // Start with tenant 1
            const { rerender } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockDashboard, {
                    industry: "cinema"
                })
            }), {
                user: tenant1User,
                organisation: tenant1Org
            });
            expect(_react1.screen.getByTestId("industry-indicator")).toHaveTextContent("Industry: cinema");
            // Switch to tenant 2 (simulate user switching organizations or logging in as different user)
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockDashboard, {
                    industry: "hotel"
                })
            }), {
                user: tenant2User,
                organisation: tenant2Org
            });
            // Should see different industry-specific data
            expect(_react1.screen.getByTestId("industry-indicator")).toHaveTextContent("Industry: hotel");
            // Data should be completely isolated - no cinema data should be visible
            const { rerender: rerender2 } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdge, {
                    industry: "hotel"
                })
            }), {
                user: tenant2User,
                organisation: tenant2Org
            });
            // Should only see hotel-specific options
            expect(_react1.screen.queryByText("Downtown Cinema")).not.toBeInTheDocument();
            expect(_react1.screen.getByText("Luxury Hotels")).toBeInTheDocument();
        });
    });
    describe("Performance and User Experience", ()=>{
        it("provides fast navigation between pages", async ()=>{
            const user = (0, _testutils.createTestUser)({
                role: "user"
            });
            const organisation = (0, _testutils.createTestOrganisation)("general");
            const { user: userEvent } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockDashboard, {})
            }), {
                user,
                organisation
            });
            const startTime = performance.now();
            // Navigate to Market Edge
            await userEvent.click(_react1.screen.getByTestId("view-competitors"));
            // Simulate fast navigation
            const endTime = performance.now();
            const navigationTime = endTime - startTime;
            // Navigation should be fast (under 100ms for simulated navigation)
            expect(navigationTime).toBeLessThan(100);
        });
        it("maintains state during navigation", async ()=>{
            const user = (0, _testutils.createTestUser)({
                role: "user"
            });
            const organisation = (0, _testutils.createTestOrganisation)("cinema");
            const { user: userEvent, rerender } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdge, {
                    industry: "cinema"
                })
            }), {
                user,
                organisation
            });
            // Select market
            const marketSelect = _react1.screen.getByTestId("market-select");
            await userEvent.selectOptions(marketSelect, "cinema-downtown");
            expect(marketSelect).toHaveValue("cinema-downtown");
            // Navigate away and back
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockDashboard, {
                    industry: "cinema"
                })
            }));
            expect(_react1.screen.getByTestId("dashboard-page")).toBeInTheDocument();
            // Navigate back to Market Edge
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockApp, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdge, {
                    industry: "cinema"
                })
            }));
            // State should be maintained (in real app, this would be handled by state management)
            expect(_react1.screen.getByTestId("market-edge-page")).toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,