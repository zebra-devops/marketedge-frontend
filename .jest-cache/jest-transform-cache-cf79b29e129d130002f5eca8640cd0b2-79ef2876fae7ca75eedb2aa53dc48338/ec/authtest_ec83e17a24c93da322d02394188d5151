47221c5c9fdf80551289df8c8b716ce0
/**
 * Enhanced Authentication Service Tests
 * Comprehensive tests for multi-tenant auth with permissions, token refresh, and session management
 */ "use strict";
// Mock dependencies
jest.mock("../api");
jest.mock("js-cookie", ()=>mockCookies);
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _auth = require("../auth");
const _api = require("../api");
const mockApiService = _api.apiService;
// Mock js-cookie
const mockCookies = {
    set: jest.fn(),
    get: jest.fn(),
    remove: jest.fn()
};
// Mock localStorage
const mockLocalStorage = {
    store: {},
    getItem: jest.fn((key)=>mockLocalStorage.store[key] || null),
    setItem: jest.fn((key, value)=>{
        mockLocalStorage.store[key] = value;
    }),
    removeItem: jest.fn((key)=>{
        delete mockLocalStorage.store[key];
    }),
    clear: jest.fn(()=>{
        mockLocalStorage.store = {};
    })
};
Object.defineProperty(window, "localStorage", {
    value: mockLocalStorage
});
// Mock window.location for logout redirect
const mockLocation = {
    href: ""
};
Object.defineProperty(window, "location", {
    value: mockLocation,
    writable: true
});
describe("AuthService", ()=>{
    let service;
    beforeEach(()=>{
        service = new _auth.AuthService();
        jest.clearAllMocks();
        mockLocation.href = "";
        mockLocalStorage.clear();
        // Reset mock implementations
        mockCookies.get.mockReturnValue(undefined);
        mockCookies.set.mockReturnValue(undefined);
        mockCookies.remove.mockReturnValue(undefined);
    });
    describe("login", ()=>{
        const validLoginRequest = {
            code: "valid-auth-code",
            redirect_uri: "http://localhost:3000/callback"
        };
        it("should successfully login and set cookies", async ()=>{
            const result = await service.login(validLoginRequest);
            expect(mockCookies.set).toHaveBeenCalledWith("access_token", "mock-jwt-token", {
                expires: 1
            });
            expect(mockCookies.set).toHaveBeenCalledWith("refresh_token", "mock-refresh-token", {
                expires: 7
            });
            expect(result.access_token).toBe("mock-jwt-token");
        });
        it("should reject with invalid credentials", async ()=>{
            const invalidRequest = {
                code: "invalid-code",
                redirect_uri: "http://localhost:3000/callback"
            };
            await expect(service.login(invalidRequest)).rejects.toThrow();
        });
    });
    describe("getCurrentUser", ()=>{
        it("should fetch user when authenticated", async ()=>{
            mockCookies.get.mockImplementation((name)=>name === "access_token" ? "valid-token" : undefined);
            const user = await service.getCurrentUser();
            expect(user.id).toBe("test-user-456");
            expect(user.email).toBe("test@example.com");
        });
        it("should handle unauthenticated request", async ()=>{
            mockCookies.get.mockReturnValue(undefined);
            await expect(service.getCurrentUser()).rejects.toThrow();
        });
    });
    describe("getAuth0Url", ()=>{
        it("should return Auth0 authorization URL", async ()=>{
            const redirectUri = "http://localhost:3000/callback";
            const result = await service.getAuth0Url(redirectUri);
            expect(result.auth_url).toContain("auth0.com/authorize");
            expect(result.auth_url).toContain(encodeURIComponent(redirectUri));
        });
        it("should handle special characters in redirect URI", async ()=>{
            const specialUri = "http://localhost:3000/callback?test=value&other=123";
            const result = await service.getAuth0Url(specialUri);
            expect(result.auth_url).toContain(encodeURIComponent(specialUri));
        });
    });
    describe("logout", ()=>{
        it("should remove cookies and redirect", ()=>{
            service.logout();
            expect(mockCookies.remove).toHaveBeenCalledWith("access_token");
            expect(mockCookies.remove).toHaveBeenCalledWith("refresh_token");
            expect(mockLocation.href).toBe("/login");
        });
    });
    describe("getToken", ()=>{
        it("should return token when exists", ()=>{
            mockCookies.get.mockReturnValue("test-token");
            const token = service.getToken();
            expect(mockCookies.get).toHaveBeenCalledWith("access_token");
            expect(token).toBe("test-token");
        });
        it("should return undefined when no token", ()=>{
            mockCookies.get.mockReturnValue(undefined);
            const token = service.getToken();
            expect(token).toBeUndefined();
        });
        it("should return empty string", ()=>{
            mockCookies.get.mockReturnValue("");
            const token = service.getToken();
            expect(token).toBe("");
        });
    });
    describe("isAuthenticated", ()=>{
        it("should return true when token exists", ()=>{
            mockCookies.get.mockReturnValue("valid-token");
            expect(service.isAuthenticated()).toBe(true);
        });
        it("should return false when no token", ()=>{
            mockCookies.get.mockReturnValue(undefined);
            expect(service.isAuthenticated()).toBe(false);
        });
        it("should return false for empty token", ()=>{
            mockCookies.get.mockReturnValue("");
            expect(service.isAuthenticated()).toBe(false);
        });
        it("should return false for null token", ()=>{
            mockCookies.get.mockReturnValue(null);
            expect(service.isAuthenticated()).toBe(false);
        });
    });
    describe("Multi-tenant scenarios", ()=>{
        it("should handle different tenant login codes", async ()=>{
            const hotelLogin = {
                code: "test-auth-code",
                redirect_uri: "http://hotel.platform.com/callback"
            };
            const result = await service.login(hotelLogin);
            expect(result.user.organisation_id).toBe("test-tenant-123");
        });
        it("should maintain tenant context in token", ()=>{
            mockCookies.get.mockReturnValue("tenant-specific-token");
            const token = service.getToken();
            expect(token).toBe("tenant-specific-token");
        });
    });
    describe("Error handling", ()=>{
        it("should handle cookie errors gracefully", ()=>{
            mockCookies.get.mockImplementation(()=>{
                throw new Error("Cookie error");
            });
            expect(()=>service.getToken()).toThrow("Cookie error");
            expect(()=>service.isAuthenticated()).toThrow("Cookie error");
        });
        it("should still logout even if cookie removal fails", ()=>{
            mockCookies.remove.mockImplementation(()=>{
                throw new Error("Remove failed");
            });
            expect(()=>service.logout()).not.toThrow();
            expect(mockLocation.href).toBe("/login");
        });
    });
    // Enhanced Authentication Tests
    describe("Enhanced Authentication Features", ()=>{
        describe("refreshToken", ()=>{
            it("should refresh token successfully", async ()=>{
                const mockRefreshToken = "mock_refresh_token";
                mockCookies.get.mockImplementation((key)=>{
                    if (key === "refresh_token") return mockRefreshToken;
                    return undefined;
                });
                const mockResponse = {
                    access_token: "new_access_token",
                    refresh_token: "new_refresh_token",
                    token_type: "bearer",
                    expires_in: 3600,
                    user: {
                        id: "user123",
                        email: "test@example.com",
                        role: "admin",
                        organisation_id: "org456"
                    },
                    tenant: {
                        id: "org456",
                        name: "Test Organization",
                        industry: "Technology",
                        subscription_plan: "basic"
                    },
                    permissions: [
                        "read:users"
                    ]
                };
                mockApiService.post.mockResolvedValue(mockResponse);
                const result = await service.refreshToken();
                expect(mockApiService.post).toHaveBeenCalledWith("/auth/refresh", {
                    refresh_token: mockRefreshToken
                });
                expect(result).toEqual(mockResponse);
            });
            it("should handle missing refresh token", async ()=>{
                mockCookies.get.mockReturnValue(undefined);
                await expect(service.refreshToken()).rejects.toThrow("No refresh token available");
            });
        });
        describe("permission management", ()=>{
            beforeEach(()=>{
                const permissions = [
                    "read:users",
                    "write:users",
                    "read:organizations"
                ];
                mockLocalStorage.setItem("user_permissions", JSON.stringify(permissions));
            });
            it("should check single permission correctly", ()=>{
                expect(service.hasPermission("read:users")).toBe(true);
                expect(service.hasPermission("delete:users")).toBe(false);
            });
            it("should check multiple permissions correctly", ()=>{
                expect(service.hasAnyPermission([
                    "read:users",
                    "admin:all"
                ])).toBe(true);
                expect(service.hasAnyPermission([
                    "delete:users",
                    "admin:all"
                ])).toBe(false);
            });
            it("should handle missing permissions gracefully", ()=>{
                mockLocalStorage.removeItem("user_permissions");
                expect(service.hasPermission("read:users")).toBe(false);
                expect(service.hasAnyPermission([
                    "read:users"
                ])).toBe(false);
            });
        });
        describe("tenant information", ()=>{
            it("should return tenant info when available", ()=>{
                const tenantInfo = {
                    id: "org456",
                    name: "Test Organization",
                    industry: "Technology",
                    subscription_plan: "basic"
                };
                mockLocalStorage.setItem("tenant_info", JSON.stringify(tenantInfo));
                const result = service.getTenantInfo();
                expect(result).toEqual(tenantInfo);
            });
            it("should return null when no tenant info exists", ()=>{
                const result = service.getTenantInfo();
                expect(result).toBeNull();
            });
            it("should handle corrupted tenant data gracefully", ()=>{
                mockLocalStorage.setItem("tenant_info", "invalid json");
                const result = service.getTenantInfo();
                expect(result).toBeNull();
            });
        });
        describe("token refresh logic", ()=>{
            it("should determine when token needs refresh", ()=>{
                // Set token expiry to 2 minutes from now
                const expiryTime = new Date(Date.now() + 2 * 60 * 1000);
                mockLocalStorage.setItem("token_expires_at", expiryTime.toISOString());
                // Should need refresh (within 5 minute threshold)
                expect(service.shouldRefreshToken()).toBe(true);
            });
            it("should not refresh when token has plenty of time left", ()=>{
                // Set token expiry to 10 minutes from now
                const expiryTime = new Date(Date.now() + 10 * 60 * 1000);
                mockLocalStorage.setItem("token_expires_at", expiryTime.toISOString());
                // Should not need refresh
                expect(service.shouldRefreshToken()).toBe(false);
            });
            it("should handle missing expiry time", ()=>{
                mockLocalStorage.removeItem("token_expires_at");
                expect(service.shouldRefreshToken()).toBe(false);
            });
        });
        describe("ensureValidToken", ()=>{
            it("should return token if valid and not expiring soon", async ()=>{
                const mockToken = "valid_token";
                mockCookies.get.mockReturnValue(mockToken);
                // Set expiry far in future
                const expiryTime = new Date(Date.now() + 30 * 60 * 1000);
                mockLocalStorage.setItem("token_expires_at", expiryTime.toISOString());
                const result = await service.ensureValidToken();
                expect(result).toBe(mockToken);
            });
            it("should refresh token if expiring soon", async ()=>{
                const oldToken = "old_token";
                const newToken = "new_token";
                mockCookies.get.mockReturnValueOnce(oldToken) // First call returns old token
                .mockReturnValue(newToken) // Subsequent calls return new token
                ;
                // Set expiry to 2 minutes from now (within refresh threshold)
                const expiryTime = new Date(Date.now() + 2 * 60 * 1000);
                mockLocalStorage.setItem("token_expires_at", expiryTime.toISOString());
                const mockRefreshResponse = {
                    access_token: newToken,
                    refresh_token: "new_refresh",
                    expires_in: 3600,
                    user: {
                        id: "user123"
                    },
                    tenant: {
                        id: "org456"
                    },
                    permissions: []
                };
                mockApiService.post.mockResolvedValue(mockRefreshResponse);
                const result = await service.ensureValidToken();
                expect(mockApiService.post).toHaveBeenCalledWith("/auth/refresh", expect.any(Object));
                expect(result).toBe(newToken);
            });
        });
        describe("enhanced logout", ()=>{
            it("should logout with server-side token revocation", async ()=>{
                const mockRefreshToken = "refresh_token";
                mockCookies.get.mockReturnValue(mockRefreshToken);
                mockApiService.post.mockResolvedValue({
                    message: "Logout successful"
                });
                await service.logout(false);
                expect(mockApiService.post).toHaveBeenCalledWith("/auth/logout", {
                    refresh_token: mockRefreshToken,
                    all_devices: false
                });
                // Check that data was cleared
                expect(mockCookies.remove).toHaveBeenCalledWith("access_token");
                expect(mockCookies.remove).toHaveBeenCalledWith("refresh_token");
                expect(mockLocalStorage.removeItem).toHaveBeenCalledWith("current_user");
                expect(mockLocalStorage.removeItem).toHaveBeenCalledWith("tenant_info");
                expect(mockLocalStorage.removeItem).toHaveBeenCalledWith("user_permissions");
                expect(mockLocation.href).toBe("/login");
            });
        });
        describe("session management", ()=>{
            it("should check session successfully", async ()=>{
                const mockResponse = {
                    authenticated: true,
                    user_id: "user123",
                    tenant_id: "org456",
                    role: "admin",
                    active: true
                };
                mockApiService.get.mockResolvedValue(mockResponse);
                const result = await service.checkSession();
                expect(mockApiService.get).toHaveBeenCalledWith("/auth/session/check");
                expect(result).toEqual(mockResponse);
            });
            it("should extend session when needed", async ()=>{
                const mockResponse = {
                    extend_recommended: true,
                    message: "Token should be refreshed",
                    expires_soon: true
                };
                mockApiService.post.mockResolvedValue(mockResponse);
                const result = await service.extendSession();
                expect(mockApiService.post).toHaveBeenCalledWith("/auth/session/extend");
                expect(result).toEqual(mockResponse);
            });
        });
        describe("enhanced authentication state", ()=>{
            it("should return true for authenticated when token and user exist", ()=>{
                mockCookies.get.mockReturnValue("access_token");
                mockLocalStorage.setItem("current_user", JSON.stringify({
                    id: "user123"
                }));
                expect(service.isAuthenticated()).toBe(true);
            });
            it("should return false when no token exists", ()=>{
                mockCookies.get.mockReturnValue(undefined);
                mockLocalStorage.setItem("current_user", JSON.stringify({
                    id: "user123"
                }));
                expect(service.isAuthenticated()).toBe(false);
            });
            it("should return false when no user data exists", ()=>{
                mockCookies.get.mockReturnValue("access_token");
                mockLocalStorage.removeItem("current_user");
                expect(service.isAuthenticated()).toBe(false);
            });
        });
    });
});
describe("Singleton authService", ()=>{
    it("should export singleton instance", ()=>{
        expect(_auth.authService).toBeInstanceOf(_auth.AuthService);
    });
    it("should maintain same instance", ()=>{
        expect(_auth.authService).toBe(_auth.authService);
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0L1NpdGVzL01hcmtldEVkZ2UvcGxhdGZvcm0td3JhcHBlci9mcm9udGVuZC9zcmMvc2VydmljZXMvX190ZXN0c19fL2F1dGgudGVzdC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEVuaGFuY2VkIEF1dGhlbnRpY2F0aW9uIFNlcnZpY2UgVGVzdHNcbiAqIENvbXByZWhlbnNpdmUgdGVzdHMgZm9yIG11bHRpLXRlbmFudCBhdXRoIHdpdGggcGVybWlzc2lvbnMsIHRva2VuIHJlZnJlc2gsIGFuZCBzZXNzaW9uIG1hbmFnZW1lbnRcbiAqL1xuXG5pbXBvcnQgeyBBdXRoU2VydmljZSwgYXV0aFNlcnZpY2UgfSBmcm9tICcuLi9hdXRoJ1xuaW1wb3J0IHsgTG9naW5SZXF1ZXN0IH0gZnJvbSAnQC90eXBlcy9hdXRoJ1xuaW1wb3J0IHsgYXBpU2VydmljZSB9IGZyb20gJy4uL2FwaSdcblxuLy8gTW9jayBkZXBlbmRlbmNpZXNcbmplc3QubW9jaygnLi4vYXBpJylcbmNvbnN0IG1vY2tBcGlTZXJ2aWNlID0gYXBpU2VydmljZSBhcyBqZXN0Lk1vY2tlZDx0eXBlb2YgYXBpU2VydmljZT5cblxuLy8gTW9jayBqcy1jb29raWVcbmNvbnN0IG1vY2tDb29raWVzID0ge1xuICBzZXQ6IGplc3QuZm4oKSxcbiAgZ2V0OiBqZXN0LmZuKCksXG4gIHJlbW92ZTogamVzdC5mbigpLFxufVxuamVzdC5tb2NrKCdqcy1jb29raWUnLCAoKSA9PiBtb2NrQ29va2llcylcblxuLy8gTW9jayBsb2NhbFN0b3JhZ2VcbmNvbnN0IG1vY2tMb2NhbFN0b3JhZ2UgPSB7XG4gIHN0b3JlOiB7fSBhcyBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxuICBnZXRJdGVtOiBqZXN0LmZuKChrZXk6IHN0cmluZykgPT4gbW9ja0xvY2FsU3RvcmFnZS5zdG9yZVtrZXldIHx8IG51bGwpLFxuICBzZXRJdGVtOiBqZXN0LmZuKChrZXk6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4ge1xuICAgIG1vY2tMb2NhbFN0b3JhZ2Uuc3RvcmVba2V5XSA9IHZhbHVlXG4gIH0pLFxuICByZW1vdmVJdGVtOiBqZXN0LmZuKChrZXk6IHN0cmluZykgPT4ge1xuICAgIGRlbGV0ZSBtb2NrTG9jYWxTdG9yYWdlLnN0b3JlW2tleV1cbiAgfSksXG4gIGNsZWFyOiBqZXN0LmZuKCgpID0+IHtcbiAgICBtb2NrTG9jYWxTdG9yYWdlLnN0b3JlID0ge31cbiAgfSlcbn1cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2xvY2FsU3RvcmFnZScsIHtcbiAgdmFsdWU6IG1vY2tMb2NhbFN0b3JhZ2Vcbn0pXG5cbi8vIE1vY2sgd2luZG93LmxvY2F0aW9uIGZvciBsb2dvdXQgcmVkaXJlY3RcbmNvbnN0IG1vY2tMb2NhdGlvbiA9IHsgaHJlZjogJycgfVxuT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2xvY2F0aW9uJywgeyB2YWx1ZTogbW9ja0xvY2F0aW9uLCB3cml0YWJsZTogdHJ1ZSB9KVxuXG5kZXNjcmliZSgnQXV0aFNlcnZpY2UnLCAoKSA9PiB7XG4gIGxldCBzZXJ2aWNlOiBBdXRoU2VydmljZVxuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHNlcnZpY2UgPSBuZXcgQXV0aFNlcnZpY2UoKVxuICAgIGplc3QuY2xlYXJBbGxNb2NrcygpXG4gICAgbW9ja0xvY2F0aW9uLmhyZWYgPSAnJ1xuICAgIG1vY2tMb2NhbFN0b3JhZ2UuY2xlYXIoKVxuICAgIFxuICAgIC8vIFJlc2V0IG1vY2sgaW1wbGVtZW50YXRpb25zXG4gICAgbW9ja0Nvb2tpZXMuZ2V0Lm1vY2tSZXR1cm5WYWx1ZSh1bmRlZmluZWQpXG4gICAgbW9ja0Nvb2tpZXMuc2V0Lm1vY2tSZXR1cm5WYWx1ZSh1bmRlZmluZWQpXG4gICAgbW9ja0Nvb2tpZXMucmVtb3ZlLm1vY2tSZXR1cm5WYWx1ZSh1bmRlZmluZWQpXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ2xvZ2luJywgKCkgPT4ge1xuICAgIGNvbnN0IHZhbGlkTG9naW5SZXF1ZXN0OiBMb2dpblJlcXVlc3QgPSB7XG4gICAgICBjb2RlOiAndmFsaWQtYXV0aC1jb2RlJyxcbiAgICAgIHJlZGlyZWN0X3VyaTogJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9jYWxsYmFjaycsXG4gICAgfVxuXG4gICAgaXQoJ3Nob3VsZCBzdWNjZXNzZnVsbHkgbG9naW4gYW5kIHNldCBjb29raWVzJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZS5sb2dpbih2YWxpZExvZ2luUmVxdWVzdClcblxuICAgICAgZXhwZWN0KG1vY2tDb29raWVzLnNldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ2FjY2Vzc190b2tlbicsICdtb2NrLWp3dC10b2tlbicsIHsgZXhwaXJlczogMSB9KVxuICAgICAgZXhwZWN0KG1vY2tDb29raWVzLnNldCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3JlZnJlc2hfdG9rZW4nLCAnbW9jay1yZWZyZXNoLXRva2VuJywgeyBleHBpcmVzOiA3IH0pXG4gICAgICBleHBlY3QocmVzdWx0LmFjY2Vzc190b2tlbikudG9CZSgnbW9jay1qd3QtdG9rZW4nKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIHJlamVjdCB3aXRoIGludmFsaWQgY3JlZGVudGlhbHMnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCBpbnZhbGlkUmVxdWVzdDogTG9naW5SZXF1ZXN0ID0ge1xuICAgICAgICBjb2RlOiAnaW52YWxpZC1jb2RlJywgXG4gICAgICAgIHJlZGlyZWN0X3VyaTogJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9jYWxsYmFjaycsXG4gICAgICB9XG5cbiAgICAgIGF3YWl0IGV4cGVjdChzZXJ2aWNlLmxvZ2luKGludmFsaWRSZXF1ZXN0KSkucmVqZWN0cy50b1Rocm93KClcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdnZXRDdXJyZW50VXNlcicsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIGZldGNoIHVzZXIgd2hlbiBhdXRoZW50aWNhdGVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgbW9ja0Nvb2tpZXMuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigobmFtZSkgPT4gbmFtZSA9PT0gJ2FjY2Vzc190b2tlbicgPyAndmFsaWQtdG9rZW4nIDogdW5kZWZpbmVkKVxuXG4gICAgICBjb25zdCB1c2VyID0gYXdhaXQgc2VydmljZS5nZXRDdXJyZW50VXNlcigpXG5cbiAgICAgIGV4cGVjdCh1c2VyLmlkKS50b0JlKCd0ZXN0LXVzZXItNDU2JylcbiAgICAgIGV4cGVjdCh1c2VyLmVtYWlsKS50b0JlKCd0ZXN0QGV4YW1wbGUuY29tJylcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgdW5hdXRoZW50aWNhdGVkIHJlcXVlc3QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrQ29va2llcy5nZXQubW9ja1JldHVyblZhbHVlKHVuZGVmaW5lZClcblxuICAgICAgYXdhaXQgZXhwZWN0KHNlcnZpY2UuZ2V0Q3VycmVudFVzZXIoKSkucmVqZWN0cy50b1Rocm93KClcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdnZXRBdXRoMFVybCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiBBdXRoMCBhdXRob3JpemF0aW9uIFVSTCcsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHJlZGlyZWN0VXJpID0gJ2h0dHA6Ly9sb2NhbGhvc3Q6MzAwMC9jYWxsYmFjaydcbiAgICAgIFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZS5nZXRBdXRoMFVybChyZWRpcmVjdFVyaSlcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3VsdC5hdXRoX3VybCkudG9Db250YWluKCdhdXRoMC5jb20vYXV0aG9yaXplJylcbiAgICAgIGV4cGVjdChyZXN1bHQuYXV0aF91cmwpLnRvQ29udGFpbihlbmNvZGVVUklDb21wb25lbnQocmVkaXJlY3RVcmkpKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIGhhbmRsZSBzcGVjaWFsIGNoYXJhY3RlcnMgaW4gcmVkaXJlY3QgVVJJJywgYXN5bmMgKCkgPT4ge1xuICAgICAgY29uc3Qgc3BlY2lhbFVyaSA9ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvY2FsbGJhY2s/dGVzdD12YWx1ZSZvdGhlcj0xMjMnXG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2UuZ2V0QXV0aDBVcmwoc3BlY2lhbFVyaSlcbiAgICAgIFxuICAgICAgZXhwZWN0KHJlc3VsdC5hdXRoX3VybCkudG9Db250YWluKGVuY29kZVVSSUNvbXBvbmVudChzcGVjaWFsVXJpKSlcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdsb2dvdXQnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCByZW1vdmUgY29va2llcyBhbmQgcmVkaXJlY3QnLCAoKSA9PiB7XG4gICAgICBzZXJ2aWNlLmxvZ291dCgpXG5cbiAgICAgIGV4cGVjdChtb2NrQ29va2llcy5yZW1vdmUpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdhY2Nlc3NfdG9rZW4nKVxuICAgICAgZXhwZWN0KG1vY2tDb29raWVzLnJlbW92ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3JlZnJlc2hfdG9rZW4nKVxuICAgICAgZXhwZWN0KG1vY2tMb2NhdGlvbi5ocmVmKS50b0JlKCcvbG9naW4nKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ2dldFRva2VuJywgKCkgPT4ge1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIHRva2VuIHdoZW4gZXhpc3RzJywgKCkgPT4ge1xuICAgICAgbW9ja0Nvb2tpZXMuZ2V0Lm1vY2tSZXR1cm5WYWx1ZSgndGVzdC10b2tlbicpXG5cbiAgICAgIGNvbnN0IHRva2VuID0gc2VydmljZS5nZXRUb2tlbigpXG5cbiAgICAgIGV4cGVjdChtb2NrQ29va2llcy5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCdhY2Nlc3NfdG9rZW4nKVxuICAgICAgZXhwZWN0KHRva2VuKS50b0JlKCd0ZXN0LXRva2VuJylcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gdW5kZWZpbmVkIHdoZW4gbm8gdG9rZW4nLCAoKSA9PiB7XG4gICAgICBtb2NrQ29va2llcy5nZXQubW9ja1JldHVyblZhbHVlKHVuZGVmaW5lZClcblxuICAgICAgY29uc3QgdG9rZW4gPSBzZXJ2aWNlLmdldFRva2VuKClcblxuICAgICAgZXhwZWN0KHRva2VuKS50b0JlVW5kZWZpbmVkKClcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gZW1wdHkgc3RyaW5nJywgKCkgPT4ge1xuICAgICAgbW9ja0Nvb2tpZXMuZ2V0Lm1vY2tSZXR1cm5WYWx1ZSgnJylcblxuICAgICAgY29uc3QgdG9rZW4gPSBzZXJ2aWNlLmdldFRva2VuKClcblxuICAgICAgZXhwZWN0KHRva2VuKS50b0JlKCcnKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ2lzQXV0aGVudGljYXRlZCcsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIHJldHVybiB0cnVlIHdoZW4gdG9rZW4gZXhpc3RzJywgKCkgPT4ge1xuICAgICAgbW9ja0Nvb2tpZXMuZ2V0Lm1vY2tSZXR1cm5WYWx1ZSgndmFsaWQtdG9rZW4nKVxuXG4gICAgICBleHBlY3Qoc2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkudG9CZSh0cnVlKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBmYWxzZSB3aGVuIG5vIHRva2VuJywgKCkgPT4ge1xuICAgICAgbW9ja0Nvb2tpZXMuZ2V0Lm1vY2tSZXR1cm5WYWx1ZSh1bmRlZmluZWQpXG5cbiAgICAgIGV4cGVjdChzZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKS50b0JlKGZhbHNlKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIHJldHVybiBmYWxzZSBmb3IgZW1wdHkgdG9rZW4nLCAoKSA9PiB7XG4gICAgICBtb2NrQ29va2llcy5nZXQubW9ja1JldHVyblZhbHVlKCcnKVxuXG4gICAgICBleHBlY3Qoc2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkudG9CZShmYWxzZSlcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gZmFsc2UgZm9yIG51bGwgdG9rZW4nLCAoKSA9PiB7XG4gICAgICBtb2NrQ29va2llcy5nZXQubW9ja1JldHVyblZhbHVlKG51bGwpXG5cbiAgICAgIGV4cGVjdChzZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKS50b0JlKGZhbHNlKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ011bHRpLXRlbmFudCBzY2VuYXJpb3MnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgZGlmZmVyZW50IHRlbmFudCBsb2dpbiBjb2RlcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGhvdGVsTG9naW46IExvZ2luUmVxdWVzdCA9IHtcbiAgICAgICAgY29kZTogJ3Rlc3QtYXV0aC1jb2RlJyxcbiAgICAgICAgcmVkaXJlY3RfdXJpOiAnaHR0cDovL2hvdGVsLnBsYXRmb3JtLmNvbS9jYWxsYmFjaycsXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2UubG9naW4oaG90ZWxMb2dpbilcblxuICAgICAgZXhwZWN0KHJlc3VsdC51c2VyLm9yZ2FuaXNhdGlvbl9pZCkudG9CZSgndGVzdC10ZW5hbnQtMTIzJylcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3VsZCBtYWludGFpbiB0ZW5hbnQgY29udGV4dCBpbiB0b2tlbicsICgpID0+IHtcbiAgICAgIG1vY2tDb29raWVzLmdldC5tb2NrUmV0dXJuVmFsdWUoJ3RlbmFudC1zcGVjaWZpYy10b2tlbicpXG5cbiAgICAgIGNvbnN0IHRva2VuID0gc2VydmljZS5nZXRUb2tlbigpXG4gICAgICBleHBlY3QodG9rZW4pLnRvQmUoJ3RlbmFudC1zcGVjaWZpYy10b2tlbicpXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnRXJyb3IgaGFuZGxpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3Nob3VsZCBoYW5kbGUgY29va2llIGVycm9ycyBncmFjZWZ1bGx5JywgKCkgPT4ge1xuICAgICAgbW9ja0Nvb2tpZXMuZ2V0Lm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7IHRocm93IG5ldyBFcnJvcignQ29va2llIGVycm9yJykgfSlcblxuICAgICAgZXhwZWN0KCgpID0+IHNlcnZpY2UuZ2V0VG9rZW4oKSkudG9UaHJvdygnQ29va2llIGVycm9yJylcbiAgICAgIGV4cGVjdCgoKSA9PiBzZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKS50b1Rocm93KCdDb29raWUgZXJyb3InKVxuICAgIH0pXG5cbiAgICBpdCgnc2hvdWxkIHN0aWxsIGxvZ291dCBldmVuIGlmIGNvb2tpZSByZW1vdmFsIGZhaWxzJywgKCkgPT4ge1xuICAgICAgbW9ja0Nvb2tpZXMucmVtb3ZlLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiB7IHRocm93IG5ldyBFcnJvcignUmVtb3ZlIGZhaWxlZCcpIH0pXG5cbiAgICAgIGV4cGVjdCgoKSA9PiBzZXJ2aWNlLmxvZ291dCgpKS5ub3QudG9UaHJvdygpXG4gICAgICBleHBlY3QobW9ja0xvY2F0aW9uLmhyZWYpLnRvQmUoJy9sb2dpbicpXG4gICAgfSlcbiAgfSlcblxuICAvLyBFbmhhbmNlZCBBdXRoZW50aWNhdGlvbiBUZXN0c1xuICBkZXNjcmliZSgnRW5oYW5jZWQgQXV0aGVudGljYXRpb24gRmVhdHVyZXMnLCAoKSA9PiB7XG4gICAgZGVzY3JpYmUoJ3JlZnJlc2hUb2tlbicsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgcmVmcmVzaCB0b2tlbiBzdWNjZXNzZnVsbHknLCBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG1vY2tSZWZyZXNoVG9rZW4gPSAnbW9ja19yZWZyZXNoX3Rva2VuJ1xuICAgICAgICBtb2NrQ29va2llcy5nZXQubW9ja0ltcGxlbWVudGF0aW9uKChrZXkpID0+IHtcbiAgICAgICAgICBpZiAoa2V5ID09PSAncmVmcmVzaF90b2tlbicpIHJldHVybiBtb2NrUmVmcmVzaFRva2VuXG4gICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnN0IG1vY2tSZXNwb25zZSA9IHtcbiAgICAgICAgICBhY2Nlc3NfdG9rZW46ICduZXdfYWNjZXNzX3Rva2VuJyxcbiAgICAgICAgICByZWZyZXNoX3Rva2VuOiAnbmV3X3JlZnJlc2hfdG9rZW4nLFxuICAgICAgICAgIHRva2VuX3R5cGU6ICdiZWFyZXInLFxuICAgICAgICAgIGV4cGlyZXNfaW46IDM2MDAsXG4gICAgICAgICAgdXNlcjoge1xuICAgICAgICAgICAgaWQ6ICd1c2VyMTIzJyxcbiAgICAgICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgICAgICByb2xlOiAnYWRtaW4nLFxuICAgICAgICAgICAgb3JnYW5pc2F0aW9uX2lkOiAnb3JnNDU2J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgdGVuYW50OiB7XG4gICAgICAgICAgICBpZDogJ29yZzQ1NicsXG4gICAgICAgICAgICBuYW1lOiAnVGVzdCBPcmdhbml6YXRpb24nLFxuICAgICAgICAgICAgaW5kdXN0cnk6ICdUZWNobm9sb2d5JyxcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbl9wbGFuOiAnYmFzaWMnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwZXJtaXNzaW9uczogWydyZWFkOnVzZXJzJ11cbiAgICAgICAgfVxuXG4gICAgICAgIG1vY2tBcGlTZXJ2aWNlLnBvc3QubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Jlc3BvbnNlKVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2UucmVmcmVzaFRva2VuKClcblxuICAgICAgICBleHBlY3QobW9ja0FwaVNlcnZpY2UucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hdXRoL3JlZnJlc2gnLCB7XG4gICAgICAgICAgcmVmcmVzaF90b2tlbjogbW9ja1JlZnJlc2hUb2tlblxuICAgICAgICB9KVxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0VxdWFsKG1vY2tSZXNwb25zZSlcbiAgICAgIH0pXG5cbiAgICAgIGl0KCdzaG91bGQgaGFuZGxlIG1pc3NpbmcgcmVmcmVzaCB0b2tlbicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgbW9ja0Nvb2tpZXMuZ2V0Lm1vY2tSZXR1cm5WYWx1ZSh1bmRlZmluZWQpXG5cbiAgICAgICAgYXdhaXQgZXhwZWN0KHNlcnZpY2UucmVmcmVzaFRva2VuKCkpLnJlamVjdHMudG9UaHJvdygnTm8gcmVmcmVzaCB0b2tlbiBhdmFpbGFibGUnKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgZGVzY3JpYmUoJ3Blcm1pc3Npb24gbWFuYWdlbWVudCcsICgpID0+IHtcbiAgICAgIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgICAgICBjb25zdCBwZXJtaXNzaW9ucyA9IFsncmVhZDp1c2VycycsICd3cml0ZTp1c2VycycsICdyZWFkOm9yZ2FuaXphdGlvbnMnXVxuICAgICAgICBtb2NrTG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3VzZXJfcGVybWlzc2lvbnMnLCBKU09OLnN0cmluZ2lmeShwZXJtaXNzaW9ucykpXG4gICAgICB9KVxuXG4gICAgICBpdCgnc2hvdWxkIGNoZWNrIHNpbmdsZSBwZXJtaXNzaW9uIGNvcnJlY3RseScsICgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNlcnZpY2UuaGFzUGVybWlzc2lvbigncmVhZDp1c2VycycpKS50b0JlKHRydWUpXG4gICAgICAgIGV4cGVjdChzZXJ2aWNlLmhhc1Blcm1pc3Npb24oJ2RlbGV0ZTp1c2VycycpKS50b0JlKGZhbHNlKVxuICAgICAgfSlcblxuICAgICAgaXQoJ3Nob3VsZCBjaGVjayBtdWx0aXBsZSBwZXJtaXNzaW9ucyBjb3JyZWN0bHknLCAoKSA9PiB7XG4gICAgICAgIGV4cGVjdChzZXJ2aWNlLmhhc0FueVBlcm1pc3Npb24oWydyZWFkOnVzZXJzJywgJ2FkbWluOmFsbCddKSkudG9CZSh0cnVlKVxuICAgICAgICBleHBlY3Qoc2VydmljZS5oYXNBbnlQZXJtaXNzaW9uKFsnZGVsZXRlOnVzZXJzJywgJ2FkbWluOmFsbCddKSkudG9CZShmYWxzZSlcbiAgICAgIH0pXG5cbiAgICAgIGl0KCdzaG91bGQgaGFuZGxlIG1pc3NpbmcgcGVybWlzc2lvbnMgZ3JhY2VmdWxseScsICgpID0+IHtcbiAgICAgICAgbW9ja0xvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCd1c2VyX3Blcm1pc3Npb25zJylcbiAgICAgICAgXG4gICAgICAgIGV4cGVjdChzZXJ2aWNlLmhhc1Blcm1pc3Npb24oJ3JlYWQ6dXNlcnMnKSkudG9CZShmYWxzZSlcbiAgICAgICAgZXhwZWN0KHNlcnZpY2UuaGFzQW55UGVybWlzc2lvbihbJ3JlYWQ6dXNlcnMnXSkpLnRvQmUoZmFsc2UpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBkZXNjcmliZSgndGVuYW50IGluZm9ybWF0aW9uJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gdGVuYW50IGluZm8gd2hlbiBhdmFpbGFibGUnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHRlbmFudEluZm8gPSB7XG4gICAgICAgICAgaWQ6ICdvcmc0NTYnLFxuICAgICAgICAgIG5hbWU6ICdUZXN0IE9yZ2FuaXphdGlvbicsXG4gICAgICAgICAgaW5kdXN0cnk6ICdUZWNobm9sb2d5JyxcbiAgICAgICAgICBzdWJzY3JpcHRpb25fcGxhbjogJ2Jhc2ljJ1xuICAgICAgICB9XG5cbiAgICAgICAgbW9ja0xvY2FsU3RvcmFnZS5zZXRJdGVtKCd0ZW5hbnRfaW5mbycsIEpTT04uc3RyaW5naWZ5KHRlbmFudEluZm8pKVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHNlcnZpY2UuZ2V0VGVuYW50SW5mbygpXG5cbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbCh0ZW5hbnRJbmZvKVxuICAgICAgfSlcblxuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gbnVsbCB3aGVuIG5vIHRlbmFudCBpbmZvIGV4aXN0cycsICgpID0+IHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gc2VydmljZS5nZXRUZW5hbnRJbmZvKClcblxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0JlTnVsbCgpXG4gICAgICB9KVxuXG4gICAgICBpdCgnc2hvdWxkIGhhbmRsZSBjb3JydXB0ZWQgdGVuYW50IGRhdGEgZ3JhY2VmdWxseScsICgpID0+IHtcbiAgICAgICAgbW9ja0xvY2FsU3RvcmFnZS5zZXRJdGVtKCd0ZW5hbnRfaW5mbycsICdpbnZhbGlkIGpzb24nKVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHNlcnZpY2UuZ2V0VGVuYW50SW5mbygpXG5cbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9CZU51bGwoKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgZGVzY3JpYmUoJ3Rva2VuIHJlZnJlc2ggbG9naWMnLCAoKSA9PiB7XG4gICAgICBpdCgnc2hvdWxkIGRldGVybWluZSB3aGVuIHRva2VuIG5lZWRzIHJlZnJlc2gnLCAoKSA9PiB7XG4gICAgICAgIC8vIFNldCB0b2tlbiBleHBpcnkgdG8gMiBtaW51dGVzIGZyb20gbm93XG4gICAgICAgIGNvbnN0IGV4cGlyeVRpbWUgPSBuZXcgRGF0ZShEYXRlLm5vdygpICsgMiAqIDYwICogMTAwMClcbiAgICAgICAgbW9ja0xvY2FsU3RvcmFnZS5zZXRJdGVtKCd0b2tlbl9leHBpcmVzX2F0JywgZXhwaXJ5VGltZS50b0lTT1N0cmluZygpKVxuXG4gICAgICAgIC8vIFNob3VsZCBuZWVkIHJlZnJlc2ggKHdpdGhpbiA1IG1pbnV0ZSB0aHJlc2hvbGQpXG4gICAgICAgIGV4cGVjdChzZXJ2aWNlLnNob3VsZFJlZnJlc2hUb2tlbigpKS50b0JlKHRydWUpXG4gICAgICB9KVxuXG4gICAgICBpdCgnc2hvdWxkIG5vdCByZWZyZXNoIHdoZW4gdG9rZW4gaGFzIHBsZW50eSBvZiB0aW1lIGxlZnQnLCAoKSA9PiB7XG4gICAgICAgIC8vIFNldCB0b2tlbiBleHBpcnkgdG8gMTAgbWludXRlcyBmcm9tIG5vd1xuICAgICAgICBjb25zdCBleHBpcnlUaW1lID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIDEwICogNjAgKiAxMDAwKVxuICAgICAgICBtb2NrTG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rva2VuX2V4cGlyZXNfYXQnLCBleHBpcnlUaW1lLnRvSVNPU3RyaW5nKCkpXG5cbiAgICAgICAgLy8gU2hvdWxkIG5vdCBuZWVkIHJlZnJlc2hcbiAgICAgICAgZXhwZWN0KHNlcnZpY2Uuc2hvdWxkUmVmcmVzaFRva2VuKCkpLnRvQmUoZmFsc2UpXG4gICAgICB9KVxuXG4gICAgICBpdCgnc2hvdWxkIGhhbmRsZSBtaXNzaW5nIGV4cGlyeSB0aW1lJywgKCkgPT4ge1xuICAgICAgICBtb2NrTG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ3Rva2VuX2V4cGlyZXNfYXQnKVxuICAgICAgICBcbiAgICAgICAgZXhwZWN0KHNlcnZpY2Uuc2hvdWxkUmVmcmVzaFRva2VuKCkpLnRvQmUoZmFsc2UpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBkZXNjcmliZSgnZW5zdXJlVmFsaWRUb2tlbicsICgpID0+IHtcbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIHRva2VuIGlmIHZhbGlkIGFuZCBub3QgZXhwaXJpbmcgc29vbicsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgbW9ja1Rva2VuID0gJ3ZhbGlkX3Rva2VuJ1xuICAgICAgICBtb2NrQ29va2llcy5nZXQubW9ja1JldHVyblZhbHVlKG1vY2tUb2tlbilcbiAgICAgICAgXG4gICAgICAgIC8vIFNldCBleHBpcnkgZmFyIGluIGZ1dHVyZVxuICAgICAgICBjb25zdCBleHBpcnlUaW1lID0gbmV3IERhdGUoRGF0ZS5ub3coKSArIDMwICogNjAgKiAxMDAwKVxuICAgICAgICBtb2NrTG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rva2VuX2V4cGlyZXNfYXQnLCBleHBpcnlUaW1lLnRvSVNPU3RyaW5nKCkpXG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZS5lbnN1cmVWYWxpZFRva2VuKClcblxuICAgICAgICBleHBlY3QocmVzdWx0KS50b0JlKG1vY2tUb2tlbilcbiAgICAgIH0pXG5cbiAgICAgIGl0KCdzaG91bGQgcmVmcmVzaCB0b2tlbiBpZiBleHBpcmluZyBzb29uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBvbGRUb2tlbiA9ICdvbGRfdG9rZW4nXG4gICAgICAgIGNvbnN0IG5ld1Rva2VuID0gJ25ld190b2tlbidcbiAgICAgICAgXG4gICAgICAgIG1vY2tDb29raWVzLmdldFxuICAgICAgICAgIC5tb2NrUmV0dXJuVmFsdWVPbmNlKG9sZFRva2VuKSAvLyBGaXJzdCBjYWxsIHJldHVybnMgb2xkIHRva2VuXG4gICAgICAgICAgLm1vY2tSZXR1cm5WYWx1ZShuZXdUb2tlbikgLy8gU3Vic2VxdWVudCBjYWxscyByZXR1cm4gbmV3IHRva2VuXG5cbiAgICAgICAgLy8gU2V0IGV4cGlyeSB0byAyIG1pbnV0ZXMgZnJvbSBub3cgKHdpdGhpbiByZWZyZXNoIHRocmVzaG9sZClcbiAgICAgICAgY29uc3QgZXhwaXJ5VGltZSA9IG5ldyBEYXRlKERhdGUubm93KCkgKyAyICogNjAgKiAxMDAwKVxuICAgICAgICBtb2NrTG9jYWxTdG9yYWdlLnNldEl0ZW0oJ3Rva2VuX2V4cGlyZXNfYXQnLCBleHBpcnlUaW1lLnRvSVNPU3RyaW5nKCkpXG5cbiAgICAgICAgY29uc3QgbW9ja1JlZnJlc2hSZXNwb25zZSA9IHtcbiAgICAgICAgICBhY2Nlc3NfdG9rZW46IG5ld1Rva2VuLFxuICAgICAgICAgIHJlZnJlc2hfdG9rZW46ICduZXdfcmVmcmVzaCcsXG4gICAgICAgICAgZXhwaXJlc19pbjogMzYwMCxcbiAgICAgICAgICB1c2VyOiB7IGlkOiAndXNlcjEyMycgfSxcbiAgICAgICAgICB0ZW5hbnQ6IHsgaWQ6ICdvcmc0NTYnIH0sXG4gICAgICAgICAgcGVybWlzc2lvbnM6IFtdXG4gICAgICAgIH1cblxuICAgICAgICBtb2NrQXBpU2VydmljZS5wb3N0Lm1vY2tSZXNvbHZlZFZhbHVlKG1vY2tSZWZyZXNoUmVzcG9uc2UpXG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZS5lbnN1cmVWYWxpZFRva2VuKClcblxuICAgICAgICBleHBlY3QobW9ja0FwaVNlcnZpY2UucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hdXRoL3JlZnJlc2gnLCBleHBlY3QuYW55KE9iamVjdCkpXG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvQmUobmV3VG9rZW4pXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBkZXNjcmliZSgnZW5oYW5jZWQgbG9nb3V0JywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBsb2dvdXQgd2l0aCBzZXJ2ZXItc2lkZSB0b2tlbiByZXZvY2F0aW9uJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBtb2NrUmVmcmVzaFRva2VuID0gJ3JlZnJlc2hfdG9rZW4nXG4gICAgICAgIG1vY2tDb29raWVzLmdldC5tb2NrUmV0dXJuVmFsdWUobW9ja1JlZnJlc2hUb2tlbilcbiAgICAgICAgbW9ja0FwaVNlcnZpY2UucG9zdC5tb2NrUmVzb2x2ZWRWYWx1ZSh7IG1lc3NhZ2U6ICdMb2dvdXQgc3VjY2Vzc2Z1bCcgfSlcblxuICAgICAgICBhd2FpdCBzZXJ2aWNlLmxvZ291dChmYWxzZSlcblxuICAgICAgICBleHBlY3QobW9ja0FwaVNlcnZpY2UucG9zdCkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJy9hdXRoL2xvZ291dCcsIHtcbiAgICAgICAgICByZWZyZXNoX3Rva2VuOiBtb2NrUmVmcmVzaFRva2VuLFxuICAgICAgICAgIGFsbF9kZXZpY2VzOiBmYWxzZVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIENoZWNrIHRoYXQgZGF0YSB3YXMgY2xlYXJlZFxuICAgICAgICBleHBlY3QobW9ja0Nvb2tpZXMucmVtb3ZlKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnYWNjZXNzX3Rva2VuJylcbiAgICAgICAgZXhwZWN0KG1vY2tDb29raWVzLnJlbW92ZSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3JlZnJlc2hfdG9rZW4nKVxuICAgICAgICBleHBlY3QobW9ja0xvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKS50b0hhdmVCZWVuQ2FsbGVkV2l0aCgnY3VycmVudF91c2VyJylcbiAgICAgICAgZXhwZWN0KG1vY2tMb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3RlbmFudF9pbmZvJylcbiAgICAgICAgZXhwZWN0KG1vY2tMb2NhbFN0b3JhZ2UucmVtb3ZlSXRlbSkudG9IYXZlQmVlbkNhbGxlZFdpdGgoJ3VzZXJfcGVybWlzc2lvbnMnKVxuICAgICAgICBleHBlY3QobW9ja0xvY2F0aW9uLmhyZWYpLnRvQmUoJy9sb2dpbicpXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBkZXNjcmliZSgnc2Vzc2lvbiBtYW5hZ2VtZW50JywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCBjaGVjayBzZXNzaW9uIHN1Y2Nlc3NmdWxseScsIGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0ge1xuICAgICAgICAgIGF1dGhlbnRpY2F0ZWQ6IHRydWUsXG4gICAgICAgICAgdXNlcl9pZDogJ3VzZXIxMjMnLFxuICAgICAgICAgIHRlbmFudF9pZDogJ29yZzQ1NicsXG4gICAgICAgICAgcm9sZTogJ2FkbWluJyxcbiAgICAgICAgICBhY3RpdmU6IHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIG1vY2tBcGlTZXJ2aWNlLmdldC5tb2NrUmVzb2x2ZWRWYWx1ZShtb2NrUmVzcG9uc2UpXG5cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc2VydmljZS5jaGVja1Nlc3Npb24oKVxuXG4gICAgICAgIGV4cGVjdChtb2NrQXBpU2VydmljZS5nZXQpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYXV0aC9zZXNzaW9uL2NoZWNrJylcbiAgICAgICAgZXhwZWN0KHJlc3VsdCkudG9FcXVhbChtb2NrUmVzcG9uc2UpXG4gICAgICB9KVxuXG4gICAgICBpdCgnc2hvdWxkIGV4dGVuZCBzZXNzaW9uIHdoZW4gbmVlZGVkJywgYXN5bmMgKCkgPT4ge1xuICAgICAgICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7XG4gICAgICAgICAgZXh0ZW5kX3JlY29tbWVuZGVkOiB0cnVlLFxuICAgICAgICAgIG1lc3NhZ2U6ICdUb2tlbiBzaG91bGQgYmUgcmVmcmVzaGVkJyxcbiAgICAgICAgICBleHBpcmVzX3Nvb246IHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIG1vY2tBcGlTZXJ2aWNlLnBvc3QubW9ja1Jlc29sdmVkVmFsdWUobW9ja1Jlc3BvbnNlKVxuXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHNlcnZpY2UuZXh0ZW5kU2Vzc2lvbigpXG5cbiAgICAgICAgZXhwZWN0KG1vY2tBcGlTZXJ2aWNlLnBvc3QpLnRvSGF2ZUJlZW5DYWxsZWRXaXRoKCcvYXV0aC9zZXNzaW9uL2V4dGVuZCcpXG4gICAgICAgIGV4cGVjdChyZXN1bHQpLnRvRXF1YWwobW9ja1Jlc3BvbnNlKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgZGVzY3JpYmUoJ2VuaGFuY2VkIGF1dGhlbnRpY2F0aW9uIHN0YXRlJywgKCkgPT4ge1xuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gdHJ1ZSBmb3IgYXV0aGVudGljYXRlZCB3aGVuIHRva2VuIGFuZCB1c2VyIGV4aXN0JywgKCkgPT4ge1xuICAgICAgICBtb2NrQ29va2llcy5nZXQubW9ja1JldHVyblZhbHVlKCdhY2Nlc3NfdG9rZW4nKVxuICAgICAgICBtb2NrTG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2N1cnJlbnRfdXNlcicsIEpTT04uc3RyaW5naWZ5KHsgaWQ6ICd1c2VyMTIzJyB9KSlcblxuICAgICAgICBleHBlY3Qoc2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkudG9CZSh0cnVlKVxuICAgICAgfSlcblxuICAgICAgaXQoJ3Nob3VsZCByZXR1cm4gZmFsc2Ugd2hlbiBubyB0b2tlbiBleGlzdHMnLCAoKSA9PiB7XG4gICAgICAgIG1vY2tDb29raWVzLmdldC5tb2NrUmV0dXJuVmFsdWUodW5kZWZpbmVkKVxuICAgICAgICBtb2NrTG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2N1cnJlbnRfdXNlcicsIEpTT04uc3RyaW5naWZ5KHsgaWQ6ICd1c2VyMTIzJyB9KSlcblxuICAgICAgICBleHBlY3Qoc2VydmljZS5pc0F1dGhlbnRpY2F0ZWQoKSkudG9CZShmYWxzZSlcbiAgICAgIH0pXG5cbiAgICAgIGl0KCdzaG91bGQgcmV0dXJuIGZhbHNlIHdoZW4gbm8gdXNlciBkYXRhIGV4aXN0cycsICgpID0+IHtcbiAgICAgICAgbW9ja0Nvb2tpZXMuZ2V0Lm1vY2tSZXR1cm5WYWx1ZSgnYWNjZXNzX3Rva2VuJylcbiAgICAgICAgbW9ja0xvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdjdXJyZW50X3VzZXInKVxuXG4gICAgICAgIGV4cGVjdChzZXJ2aWNlLmlzQXV0aGVudGljYXRlZCgpKS50b0JlKGZhbHNlKVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxufSlcblxuZGVzY3JpYmUoJ1NpbmdsZXRvbiBhdXRoU2VydmljZScsICgpID0+IHtcbiAgaXQoJ3Nob3VsZCBleHBvcnQgc2luZ2xldG9uIGluc3RhbmNlJywgKCkgPT4ge1xuICAgIGV4cGVjdChhdXRoU2VydmljZSkudG9CZUluc3RhbmNlT2YoQXV0aFNlcnZpY2UpXG4gIH0pXG5cbiAgaXQoJ3Nob3VsZCBtYWludGFpbiBzYW1lIGluc3RhbmNlJywgKCkgPT4ge1xuICAgIGV4cGVjdChhdXRoU2VydmljZSkudG9CZShhdXRoU2VydmljZSlcbiAgfSlcbn0pIl0sIm5hbWVzIjpbImplc3QiLCJtb2NrIiwibW9ja0Nvb2tpZXMiLCJtb2NrQXBpU2VydmljZSIsImFwaVNlcnZpY2UiLCJzZXQiLCJmbiIsImdldCIsInJlbW92ZSIsIm1vY2tMb2NhbFN0b3JhZ2UiLCJzdG9yZSIsImdldEl0ZW0iLCJrZXkiLCJzZXRJdGVtIiwidmFsdWUiLCJyZW1vdmVJdGVtIiwiY2xlYXIiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIndpbmRvdyIsIm1vY2tMb2NhdGlvbiIsImhyZWYiLCJ3cml0YWJsZSIsImRlc2NyaWJlIiwic2VydmljZSIsImJlZm9yZUVhY2giLCJBdXRoU2VydmljZSIsImNsZWFyQWxsTW9ja3MiLCJtb2NrUmV0dXJuVmFsdWUiLCJ1bmRlZmluZWQiLCJ2YWxpZExvZ2luUmVxdWVzdCIsImNvZGUiLCJyZWRpcmVjdF91cmkiLCJpdCIsInJlc3VsdCIsImxvZ2luIiwiZXhwZWN0IiwidG9IYXZlQmVlbkNhbGxlZFdpdGgiLCJleHBpcmVzIiwiYWNjZXNzX3Rva2VuIiwidG9CZSIsImludmFsaWRSZXF1ZXN0IiwicmVqZWN0cyIsInRvVGhyb3ciLCJtb2NrSW1wbGVtZW50YXRpb24iLCJuYW1lIiwidXNlciIsImdldEN1cnJlbnRVc2VyIiwiaWQiLCJlbWFpbCIsInJlZGlyZWN0VXJpIiwiZ2V0QXV0aDBVcmwiLCJhdXRoX3VybCIsInRvQ29udGFpbiIsImVuY29kZVVSSUNvbXBvbmVudCIsInNwZWNpYWxVcmkiLCJsb2dvdXQiLCJ0b2tlbiIsImdldFRva2VuIiwidG9CZVVuZGVmaW5lZCIsImlzQXV0aGVudGljYXRlZCIsImhvdGVsTG9naW4iLCJvcmdhbmlzYXRpb25faWQiLCJFcnJvciIsIm5vdCIsIm1vY2tSZWZyZXNoVG9rZW4iLCJtb2NrUmVzcG9uc2UiLCJyZWZyZXNoX3Rva2VuIiwidG9rZW5fdHlwZSIsImV4cGlyZXNfaW4iLCJyb2xlIiwidGVuYW50IiwiaW5kdXN0cnkiLCJzdWJzY3JpcHRpb25fcGxhbiIsInBlcm1pc3Npb25zIiwicG9zdCIsIm1vY2tSZXNvbHZlZFZhbHVlIiwicmVmcmVzaFRva2VuIiwidG9FcXVhbCIsIkpTT04iLCJzdHJpbmdpZnkiLCJoYXNQZXJtaXNzaW9uIiwiaGFzQW55UGVybWlzc2lvbiIsInRlbmFudEluZm8iLCJnZXRUZW5hbnRJbmZvIiwidG9CZU51bGwiLCJleHBpcnlUaW1lIiwiRGF0ZSIsIm5vdyIsInRvSVNPU3RyaW5nIiwic2hvdWxkUmVmcmVzaFRva2VuIiwibW9ja1Rva2VuIiwiZW5zdXJlVmFsaWRUb2tlbiIsIm9sZFRva2VuIiwibmV3VG9rZW4iLCJtb2NrUmV0dXJuVmFsdWVPbmNlIiwibW9ja1JlZnJlc2hSZXNwb25zZSIsImFueSIsIm1lc3NhZ2UiLCJhbGxfZGV2aWNlcyIsImF1dGhlbnRpY2F0ZWQiLCJ1c2VyX2lkIiwidGVuYW50X2lkIiwiYWN0aXZlIiwiY2hlY2tTZXNzaW9uIiwiZXh0ZW5kX3JlY29tbWVuZGVkIiwiZXhwaXJlc19zb29uIiwiZXh0ZW5kU2Vzc2lvbiIsImF1dGhTZXJ2aWNlIiwidG9CZUluc3RhbmNlT2YiXSwibWFwcGluZ3MiOiJBQUFBOzs7Q0FHQztBQU1ELG9CQUFvQjtBQUNwQkEsS0FBS0MsSUFBSSxDQUFDO0FBU1ZELEtBQUtDLElBQUksQ0FBQyxhQUFhLElBQU1DOzs7O3NCQWRZO3FCQUVkO0FBSTNCLE1BQU1DLGlCQUFpQkMsZUFBVTtBQUVqQyxpQkFBaUI7QUFDakIsTUFBTUYsY0FBYztJQUNsQkcsS0FBS0wsS0FBS00sRUFBRTtJQUNaQyxLQUFLUCxLQUFLTSxFQUFFO0lBQ1pFLFFBQVFSLEtBQUtNLEVBQUU7QUFDakI7QUFHQSxvQkFBb0I7QUFDcEIsTUFBTUcsbUJBQW1CO0lBQ3ZCQyxPQUFPLENBQUM7SUFDUkMsU0FBU1gsS0FBS00sRUFBRSxDQUFDLENBQUNNLE1BQWdCSCxpQkFBaUJDLEtBQUssQ0FBQ0UsSUFBSSxJQUFJO0lBQ2pFQyxTQUFTYixLQUFLTSxFQUFFLENBQUMsQ0FBQ00sS0FBYUU7UUFDN0JMLGlCQUFpQkMsS0FBSyxDQUFDRSxJQUFJLEdBQUdFO0lBQ2hDO0lBQ0FDLFlBQVlmLEtBQUtNLEVBQUUsQ0FBQyxDQUFDTTtRQUNuQixPQUFPSCxpQkFBaUJDLEtBQUssQ0FBQ0UsSUFBSTtJQUNwQztJQUNBSSxPQUFPaEIsS0FBS00sRUFBRSxDQUFDO1FBQ2JHLGlCQUFpQkMsS0FBSyxHQUFHLENBQUM7SUFDNUI7QUFDRjtB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