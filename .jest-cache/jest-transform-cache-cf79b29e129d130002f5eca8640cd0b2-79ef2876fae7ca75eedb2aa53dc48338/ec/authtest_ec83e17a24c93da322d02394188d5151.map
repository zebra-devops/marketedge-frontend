{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/services/__tests__/auth.test.ts"],"sourcesContent":["/**\n * Enhanced Authentication Service Tests\n * Comprehensive tests for multi-tenant auth with permissions, token refresh, and session management\n */\n\nimport { AuthService, authService } from '../auth'\nimport { LoginRequest } from '@/types/auth'\nimport { apiService } from '../api'\n\n// Mock dependencies\njest.mock('../api')\nconst mockApiService = apiService as jest.Mocked<typeof apiService>\n\n// Mock js-cookie\nconst mockCookies = {\n  set: jest.fn(),\n  get: jest.fn(),\n  remove: jest.fn(),\n}\njest.mock('js-cookie', () => mockCookies)\n\n// Mock localStorage\nconst mockLocalStorage = {\n  store: {} as Record<string, string>,\n  getItem: jest.fn((key: string) => mockLocalStorage.store[key] || null),\n  setItem: jest.fn((key: string, value: string) => {\n    mockLocalStorage.store[key] = value\n  }),\n  removeItem: jest.fn((key: string) => {\n    delete mockLocalStorage.store[key]\n  }),\n  clear: jest.fn(() => {\n    mockLocalStorage.store = {}\n  })\n}\n\nObject.defineProperty(window, 'localStorage', {\n  value: mockLocalStorage\n})\n\n// Mock window.location for logout redirect\nconst mockLocation = { href: '' }\nObject.defineProperty(window, 'location', { value: mockLocation, writable: true })\n\ndescribe('AuthService', () => {\n  let service: AuthService\n\n  beforeEach(() => {\n    service = new AuthService()\n    jest.clearAllMocks()\n    mockLocation.href = ''\n    mockLocalStorage.clear()\n    \n    // Reset mock implementations\n    mockCookies.get.mockReturnValue(undefined)\n    mockCookies.set.mockReturnValue(undefined)\n    mockCookies.remove.mockReturnValue(undefined)\n  })\n\n  describe('login', () => {\n    const validLoginRequest: LoginRequest = {\n      code: 'valid-auth-code',\n      redirect_uri: 'http://localhost:3000/callback',\n    }\n\n    it('should successfully login and set cookies', async () => {\n      const result = await service.login(validLoginRequest)\n\n      expect(mockCookies.set).toHaveBeenCalledWith('access_token', 'mock-jwt-token', { expires: 1 })\n      expect(mockCookies.set).toHaveBeenCalledWith('refresh_token', 'mock-refresh-token', { expires: 7 })\n      expect(result.access_token).toBe('mock-jwt-token')\n    })\n\n    it('should reject with invalid credentials', async () => {\n      const invalidRequest: LoginRequest = {\n        code: 'invalid-code', \n        redirect_uri: 'http://localhost:3000/callback',\n      }\n\n      await expect(service.login(invalidRequest)).rejects.toThrow()\n    })\n  })\n\n  describe('getCurrentUser', () => {\n    it('should fetch user when authenticated', async () => {\n      mockCookies.get.mockImplementation((name) => name === 'access_token' ? 'valid-token' : undefined)\n\n      const user = await service.getCurrentUser()\n\n      expect(user.id).toBe('test-user-456')\n      expect(user.email).toBe('test@example.com')\n    })\n\n    it('should handle unauthenticated request', async () => {\n      mockCookies.get.mockReturnValue(undefined)\n\n      await expect(service.getCurrentUser()).rejects.toThrow()\n    })\n  })\n\n  describe('getAuth0Url', () => {\n    it('should return Auth0 authorization URL', async () => {\n      const redirectUri = 'http://localhost:3000/callback'\n      \n      const result = await service.getAuth0Url(redirectUri)\n      \n      expect(result.auth_url).toContain('auth0.com/authorize')\n      expect(result.auth_url).toContain(encodeURIComponent(redirectUri))\n    })\n\n    it('should handle special characters in redirect URI', async () => {\n      const specialUri = 'http://localhost:3000/callback?test=value&other=123'\n      \n      const result = await service.getAuth0Url(specialUri)\n      \n      expect(result.auth_url).toContain(encodeURIComponent(specialUri))\n    })\n  })\n\n  describe('logout', () => {\n    it('should remove cookies and redirect', () => {\n      service.logout()\n\n      expect(mockCookies.remove).toHaveBeenCalledWith('access_token')\n      expect(mockCookies.remove).toHaveBeenCalledWith('refresh_token')\n      expect(mockLocation.href).toBe('/login')\n    })\n  })\n\n  describe('getToken', () => {\n    it('should return token when exists', () => {\n      mockCookies.get.mockReturnValue('test-token')\n\n      const token = service.getToken()\n\n      expect(mockCookies.get).toHaveBeenCalledWith('access_token')\n      expect(token).toBe('test-token')\n    })\n\n    it('should return undefined when no token', () => {\n      mockCookies.get.mockReturnValue(undefined)\n\n      const token = service.getToken()\n\n      expect(token).toBeUndefined()\n    })\n\n    it('should return empty string', () => {\n      mockCookies.get.mockReturnValue('')\n\n      const token = service.getToken()\n\n      expect(token).toBe('')\n    })\n  })\n\n  describe('isAuthenticated', () => {\n    it('should return true when token exists', () => {\n      mockCookies.get.mockReturnValue('valid-token')\n\n      expect(service.isAuthenticated()).toBe(true)\n    })\n\n    it('should return false when no token', () => {\n      mockCookies.get.mockReturnValue(undefined)\n\n      expect(service.isAuthenticated()).toBe(false)\n    })\n\n    it('should return false for empty token', () => {\n      mockCookies.get.mockReturnValue('')\n\n      expect(service.isAuthenticated()).toBe(false)\n    })\n\n    it('should return false for null token', () => {\n      mockCookies.get.mockReturnValue(null)\n\n      expect(service.isAuthenticated()).toBe(false)\n    })\n  })\n\n  describe('Multi-tenant scenarios', () => {\n    it('should handle different tenant login codes', async () => {\n      const hotelLogin: LoginRequest = {\n        code: 'test-auth-code',\n        redirect_uri: 'http://hotel.platform.com/callback',\n      }\n\n      const result = await service.login(hotelLogin)\n\n      expect(result.user.organisation_id).toBe('test-tenant-123')\n    })\n\n    it('should maintain tenant context in token', () => {\n      mockCookies.get.mockReturnValue('tenant-specific-token')\n\n      const token = service.getToken()\n      expect(token).toBe('tenant-specific-token')\n    })\n  })\n\n  describe('Error handling', () => {\n    it('should handle cookie errors gracefully', () => {\n      mockCookies.get.mockImplementation(() => { throw new Error('Cookie error') })\n\n      expect(() => service.getToken()).toThrow('Cookie error')\n      expect(() => service.isAuthenticated()).toThrow('Cookie error')\n    })\n\n    it('should still logout even if cookie removal fails', () => {\n      mockCookies.remove.mockImplementation(() => { throw new Error('Remove failed') })\n\n      expect(() => service.logout()).not.toThrow()\n      expect(mockLocation.href).toBe('/login')\n    })\n  })\n\n  // Enhanced Authentication Tests\n  describe('Enhanced Authentication Features', () => {\n    describe('refreshToken', () => {\n      it('should refresh token successfully', async () => {\n        const mockRefreshToken = 'mock_refresh_token'\n        mockCookies.get.mockImplementation((key) => {\n          if (key === 'refresh_token') return mockRefreshToken\n          return undefined\n        })\n\n        const mockResponse = {\n          access_token: 'new_access_token',\n          refresh_token: 'new_refresh_token',\n          token_type: 'bearer',\n          expires_in: 3600,\n          user: {\n            id: 'user123',\n            email: 'test@example.com',\n            role: 'admin',\n            organisation_id: 'org456'\n          },\n          tenant: {\n            id: 'org456',\n            name: 'Test Organization',\n            industry: 'Technology',\n            subscription_plan: 'basic'\n          },\n          permissions: ['read:users']\n        }\n\n        mockApiService.post.mockResolvedValue(mockResponse)\n\n        const result = await service.refreshToken()\n\n        expect(mockApiService.post).toHaveBeenCalledWith('/auth/refresh', {\n          refresh_token: mockRefreshToken\n        })\n        expect(result).toEqual(mockResponse)\n      })\n\n      it('should handle missing refresh token', async () => {\n        mockCookies.get.mockReturnValue(undefined)\n\n        await expect(service.refreshToken()).rejects.toThrow('No refresh token available')\n      })\n    })\n\n    describe('permission management', () => {\n      beforeEach(() => {\n        const permissions = ['read:users', 'write:users', 'read:organizations']\n        mockLocalStorage.setItem('user_permissions', JSON.stringify(permissions))\n      })\n\n      it('should check single permission correctly', () => {\n        expect(service.hasPermission('read:users')).toBe(true)\n        expect(service.hasPermission('delete:users')).toBe(false)\n      })\n\n      it('should check multiple permissions correctly', () => {\n        expect(service.hasAnyPermission(['read:users', 'admin:all'])).toBe(true)\n        expect(service.hasAnyPermission(['delete:users', 'admin:all'])).toBe(false)\n      })\n\n      it('should handle missing permissions gracefully', () => {\n        mockLocalStorage.removeItem('user_permissions')\n        \n        expect(service.hasPermission('read:users')).toBe(false)\n        expect(service.hasAnyPermission(['read:users'])).toBe(false)\n      })\n    })\n\n    describe('tenant information', () => {\n      it('should return tenant info when available', () => {\n        const tenantInfo = {\n          id: 'org456',\n          name: 'Test Organization',\n          industry: 'Technology',\n          subscription_plan: 'basic'\n        }\n\n        mockLocalStorage.setItem('tenant_info', JSON.stringify(tenantInfo))\n\n        const result = service.getTenantInfo()\n\n        expect(result).toEqual(tenantInfo)\n      })\n\n      it('should return null when no tenant info exists', () => {\n        const result = service.getTenantInfo()\n\n        expect(result).toBeNull()\n      })\n\n      it('should handle corrupted tenant data gracefully', () => {\n        mockLocalStorage.setItem('tenant_info', 'invalid json')\n\n        const result = service.getTenantInfo()\n\n        expect(result).toBeNull()\n      })\n    })\n\n    describe('token refresh logic', () => {\n      it('should determine when token needs refresh', () => {\n        // Set token expiry to 2 minutes from now\n        const expiryTime = new Date(Date.now() + 2 * 60 * 1000)\n        mockLocalStorage.setItem('token_expires_at', expiryTime.toISOString())\n\n        // Should need refresh (within 5 minute threshold)\n        expect(service.shouldRefreshToken()).toBe(true)\n      })\n\n      it('should not refresh when token has plenty of time left', () => {\n        // Set token expiry to 10 minutes from now\n        const expiryTime = new Date(Date.now() + 10 * 60 * 1000)\n        mockLocalStorage.setItem('token_expires_at', expiryTime.toISOString())\n\n        // Should not need refresh\n        expect(service.shouldRefreshToken()).toBe(false)\n      })\n\n      it('should handle missing expiry time', () => {\n        mockLocalStorage.removeItem('token_expires_at')\n        \n        expect(service.shouldRefreshToken()).toBe(false)\n      })\n    })\n\n    describe('ensureValidToken', () => {\n      it('should return token if valid and not expiring soon', async () => {\n        const mockToken = 'valid_token'\n        mockCookies.get.mockReturnValue(mockToken)\n        \n        // Set expiry far in future\n        const expiryTime = new Date(Date.now() + 30 * 60 * 1000)\n        mockLocalStorage.setItem('token_expires_at', expiryTime.toISOString())\n\n        const result = await service.ensureValidToken()\n\n        expect(result).toBe(mockToken)\n      })\n\n      it('should refresh token if expiring soon', async () => {\n        const oldToken = 'old_token'\n        const newToken = 'new_token'\n        \n        mockCookies.get\n          .mockReturnValueOnce(oldToken) // First call returns old token\n          .mockReturnValue(newToken) // Subsequent calls return new token\n\n        // Set expiry to 2 minutes from now (within refresh threshold)\n        const expiryTime = new Date(Date.now() + 2 * 60 * 1000)\n        mockLocalStorage.setItem('token_expires_at', expiryTime.toISOString())\n\n        const mockRefreshResponse = {\n          access_token: newToken,\n          refresh_token: 'new_refresh',\n          expires_in: 3600,\n          user: { id: 'user123' },\n          tenant: { id: 'org456' },\n          permissions: []\n        }\n\n        mockApiService.post.mockResolvedValue(mockRefreshResponse)\n\n        const result = await service.ensureValidToken()\n\n        expect(mockApiService.post).toHaveBeenCalledWith('/auth/refresh', expect.any(Object))\n        expect(result).toBe(newToken)\n      })\n    })\n\n    describe('enhanced logout', () => {\n      it('should logout with server-side token revocation', async () => {\n        const mockRefreshToken = 'refresh_token'\n        mockCookies.get.mockReturnValue(mockRefreshToken)\n        mockApiService.post.mockResolvedValue({ message: 'Logout successful' })\n\n        await service.logout(false)\n\n        expect(mockApiService.post).toHaveBeenCalledWith('/auth/logout', {\n          refresh_token: mockRefreshToken,\n          all_devices: false\n        })\n\n        // Check that data was cleared\n        expect(mockCookies.remove).toHaveBeenCalledWith('access_token')\n        expect(mockCookies.remove).toHaveBeenCalledWith('refresh_token')\n        expect(mockLocalStorage.removeItem).toHaveBeenCalledWith('current_user')\n        expect(mockLocalStorage.removeItem).toHaveBeenCalledWith('tenant_info')\n        expect(mockLocalStorage.removeItem).toHaveBeenCalledWith('user_permissions')\n        expect(mockLocation.href).toBe('/login')\n      })\n    })\n\n    describe('session management', () => {\n      it('should check session successfully', async () => {\n        const mockResponse = {\n          authenticated: true,\n          user_id: 'user123',\n          tenant_id: 'org456',\n          role: 'admin',\n          active: true\n        }\n\n        mockApiService.get.mockResolvedValue(mockResponse)\n\n        const result = await service.checkSession()\n\n        expect(mockApiService.get).toHaveBeenCalledWith('/auth/session/check')\n        expect(result).toEqual(mockResponse)\n      })\n\n      it('should extend session when needed', async () => {\n        const mockResponse = {\n          extend_recommended: true,\n          message: 'Token should be refreshed',\n          expires_soon: true\n        }\n\n        mockApiService.post.mockResolvedValue(mockResponse)\n\n        const result = await service.extendSession()\n\n        expect(mockApiService.post).toHaveBeenCalledWith('/auth/session/extend')\n        expect(result).toEqual(mockResponse)\n      })\n    })\n\n    describe('enhanced authentication state', () => {\n      it('should return true for authenticated when token and user exist', () => {\n        mockCookies.get.mockReturnValue('access_token')\n        mockLocalStorage.setItem('current_user', JSON.stringify({ id: 'user123' }))\n\n        expect(service.isAuthenticated()).toBe(true)\n      })\n\n      it('should return false when no token exists', () => {\n        mockCookies.get.mockReturnValue(undefined)\n        mockLocalStorage.setItem('current_user', JSON.stringify({ id: 'user123' }))\n\n        expect(service.isAuthenticated()).toBe(false)\n      })\n\n      it('should return false when no user data exists', () => {\n        mockCookies.get.mockReturnValue('access_token')\n        mockLocalStorage.removeItem('current_user')\n\n        expect(service.isAuthenticated()).toBe(false)\n      })\n    })\n  })\n})\n\ndescribe('Singleton authService', () => {\n  it('should export singleton instance', () => {\n    expect(authService).toBeInstanceOf(AuthService)\n  })\n\n  it('should maintain same instance', () => {\n    expect(authService).toBe(authService)\n  })\n})"],"names":["jest","mock","mockCookies","mockApiService","apiService","set","fn","get","remove","mockLocalStorage","store","getItem","key","setItem","value","removeItem","clear","Object","defineProperty","window","mockLocation","href","writable","describe","service","beforeEach","AuthService","clearAllMocks","mockReturnValue","undefined","validLoginRequest","code","redirect_uri","it","result","login","expect","toHaveBeenCalledWith","expires","access_token","toBe","invalidRequest","rejects","toThrow","mockImplementation","name","user","getCurrentUser","id","email","redirectUri","getAuth0Url","auth_url","toContain","encodeURIComponent","specialUri","logout","token","getToken","toBeUndefined","isAuthenticated","hotelLogin","organisation_id","Error","not","mockRefreshToken","mockResponse","refresh_token","token_type","expires_in","role","tenant","industry","subscription_plan","permissions","post","mockResolvedValue","refreshToken","toEqual","JSON","stringify","hasPermission","hasAnyPermission","tenantInfo","getTenantInfo","toBeNull","expiryTime","Date","now","toISOString","shouldRefreshToken","mockToken","ensureValidToken","oldToken","newToken","mockReturnValueOnce","mockRefreshResponse","any","message","all_devices","authenticated","user_id","tenant_id","active","checkSession","extend_recommended","expires_soon","extendSession","authService","toBeInstanceOf"],"mappings":"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"}