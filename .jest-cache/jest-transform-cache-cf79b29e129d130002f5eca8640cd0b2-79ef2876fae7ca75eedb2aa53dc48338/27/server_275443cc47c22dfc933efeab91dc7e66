28c242137c833ebce6d967d5de59345e
/**
 * Mock Service Worker (MSW) Server Setup
 * 
 * Provides API mocking for testing multi-tenant scenarios.
 * Handles authentication, tenant-specific data, and rate limiting responses.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    mockApiEndpoint: function() {
        return mockApiEndpoint;
    },
    mockIndustryData: function() {
        return mockIndustryData;
    },
    server: function() {
        return server;
    }
});
const _node = require("msw/node");
const _msw = require("msw");
const _index = require("../index");
// Base API URL for mocking
const API_BASE_URL = "http://localhost:8000/api/v1";
// Mock handlers for different API endpoints
const handlers = [
    // Authentication endpoints
    _msw.http.post(`${API_BASE_URL}/auth/login`, async ({ request })=>{
        const body = await request.json();
        const { code, redirect_uri } = body;
        // Mock successful login for specific test code
        if (code === "valid-auth-code" || code === "test-auth-code") {
            return _msw.HttpResponse.json({
                access_token: "mock-jwt-token",
                refresh_token: "mock-refresh-token",
                token_type: "bearer",
                user: {
                    id: "test-user-456",
                    email: "test@example.com",
                    first_name: "Test",
                    last_name: "User",
                    role: "analyst",
                    organisation_id: "test-tenant-123",
                    is_active: true
                }
            }, {
                status: 200
            });
        }
        return _msw.HttpResponse.json({
            detail: "Invalid authorization code"
        }, {
            status: 401
        });
    }),
    // Auth0 URL endpoint
    _msw.http.get(`${API_BASE_URL}/auth/auth0-url`, ({ request })=>{
        const url = new URL(request.url);
        const redirectUri = url.searchParams.get("redirect_uri");
        return _msw.HttpResponse.json({
            auth_url: `https://dev-platform.auth0.com/authorize?response_type=code&client_id=test&redirect_uri=${encodeURIComponent(redirectUri || "http://localhost:3000/callback")}&scope=openid%20profile%20email`
        });
    }),
    // User profile endpoint (Auth0 style)
    _msw.http.get(`${API_BASE_URL}/auth/me`, ({ request })=>{
        const authHeader = request.headers.get("authorization");
        if (!authHeader || !authHeader.startsWith("Bearer ")) {
            return _msw.HttpResponse.json({
                detail: "Not authenticated"
            }, {
                status: 401
            });
        }
        return _msw.HttpResponse.json({
            id: "test-user-456",
            email: "test@example.com",
            first_name: "Test",
            last_name: "User",
            role: "analyst",
            organisation_id: "test-tenant-123",
            is_active: true
        });
    }),
    _msw.http.post(`${API_BASE_URL}/auth/refresh`, ()=>{
        return _msw.HttpResponse.json({
            access_token: "new-mock-jwt-token",
            token_type: "bearer",
            expires_in: 3600
        }, {
            status: 200
        });
    }),
    _msw.http.post(`${API_BASE_URL}/auth/logout`, ()=>{
        return _msw.HttpResponse.json({
            message: "Logged out successfully"
        }, {
            status: 200
        });
    }),
    // User profile endpoints
    _msw.http.get(`${API_BASE_URL}/users/me`, ({ request })=>{
        const authHeader = request.headers.get("authorization");
        if (!authHeader || !authHeader.startsWith("Bearer ")) {
            return _msw.HttpResponse.json({
                detail: "Not authenticated"
            }, {
                status: 401
            });
        }
        return _msw.HttpResponse.json({
            id: "test-user-456",
            email: "test@example.com",
            name: "Test User",
            role: "user",
            organization_id: "test-tenant-123",
            permissions: [
                "read:data",
                "write:data"
            ],
            is_active: true,
            created_at: "2024-01-01T00:00:00Z",
            updated_at: "2024-01-01T00:00:00Z"
        });
    }),
    // Organization endpoints
    _msw.http.get(`${API_BASE_URL}/organizations/me`, ()=>{
        return _msw.HttpResponse.json({
            id: "test-tenant-123",
            name: "Test Organization",
            industry: "b2b",
            subscription: "premium",
            features: [
                "market-edge",
                "analytics",
                "reporting"
            ],
            limits: {
                users: 100,
                api_calls: 10000,
                storage: 1000
            },
            settings: {
                timezone: "UTC",
                currency: "USD",
                date_format: "YYYY-MM-DD"
            }
        });
    }),
    // Market Edge API endpoints
    _msw.http.get(`${API_BASE_URL}/market-edge/markets`, ({ request })=>{
        const url = new URL(request.url);
        const industry = url.searchParams.get("industry") || "b2b";
        return _msw.HttpResponse.json({
            data: [
                {
                    id: "market-1",
                    name: `${industry} Market 1`,
                    industry,
                    size: "large",
                    growth_rate: 12.5
                }
            ],
            meta: {
                total: 1,
                page: 1,
                per_page: 10,
                industry
            }
        });
    }),
    _msw.http.get(`${API_BASE_URL}/market-edge/competitors`, ({ request })=>{
        const url = new URL(request.url);
        const industry = url.searchParams.get("industry") || "b2b";
        // Simulate different data based on industry
        let mockData;
        switch(industry){
            case "cinema":
                mockData = (0, _index.generateMockApiResponse)("cinema", "venue", 3);
                break;
            case "hotel":
                mockData = (0, _index.generateMockApiResponse)("hotel", "property", 3);
                break;
            case "gym":
                mockData = (0, _index.generateMockApiResponse)("gym", "facility", 3);
                break;
            case "retail":
                mockData = (0, _index.generateMockApiResponse)("retail", "store", 3);
                break;
            default:
                mockData = (0, _index.generateMockApiResponse)("b2b", "client", 3);
        }
        return _msw.HttpResponse.json({
            data: mockData,
            meta: {
                total: mockData.length,
                page: 1,
                per_page: 10,
                industry
            }
        });
    }),
    _msw.http.get(`${API_BASE_URL}/market-edge/analytics`, ({ request })=>{
        const url = new URL(request.url);
        const timeframe = url.searchParams.get("timeframe") || "7d";
        return _msw.HttpResponse.json({
            metrics: {
                revenue: 125000,
                growth: 12.5,
                market_share: 15.2,
                competitor_count: 8
            },
            trends: {
                daily_revenue: [
                    {
                        date: "2024-01-08",
                        value: 18000
                    },
                    {
                        date: "2024-01-09",
                        value: 19200
                    },
                    {
                        date: "2024-01-10",
                        value: 17800
                    },
                    {
                        date: "2024-01-11",
                        value: 20100
                    },
                    {
                        date: "2024-01-12",
                        value: 21500
                    },
                    {
                        date: "2024-01-13",
                        value: 19800
                    },
                    {
                        date: "2024-01-14",
                        value: 22000
                    }
                ]
            },
            timeframe
        });
    }),
    // Feature flags endpoints
    _msw.http.get(`${API_BASE_URL}/features`, ()=>{
        return _msw.HttpResponse.json({
            flags: {
                "market-edge": {
                    enabled: true,
                    rollout: 100
                },
                "advanced-analytics": {
                    enabled: true,
                    rollout: 75
                },
                "real-time-data": {
                    enabled: false,
                    rollout: 25
                },
                "mobile-app": {
                    enabled: true,
                    rollout: 100
                }
            }
        });
    }),
    // Admin endpoints (require admin role)
    _msw.http.get(`${API_BASE_URL}/admin/users`, ({ request })=>{
        const authHeader = request.headers.get("authorization");
        // Simulate role-based access control
        if (!authHeader || authHeader === "Bearer non-admin-token") {
            return _msw.HttpResponse.json({
                detail: "Insufficient permissions"
            }, {
                status: 403
            });
        }
        return _msw.HttpResponse.json({
            users: [
                {
                    id: "user-1",
                    email: "admin@example.com",
                    name: "Admin User",
                    role: "admin",
                    is_active: true
                },
                {
                    id: "user-2",
                    email: "manager@example.com",
                    name: "Manager User",
                    role: "manager",
                    is_active: true
                },
                {
                    id: "user-3",
                    email: "user@example.com",
                    name: "Regular User",
                    role: "user",
                    is_active: true
                }
            ],
            meta: {
                total: 3,
                page: 1,
                per_page: 10
            }
        });
    }),
    // Rate limiting simulation
    _msw.http.get(`${API_BASE_URL}/test/rate-limit`, ()=>{
        // Simulate rate limit headers
        return _msw.HttpResponse.json({
            message: "Rate limit test successful"
        }, {
            headers: {
                "X-RateLimit-Limit": "100",
                "X-RateLimit-Remaining": "95",
                "X-RateLimit-Reset": String(Date.now() + 3600000)
            }
        });
    }),
    _msw.http.get(`${API_BASE_URL}/test/rate-limit-exceeded`, ()=>{
        return _msw.HttpResponse.json({
            error: "Rate limit exceeded",
            message: "Too many requests. Limit: 100 per window",
            retry_after: 60
        }, {
            status: 429,
            headers: {
                "X-RateLimit-Limit": "100",
                "X-RateLimit-Remaining": "0",
                "X-RateLimit-Reset": String(Date.now() + 3600000),
                "Retry-After": "60"
            }
        });
    }),
    // Error simulation endpoints for testing error handling
    _msw.http.get(`${API_BASE_URL}/test/server-error`, ()=>{
        return _msw.HttpResponse.json({
            detail: "Internal server error"
        }, {
            status: 500
        });
    }),
    _msw.http.get(`${API_BASE_URL}/test/network-error`, ()=>{
        return _msw.HttpResponse.error();
    }),
    _msw.http.get(`${API_BASE_URL}/test/timeout`, async ()=>{
        // Simulate a slow response
        await new Promise((resolve)=>setTimeout(resolve, 10000)) // 10 second delay
        ;
        return _msw.HttpResponse.json({
            message: "Slow response"
        });
    }),
    // Fallback handler for unmatched requests
    _msw.http.get("*", ({ request })=>{
        console.warn(`Unhandled GET request to ${request.url}`);
        return _msw.HttpResponse.json({
            detail: `Endpoint not found: ${new URL(request.url).pathname}`
        }, {
            status: 404
        });
    }),
    _msw.http.post("*", ({ request })=>{
        console.warn(`Unhandled POST request to ${request.url}`);
        return _msw.HttpResponse.json({
            detail: `Endpoint not found: ${new URL(request.url).pathname}`
        }, {
            status: 404
        });
    })
];
const server = (0, _node.setupServer)(...handlers);
const mockApiEndpoint = {
    // Mock successful responses
    success: (endpoint, data, status = 200)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json(data, {
                status
            });
        }));
    },
    // Mock error responses
    error: (endpoint, status = 500, message = "Server error")=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json({
                detail: message
            }, {
                status
            });
        }));
    },
    // Mock rate limit responses
    rateLimited: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json({
                error: "Rate limit exceeded",
                message: "Too many requests",
                retry_after: 60
            }, {
                status: 429,
                headers: {
                    "X-RateLimit-Limit": "100",
                    "X-RateLimit-Remaining": "0",
                    "Retry-After": "60"
                }
            });
        }));
    },
    // Mock network errors
    networkError: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.error();
        }));
    },
    // Mock slow responses
    slow: (endpoint, delay = 5000)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, async ()=>{
            await new Promise((resolve)=>setTimeout(resolve, delay));
            return _msw.HttpResponse.json({
                message: "Delayed response"
            });
        }));
    }
};
const mockIndustryData = {
    cinema: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json({
                venues: (0, _index.generateMockApiResponse)("cinema", "venue", 5),
                movies: (0, _index.generateMockApiResponse)("cinema", "movie", 10),
                bookings: (0, _index.generateMockApiResponse)("cinema", "booking", 20)
            });
        }));
    },
    hotel: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json({
                properties: (0, _index.generateMockApiResponse)("hotel", "property", 3),
                rooms: (0, _index.generateMockApiResponse)("hotel", "room", 50),
                reservations: (0, _index.generateMockApiResponse)("hotel", "reservation", 30)
            });
        }));
    },
    gym: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json({
                facilities: (0, _index.generateMockApiResponse)("gym", "facility", 2),
                members: (0, _index.generateMockApiResponse)("gym", "member", 100),
                checkins: (0, _index.generateMockApiResponse)("gym", "checkin", 200)
            });
        }));
    },
    retail: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json({
                stores: (0, _index.generateMockApiResponse)("retail", "store", 5),
                products: (0, _index.generateMockApiResponse)("retail", "product", 500),
                sales: (0, _index.generateMockApiResponse)("retail", "sale", 1000)
            });
        }));
    },
    b2b: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json({
                clients: (0, _index.generateMockApiResponse)("b2b", "client", 25),
                projects: (0, _index.generateMockApiResponse)("b2b", "project", 50),
                reports: (0, _index.generateMockApiResponse)("b2b", "report", 100)
            });
        }));
    }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0L1NpdGVzL01hcmtldEVkZ2UvcGxhdGZvcm0td3JhcHBlci9mcm9udGVuZC9zcmMvdGVzdC11dGlscy9tb2Nrcy9zZXJ2ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBNb2NrIFNlcnZpY2UgV29ya2VyIChNU1cpIFNlcnZlciBTZXR1cFxuICogXG4gKiBQcm92aWRlcyBBUEkgbW9ja2luZyBmb3IgdGVzdGluZyBtdWx0aS10ZW5hbnQgc2NlbmFyaW9zLlxuICogSGFuZGxlcyBhdXRoZW50aWNhdGlvbiwgdGVuYW50LXNwZWNpZmljIGRhdGEsIGFuZCByYXRlIGxpbWl0aW5nIHJlc3BvbnNlcy5cbiAqL1xuXG5pbXBvcnQgeyBzZXR1cFNlcnZlciB9IGZyb20gJ21zdy9ub2RlJ1xuaW1wb3J0IHsgaHR0cCwgSHR0cFJlc3BvbnNlIH0gZnJvbSAnbXN3J1xuaW1wb3J0IHsgZ2VuZXJhdGVNb2NrQXBpUmVzcG9uc2UsIG1vY2tEYXRhR2VuZXJhdG9ycyB9IGZyb20gJy4uL2luZGV4J1xuXG4vLyBCYXNlIEFQSSBVUkwgZm9yIG1vY2tpbmdcbmNvbnN0IEFQSV9CQVNFX1VSTCA9ICdodHRwOi8vbG9jYWxob3N0OjgwMDAvYXBpL3YxJ1xuXG4vLyBNb2NrIGhhbmRsZXJzIGZvciBkaWZmZXJlbnQgQVBJIGVuZHBvaW50c1xuY29uc3QgaGFuZGxlcnMgPSBbXG4gIC8vIEF1dGhlbnRpY2F0aW9uIGVuZHBvaW50c1xuICBodHRwLnBvc3QoYCR7QVBJX0JBU0VfVVJMfS9hdXRoL2xvZ2luYCwgYXN5bmMgKHsgcmVxdWVzdCB9KSA9PiB7XG4gICAgY29uc3QgYm9keSA9IGF3YWl0IHJlcXVlc3QuanNvbigpXG4gICAgY29uc3QgeyBjb2RlLCByZWRpcmVjdF91cmkgfSA9IGJvZHkgYXMgYW55XG4gICAgXG4gICAgLy8gTW9jayBzdWNjZXNzZnVsIGxvZ2luIGZvciBzcGVjaWZpYyB0ZXN0IGNvZGVcbiAgICBpZiAoY29kZSA9PT0gJ3ZhbGlkLWF1dGgtY29kZScgfHwgY29kZSA9PT0gJ3Rlc3QtYXV0aC1jb2RlJykge1xuICAgICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHtcbiAgICAgICAgYWNjZXNzX3Rva2VuOiAnbW9jay1qd3QtdG9rZW4nLFxuICAgICAgICByZWZyZXNoX3Rva2VuOiAnbW9jay1yZWZyZXNoLXRva2VuJyxcbiAgICAgICAgdG9rZW5fdHlwZTogJ2JlYXJlcicsXG4gICAgICAgIHVzZXI6IHtcbiAgICAgICAgICBpZDogJ3Rlc3QtdXNlci00NTYnLFxuICAgICAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICAgICAgZmlyc3RfbmFtZTogJ1Rlc3QnLFxuICAgICAgICAgIGxhc3RfbmFtZTogJ1VzZXInLFxuICAgICAgICAgIHJvbGU6ICdhbmFseXN0JyxcbiAgICAgICAgICBvcmdhbmlzYXRpb25faWQ6ICd0ZXN0LXRlbmFudC0xMjMnLFxuICAgICAgICAgIGlzX2FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0sIHsgc3RhdHVzOiAyMDAgfSlcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKFxuICAgICAgeyBkZXRhaWw6ICdJbnZhbGlkIGF1dGhvcml6YXRpb24gY29kZScgfSxcbiAgICAgIHsgc3RhdHVzOiA0MDEgfVxuICAgIClcbiAgfSksXG5cbiAgLy8gQXV0aDAgVVJMIGVuZHBvaW50XG4gIGh0dHAuZ2V0KGAke0FQSV9CQVNFX1VSTH0vYXV0aC9hdXRoMC11cmxgLCAoeyByZXF1ZXN0IH0pID0+IHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKVxuICAgIGNvbnN0IHJlZGlyZWN0VXJpID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ3JlZGlyZWN0X3VyaScpXG4gICAgXG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHtcbiAgICAgIGF1dGhfdXJsOiBgaHR0cHM6Ly9kZXYtcGxhdGZvcm0uYXV0aDAuY29tL2F1dGhvcml6ZT9yZXNwb25zZV90eXBlPWNvZGUmY2xpZW50X2lkPXRlc3QmcmVkaXJlY3RfdXJpPSR7ZW5jb2RlVVJJQ29tcG9uZW50KHJlZGlyZWN0VXJpIHx8ICdodHRwOi8vbG9jYWxob3N0OjMwMDAvY2FsbGJhY2snKX0mc2NvcGU9b3BlbmlkJTIwcHJvZmlsZSUyMGVtYWlsYFxuICAgIH0pXG4gIH0pLFxuXG4gIC8vIFVzZXIgcHJvZmlsZSBlbmRwb2ludCAoQXV0aDAgc3R5bGUpXG4gIGh0dHAuZ2V0KGAke0FQSV9CQVNFX1VSTH0vYXV0aC9tZWAsICh7IHJlcXVlc3QgfSkgPT4ge1xuICAgIGNvbnN0IGF1dGhIZWFkZXIgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KCdhdXRob3JpemF0aW9uJylcbiAgICBcbiAgICBpZiAoIWF1dGhIZWFkZXIgfHwgIWF1dGhIZWFkZXIuc3RhcnRzV2l0aCgnQmVhcmVyICcpKSB7XG4gICAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oeyBkZXRhaWw6ICdOb3QgYXV0aGVudGljYXRlZCcgfSwgeyBzdGF0dXM6IDQwMSB9KVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oe1xuICAgICAgaWQ6ICd0ZXN0LXVzZXItNDU2JyxcbiAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICBmaXJzdF9uYW1lOiAnVGVzdCcsXG4gICAgICBsYXN0X25hbWU6ICdVc2VyJyxcbiAgICAgIHJvbGU6ICdhbmFseXN0JyxcbiAgICAgIG9yZ2FuaXNhdGlvbl9pZDogJ3Rlc3QtdGVuYW50LTEyMycsXG4gICAgICBpc19hY3RpdmU6IHRydWUsXG4gICAgfSlcbiAgfSksXG5cbiAgaHR0cC5wb3N0KGAke0FQSV9CQVNFX1VSTH0vYXV0aC9yZWZyZXNoYCwgKCkgPT4ge1xuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7XG4gICAgICBhY2Nlc3NfdG9rZW46ICduZXctbW9jay1qd3QtdG9rZW4nLFxuICAgICAgdG9rZW5fdHlwZTogJ2JlYXJlcicsXG4gICAgICBleHBpcmVzX2luOiAzNjAwLFxuICAgIH0sIHsgc3RhdHVzOiAyMDAgfSlcbiAgfSksXG5cbiAgaHR0cC5wb3N0KGAke0FQSV9CQVNFX1VSTH0vYXV0aC9sb2dvdXRgLCAoKSA9PiB7XG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKFxuICAgICAgeyBtZXNzYWdlOiAnTG9nZ2VkIG91dCBzdWNjZXNzZnVsbHknIH0sXG4gICAgICB7IHN0YXR1czogMjAwIH1cbiAgICApXG4gIH0pLFxuXG4gIC8vIFVzZXIgcHJvZmlsZSBlbmRwb2ludHNcbiAgaHR0cC5nZXQoYCR7QVBJX0JBU0VfVVJMfS91c2Vycy9tZWAsICh7IHJlcXVlc3QgfSkgPT4ge1xuICAgIGNvbnN0IGF1dGhIZWFkZXIgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KCdhdXRob3JpemF0aW9uJylcbiAgICBcbiAgICBpZiAoIWF1dGhIZWFkZXIgfHwgIWF1dGhIZWFkZXIuc3RhcnRzV2l0aCgnQmVhcmVyICcpKSB7XG4gICAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oeyBkZXRhaWw6ICdOb3QgYXV0aGVudGljYXRlZCcgfSwgeyBzdGF0dXM6IDQwMSB9KVxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oe1xuICAgICAgaWQ6ICd0ZXN0LXVzZXItNDU2JyxcbiAgICAgIGVtYWlsOiAndGVzdEBleGFtcGxlLmNvbScsXG4gICAgICBuYW1lOiAnVGVzdCBVc2VyJyxcbiAgICAgIHJvbGU6ICd1c2VyJyxcbiAgICAgIG9yZ2FuaXphdGlvbl9pZDogJ3Rlc3QtdGVuYW50LTEyMycsXG4gICAgICBwZXJtaXNzaW9uczogWydyZWFkOmRhdGEnLCAnd3JpdGU6ZGF0YSddLFxuICAgICAgaXNfYWN0aXZlOiB0cnVlLFxuICAgICAgY3JlYXRlZF9hdDogJzIwMjQtMDEtMDFUMDA6MDA6MDBaJyxcbiAgICAgIHVwZGF0ZWRfYXQ6ICcyMDI0LTAxLTAxVDAwOjAwOjAwWicsXG4gICAgfSlcbiAgfSksXG5cbiAgLy8gT3JnYW5pemF0aW9uIGVuZHBvaW50c1xuICBodHRwLmdldChgJHtBUElfQkFTRV9VUkx9L29yZ2FuaXphdGlvbnMvbWVgLCAoKSA9PiB7XG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHtcbiAgICAgIGlkOiAndGVzdC10ZW5hbnQtMTIzJyxcbiAgICAgIG5hbWU6ICdUZXN0IE9yZ2FuaXphdGlvbicsXG4gICAgICBpbmR1c3RyeTogJ2IyYicsXG4gICAgICBzdWJzY3JpcHRpb246ICdwcmVtaXVtJyxcbiAgICAgIGZlYXR1cmVzOiBbJ21hcmtldC1lZGdlJywgJ2FuYWx5dGljcycsICdyZXBvcnRpbmcnXSxcbiAgICAgIGxpbWl0czoge1xuICAgICAgICB1c2VyczogMTAwLFxuICAgICAgICBhcGlfY2FsbHM6IDEwMDAwLFxuICAgICAgICBzdG9yYWdlOiAxMDAwLFxuICAgICAgfSxcbiAgICAgIHNldHRpbmdzOiB7XG4gICAgICAgIHRpbWV6b25lOiAnVVRDJyxcbiAgICAgICAgY3VycmVuY3k6ICdVU0QnLFxuICAgICAgICBkYXRlX2Zvcm1hdDogJ1lZWVktTU0tREQnLFxuICAgICAgfSxcbiAgICB9KVxuICB9KSxcblxuICAvLyBNYXJrZXQgRWRnZSBBUEkgZW5kcG9pbnRzXG4gIGh0dHAuZ2V0KGAke0FQSV9CQVNFX1VSTH0vbWFya2V0LWVkZ2UvbWFya2V0c2AsICh7IHJlcXVlc3QgfSkgPT4ge1xuICAgIGNvbnN0IHVybCA9IG5ldyBVUkwocmVxdWVzdC51cmwpXG4gICAgY29uc3QgaW5kdXN0cnkgPSB1cmwuc2VhcmNoUGFyYW1zLmdldCgnaW5kdXN0cnknKSB8fCAnYjJiJ1xuICAgIFxuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7XG4gICAgICBkYXRhOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ21hcmtldC0xJyxcbiAgICAgICAgICBuYW1lOiBgJHtpbmR1c3RyeX0gTWFya2V0IDFgLFxuICAgICAgICAgIGluZHVzdHJ5LFxuICAgICAgICAgIHNpemU6ICdsYXJnZScsXG4gICAgICAgICAgZ3Jvd3RoX3JhdGU6IDEyLjUsXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBtZXRhOiB7XG4gICAgICAgIHRvdGFsOiAxLFxuICAgICAgICBwYWdlOiAxLFxuICAgICAgICBwZXJfcGFnZTogMTAsXG4gICAgICAgIGluZHVzdHJ5LFxuICAgICAgfSxcbiAgICB9KVxuICB9KSxcblxuICBodHRwLmdldChgJHtBUElfQkFTRV9VUkx9L21hcmtldC1lZGdlL2NvbXBldGl0b3JzYCwgKHsgcmVxdWVzdCB9KSA9PiB7XG4gICAgY29uc3QgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybClcbiAgICBjb25zdCBpbmR1c3RyeSA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCdpbmR1c3RyeScpIHx8ICdiMmInXG4gICAgXG4gICAgLy8gU2ltdWxhdGUgZGlmZmVyZW50IGRhdGEgYmFzZWQgb24gaW5kdXN0cnlcbiAgICBsZXQgbW9ja0RhdGFcbiAgICBzd2l0Y2ggKGluZHVzdHJ5KSB7XG4gICAgICBjYXNlICdjaW5lbWEnOlxuICAgICAgICBtb2NrRGF0YSA9IGdlbmVyYXRlTW9ja0FwaVJlc3BvbnNlKCdjaW5lbWEnLCAndmVudWUnLCAzKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAnaG90ZWwnOlxuICAgICAgICBtb2NrRGF0YSA9IGdlbmVyYXRlTW9ja0FwaVJlc3BvbnNlKCdob3RlbCcsICdwcm9wZXJ0eScsIDMpXG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdneW0nOlxuICAgICAgICBtb2NrRGF0YSA9IGdlbmVyYXRlTW9ja0FwaVJlc3BvbnNlKCdneW0nLCAnZmFjaWxpdHknLCAzKVxuICAgICAgICBicmVha1xuICAgICAgY2FzZSAncmV0YWlsJzpcbiAgICAgICAgbW9ja0RhdGEgPSBnZW5lcmF0ZU1vY2tBcGlSZXNwb25zZSgncmV0YWlsJywgJ3N0b3JlJywgMylcbiAgICAgICAgYnJlYWtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIG1vY2tEYXRhID0gZ2VuZXJhdGVNb2NrQXBpUmVzcG9uc2UoJ2IyYicsICdjbGllbnQnLCAzKVxuICAgIH1cblxuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7XG4gICAgICBkYXRhOiBtb2NrRGF0YSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgdG90YWw6IG1vY2tEYXRhLmxlbmd0aCxcbiAgICAgICAgcGFnZTogMSxcbiAgICAgICAgcGVyX3BhZ2U6IDEwLFxuICAgICAgICBpbmR1c3RyeSxcbiAgICAgIH0sXG4gICAgfSlcbiAgfSksXG5cbiAgaHR0cC5nZXQoYCR7QVBJX0JBU0VfVVJMfS9tYXJrZXQtZWRnZS9hbmFseXRpY3NgLCAoeyByZXF1ZXN0IH0pID0+IHtcbiAgICBjb25zdCB1cmwgPSBuZXcgVVJMKHJlcXVlc3QudXJsKVxuICAgIGNvbnN0IHRpbWVmcmFtZSA9IHVybC5zZWFyY2hQYXJhbXMuZ2V0KCd0aW1lZnJhbWUnKSB8fCAnN2QnXG4gICAgXG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHtcbiAgICAgIG1ldHJpY3M6IHtcbiAgICAgICAgcmV2ZW51ZTogMTI1MDAwLFxuICAgICAgICBncm93dGg6IDEyLjUsXG4gICAgICAgIG1hcmtldF9zaGFyZTogMTUuMixcbiAgICAgICAgY29tcGV0aXRvcl9jb3VudDogOCxcbiAgICAgIH0sXG4gICAgICB0cmVuZHM6IHtcbiAgICAgICAgZGFpbHlfcmV2ZW51ZTogW1xuICAgICAgICAgIHsgZGF0ZTogJzIwMjQtMDEtMDgnLCB2YWx1ZTogMTgwMDAgfSxcbiAgICAgICAgICB7IGRhdGU6ICcyMDI0LTAxLTA5JywgdmFsdWU6IDE5MjAwIH0sXG4gICAgICAgICAgeyBkYXRlOiAnMjAyNC0wMS0xMCcsIHZhbHVlOiAxNzgwMCB9LFxuICAgICAgICAgIHsgZGF0ZTogJzIwMjQtMDEtMTEnLCB2YWx1ZTogMjAxMDAgfSxcbiAgICAgICAgICB7IGRhdGU6ICcyMDI0LTAxLTEyJywgdmFsdWU6IDIxNTAwIH0sXG4gICAgICAgICAgeyBkYXRlOiAnMjAyNC0wMS0xMycsIHZhbHVlOiAxOTgwMCB9LFxuICAgICAgICAgIHsgZGF0ZTogJzIwMjQtMDEtMTQnLCB2YWx1ZTogMjIwMDAgfSxcbiAgICAgICAgXSxcbiAgICAgIH0sXG4gICAgICB0aW1lZnJhbWUsXG4gICAgfSlcbiAgfSksXG5cbiAgLy8gRmVhdHVyZSBmbGFncyBlbmRwb2ludHNcbiAgaHR0cC5nZXQoYCR7QVBJX0JBU0VfVVJMfS9mZWF0dXJlc2AsICgpID0+IHtcbiAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oe1xuICAgICAgZmxhZ3M6IHtcbiAgICAgICAgJ21hcmtldC1lZGdlJzogeyBlbmFibGVkOiB0cnVlLCByb2xsb3V0OiAxMDAgfSxcbiAgICAgICAgJ2FkdmFuY2VkLWFuYWx5dGljcyc6IHsgZW5hYmxlZDogdHJ1ZSwgcm9sbG91dDogNzUgfSxcbiAgICAgICAgJ3JlYWwtdGltZS1kYXRhJzogeyBlbmFibGVkOiBmYWxzZSwgcm9sbG91dDogMjUgfSxcbiAgICAgICAgJ21vYmlsZS1hcHAnOiB7IGVuYWJsZWQ6IHRydWUsIHJvbGxvdXQ6IDEwMCB9LFxuICAgICAgfSxcbiAgICB9KVxuICB9KSxcblxuICAvLyBBZG1pbiBlbmRwb2ludHMgKHJlcXVpcmUgYWRtaW4gcm9sZSlcbiAgaHR0cC5nZXQoYCR7QVBJX0JBU0VfVVJMfS9hZG1pbi91c2Vyc2AsICh7IHJlcXVlc3QgfSkgPT4ge1xuICAgIGNvbnN0IGF1dGhIZWFkZXIgPSByZXF1ZXN0LmhlYWRlcnMuZ2V0KCdhdXRob3JpemF0aW9uJylcbiAgICBcbiAgICAvLyBTaW11bGF0ZSByb2xlLWJhc2VkIGFjY2VzcyBjb250cm9sXG4gICAgaWYgKCFhdXRoSGVhZGVyIHx8IGF1dGhIZWFkZXIgPT09ICdCZWFyZXIgbm9uLWFkbWluLXRva2VuJykge1xuICAgICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHsgZGV0YWlsOiAnSW5zdWZmaWNpZW50IHBlcm1pc3Npb25zJyB9LCB7IHN0YXR1czogNDAzIH0pXG4gICAgfVxuICAgIFxuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7XG4gICAgICB1c2VyczogW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICd1c2VyLTEnLFxuICAgICAgICAgIGVtYWlsOiAnYWRtaW5AZXhhbXBsZS5jb20nLFxuICAgICAgICAgIG5hbWU6ICdBZG1pbiBVc2VyJyxcbiAgICAgICAgICByb2xlOiAnYWRtaW4nLFxuICAgICAgICAgIGlzX2FjdGl2ZTogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAndXNlci0yJyxcbiAgICAgICAgICBlbWFpbDogJ21hbmFnZXJAZXhhbXBsZS5jb20nLFxuICAgICAgICAgIG5hbWU6ICdNYW5hZ2VyIFVzZXInLFxuICAgICAgICAgIHJvbGU6ICdtYW5hZ2VyJyxcbiAgICAgICAgICBpc19hY3RpdmU6IHRydWUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ3VzZXItMycsXG4gICAgICAgICAgZW1haWw6ICd1c2VyQGV4YW1wbGUuY29tJyxcbiAgICAgICAgICBuYW1lOiAnUmVndWxhciBVc2VyJyxcbiAgICAgICAgICByb2xlOiAndXNlcicsXG4gICAgICAgICAgaXNfYWN0aXZlOiB0cnVlLFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIG1ldGE6IHsgdG90YWw6IDMsIHBhZ2U6IDEsIHBlcl9wYWdlOiAxMCB9LFxuICAgIH0pXG4gIH0pLFxuXG4gIC8vIFJhdGUgbGltaXRpbmcgc2ltdWxhdGlvblxuICBodHRwLmdldChgJHtBUElfQkFTRV9VUkx9L3Rlc3QvcmF0ZS1saW1pdGAsICgpID0+IHtcbiAgICAvLyBTaW11bGF0ZSByYXRlIGxpbWl0IGhlYWRlcnNcbiAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oXG4gICAgICB7IG1lc3NhZ2U6ICdSYXRlIGxpbWl0IHRlc3Qgc3VjY2Vzc2Z1bCcgfSxcbiAgICAgIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdYLVJhdGVMaW1pdC1MaW1pdCc6ICcxMDAnLFxuICAgICAgICAgICdYLVJhdGVMaW1pdC1SZW1haW5pbmcnOiAnOTUnLFxuICAgICAgICAgICdYLVJhdGVMaW1pdC1SZXNldCc6IFN0cmluZyhEYXRlLm5vdygpICsgMzYwMDAwMCksXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICApXG4gIH0pLFxuXG4gIGh0dHAuZ2V0KGAke0FQSV9CQVNFX1VSTH0vdGVzdC9yYXRlLWxpbWl0LWV4Y2VlZGVkYCwgKCkgPT4ge1xuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbihcbiAgICAgIHtcbiAgICAgICAgZXJyb3I6ICdSYXRlIGxpbWl0IGV4Y2VlZGVkJyxcbiAgICAgICAgbWVzc2FnZTogJ1RvbyBtYW55IHJlcXVlc3RzLiBMaW1pdDogMTAwIHBlciB3aW5kb3cnLFxuICAgICAgICByZXRyeV9hZnRlcjogNjAsXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzdGF0dXM6IDQyOSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdYLVJhdGVMaW1pdC1MaW1pdCc6ICcxMDAnLFxuICAgICAgICAgICdYLVJhdGVMaW1pdC1SZW1haW5pbmcnOiAnMCcsXG4gICAgICAgICAgJ1gtUmF0ZUxpbWl0LVJlc2V0JzogU3RyaW5nKERhdGUubm93KCkgKyAzNjAwMDAwKSxcbiAgICAgICAgICAnUmV0cnktQWZ0ZXInOiAnNjAnLFxuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICB9KSxcblxuICAvLyBFcnJvciBzaW11bGF0aW9uIGVuZHBvaW50cyBmb3IgdGVzdGluZyBlcnJvciBoYW5kbGluZ1xuICBodHRwLmdldChgJHtBUElfQkFTRV9VUkx9L3Rlc3Qvc2VydmVyLWVycm9yYCwgKCkgPT4ge1xuICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7IGRldGFpbDogJ0ludGVybmFsIHNlcnZlciBlcnJvcicgfSwgeyBzdGF0dXM6IDUwMCB9KVxuICB9KSxcblxuICBodHRwLmdldChgJHtBUElfQkFTRV9VUkx9L3Rlc3QvbmV0d29yay1lcnJvcmAsICgpID0+IHtcbiAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmVycm9yKClcbiAgfSksXG5cbiAgaHR0cC5nZXQoYCR7QVBJX0JBU0VfVVJMfS90ZXN0L3RpbWVvdXRgLCBhc3luYyAoKSA9PiB7XG4gICAgLy8gU2ltdWxhdGUgYSBzbG93IHJlc3BvbnNlXG4gICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDAwKSkgLy8gMTAgc2Vjb25kIGRlbGF5XG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHsgbWVzc2FnZTogJ1Nsb3cgcmVzcG9uc2UnIH0pXG4gIH0pLFxuXG4gIC8vIEZhbGxiYWNrIGhhbmRsZXIgZm9yIHVubWF0Y2hlZCByZXF1ZXN0c1xuICBodHRwLmdldCgnKicsICh7IHJlcXVlc3QgfSkgPT4ge1xuICAgIGNvbnNvbGUud2FybihgVW5oYW5kbGVkIEdFVCByZXF1ZXN0IHRvICR7cmVxdWVzdC51cmx9YClcbiAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGRldGFpbDogYEVuZHBvaW50IG5vdCBmb3VuZDogJHtuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZX1gIH0sXG4gICAgICB7IHN0YXR1czogNDA0IH1cbiAgICApXG4gIH0pLFxuXG4gIGh0dHAucG9zdCgnKicsICh7IHJlcXVlc3QgfSkgPT4ge1xuICAgIGNvbnNvbGUud2FybihgVW5oYW5kbGVkIFBPU1QgcmVxdWVzdCB0byAke3JlcXVlc3QudXJsfWApXG4gICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKFxuICAgICAgeyBkZXRhaWw6IGBFbmRwb2ludCBub3QgZm91bmQ6ICR7bmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWV9YCB9LFxuICAgICAgeyBzdGF0dXM6IDQwNCB9XG4gICAgKVxuICB9KSxcbl1cblxuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHNlcnZlclxuZXhwb3J0IGNvbnN0IHNlcnZlciA9IHNldHVwU2VydmVyKC4uLmhhbmRsZXJzKVxuXG4vLyBIZWxwZXIgZnVuY3Rpb25zIGZvciB0ZXN0LXNwZWNpZmljIG1vY2tpbmdcbmV4cG9ydCBjb25zdCBtb2NrQXBpRW5kcG9pbnQgPSB7XG4gIC8vIE1vY2sgc3VjY2Vzc2Z1bCByZXNwb25zZXNcbiAgc3VjY2VzczogKGVuZHBvaW50OiBzdHJpbmcsIGRhdGE6IGFueSwgc3RhdHVzID0gMjAwKSA9PiB7XG4gICAgc2VydmVyLnVzZShcbiAgICAgIGh0dHAuZ2V0KGAke0FQSV9CQVNFX1VSTH0ke2VuZHBvaW50fWAsICgpID0+IHtcbiAgICAgICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKGRhdGEsIHsgc3RhdHVzIH0pXG4gICAgICB9KVxuICAgIClcbiAgfSxcblxuICAvLyBNb2NrIGVycm9yIHJlc3BvbnNlc1xuICBlcnJvcjogKGVuZHBvaW50OiBzdHJpbmcsIHN0YXR1cyA9IDUwMCwgbWVzc2FnZSA9ICdTZXJ2ZXIgZXJyb3InKSA9PiB7XG4gICAgc2VydmVyLnVzZShcbiAgICAgIGh0dHAuZ2V0KGAke0FQSV9CQVNFX1VSTH0ke2VuZHBvaW50fWAsICgpID0+IHtcbiAgICAgICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHsgZGV0YWlsOiBtZXNzYWdlIH0sIHsgc3RhdHVzIH0pXG4gICAgICB9KVxuICAgIClcbiAgfSxcblxuICAvLyBNb2NrIHJhdGUgbGltaXQgcmVzcG9uc2VzXG4gIHJhdGVMaW1pdGVkOiAoZW5kcG9pbnQ6IHN0cmluZykgPT4ge1xuICAgIHNlcnZlci51c2UoXG4gICAgICBodHRwLmdldChgJHtBUElfQkFTRV9VUkx9JHtlbmRwb2ludH1gLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbihcbiAgICAgICAgICB7XG4gICAgICAgICAgICBlcnJvcjogJ1JhdGUgbGltaXQgZXhjZWVkZWQnLFxuICAgICAgICAgICAgbWVzc2FnZTogJ1RvbyBtYW55IHJlcXVlc3RzJyxcbiAgICAgICAgICAgIHJldHJ5X2FmdGVyOiA2MCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHN0YXR1czogNDI5LFxuICAgICAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICAgICAnWC1SYXRlTGltaXQtTGltaXQnOiAnMTAwJyxcbiAgICAgICAgICAgICAgJ1gtUmF0ZUxpbWl0LVJlbWFpbmluZyc6ICcwJyxcbiAgICAgICAgICAgICAgJ1JldHJ5LUFmdGVyJzogJzYwJyxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgIH0pXG4gICAgKVxuICB9LFxuXG4gIC8vIE1vY2sgbmV0d29yayBlcnJvcnNcbiAgbmV0d29ya0Vycm9yOiAoZW5kcG9pbnQ6IHN0cmluZykgPT4ge1xuICAgIHNlcnZlci51c2UoXG4gICAgICBodHRwLmdldChgJHtBUElfQkFTRV9VUkx9JHtlbmRwb2ludH1gLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBIdHRwUmVzcG9uc2UuZXJyb3IoKVxuICAgICAgfSlcbiAgICApXG4gIH0sXG5cbiAgLy8gTW9jayBzbG93IHJlc3BvbnNlc1xuICBzbG93OiAoZW5kcG9pbnQ6IHN0cmluZywgZGVsYXkgPSA1MDAwKSA9PiB7XG4gICAgc2VydmVyLnVzZShcbiAgICAgIGh0dHAuZ2V0KGAke0FQSV9CQVNFX1VSTH0ke2VuZHBvaW50fWAsIGFzeW5jICgpID0+IHtcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5KSlcbiAgICAgICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHsgbWVzc2FnZTogJ0RlbGF5ZWQgcmVzcG9uc2UnIH0pXG4gICAgICB9KVxuICAgIClcbiAgfSxcbn1cblxuLy8gSW5kdXN0cnktc3BlY2lmaWMgbW9jayBoZWxwZXJzXG5leHBvcnQgY29uc3QgbW9ja0luZHVzdHJ5RGF0YSA9IHtcbiAgY2luZW1hOiAoZW5kcG9pbnQ6IHN0cmluZykgPT4ge1xuICAgIHNlcnZlci51c2UoXG4gICAgICBodHRwLmdldChgJHtBUElfQkFTRV9VUkx9JHtlbmRwb2ludH1gLCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBIdHRwUmVzcG9uc2UuanNvbih7XG4gICAgICAgICAgdmVudWVzOiBnZW5lcmF0ZU1vY2tBcGlSZXNwb25zZSgnY2luZW1hJywgJ3ZlbnVlJywgNSksXG4gICAgICAgICAgbW92aWVzOiBnZW5lcmF0ZU1vY2tBcGlSZXNwb25zZSgnY2luZW1hJywgJ21vdmllJywgMTApLFxuICAgICAgICAgIGJvb2tpbmdzOiBnZW5lcmF0ZU1vY2tBcGlSZXNwb25zZSgnY2luZW1hJywgJ2Jvb2tpbmcnLCAyMCksXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIClcbiAgfSxcblxuICBob3RlbDogKGVuZHBvaW50OiBzdHJpbmcpID0+IHtcbiAgICBzZXJ2ZXIudXNlKFxuICAgICAgaHR0cC5nZXQoYCR7QVBJX0JBU0VfVVJMfSR7ZW5kcG9pbnR9YCwgKCkgPT4ge1xuICAgICAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgIHByb3BlcnRpZXM6IGdlbmVyYXRlTW9ja0FwaVJlc3BvbnNlKCdob3RlbCcsICdwcm9wZXJ0eScsIDMpLFxuICAgICAgICAgIHJvb21zOiBnZW5lcmF0ZU1vY2tBcGlSZXNwb25zZSgnaG90ZWwnLCAncm9vbScsIDUwKSxcbiAgICAgICAgICByZXNlcnZhdGlvbnM6IGdlbmVyYXRlTW9ja0FwaVJlc3BvbnNlKCdob3RlbCcsICdyZXNlcnZhdGlvbicsIDMwKSxcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgKVxuICB9LFxuXG4gIGd5bTogKGVuZHBvaW50OiBzdHJpbmcpID0+IHtcbiAgICBzZXJ2ZXIudXNlKFxuICAgICAgaHR0cC5nZXQoYCR7QVBJX0JBU0VfVVJMfSR7ZW5kcG9pbnR9YCwgKCkgPT4ge1xuICAgICAgICByZXR1cm4gSHR0cFJlc3BvbnNlLmpzb24oe1xuICAgICAgICAgIGZhY2lsaXRpZXM6IGdlbmVyYXRlTW9ja0FwaVJlc3BvbnNlKCdneW0nLCAnZmFjaWxpdHknLCAyKSxcbiAgICAgICAgICBtZW1iZXJzOiBnZW5lcmF0ZU1vY2tBcGlSZXNwb25zZSgnZ3ltJywgJ21lbWJlcicsIDEwMCksXG4gICAgICAgICAgY2hlY2tpbnM6IGdlbmVyYXRlTW9ja0FwaVJlc3BvbnNlKCdneW0nLCAnY2hlY2tpbicsIDIwMCksXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIClcbiAgfSxcblxuICByZXRhaWw6IChlbmRwb2ludDogc3RyaW5nKSA9PiB7XG4gICAgc2VydmVyLnVzZShcbiAgICAgIGh0dHAuZ2V0KGAke0FQSV9CQVNFX1VSTH0ke2VuZHBvaW50fWAsICgpID0+IHtcbiAgICAgICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICBzdG9yZXM6IGdlbmVyYXRlTW9ja0FwaVJlc3BvbnNlKCdyZXRhaWwnLCAnc3RvcmUnLCA1KSxcbiAgICAgICAgICBwcm9kdWN0czogZ2VuZXJhdGVNb2NrQXBpUmVzcG9uc2UoJ3JldGFpbCcsICdwcm9kdWN0JywgNTAwKSxcbiAgICAgICAgICBzYWxlczogZ2VuZXJhdGVNb2NrQXBpUmVzcG9uc2UoJ3JldGFpbCcsICdzYWxlJywgMTAwMCksXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIClcbiAgfSxcblxuICBiMmI6IChlbmRwb2ludDogc3RyaW5nKSA9PiB7XG4gICAgc2VydmVyLnVzZShcbiAgICAgIGh0dHAuZ2V0KGAke0FQSV9CQVNFX1VSTH0ke2VuZHBvaW50fWAsICgpID0+IHtcbiAgICAgICAgcmV0dXJuIEh0dHBSZXNwb25zZS5qc29uKHtcbiAgICAgICAgICBjbGllbnRzOiBnZW5lcmF0ZU1vY2tBcGlSZXNwb25zZSgnYjJiJywgJ2NsaWVudCcsIDI1KSxcbiAgICAgICAgICBwcm9qZWN0czogZ2VuZXJhdGVNb2NrQXBpUmVzcG9uc2UoJ2IyYicsICdwcm9qZWN0JywgNTApLFxuICAgICAgICAgIHJlcG9ydHM6IGdlbmVyYXRlTW9ja0FwaVJlc3BvbnNlKCdiMmInLCAncmVwb3J0JywgMTAwKSxcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgKVxuICB9LFxufSJdLCJuYW1lcyI6WyJtb2NrQXBpRW5kcG9pbnQiLCJtb2NrSW5kdXN0cnlEYXRhIiwic2VydmVyIiwiQVBJX0JBU0VfVVJMIiwiaGFuZGxlcnMiLCJodHRwIiwicG9zdCIsInJlcXVlc3QiLCJib2R5IiwianNvbiIsImNvZGUiLCJyZWRpcmVjdF91cmkiLCJIdHRwUmVzcG9uc2UiLCJhY2Nlc3NfdG9rZW4iLCJyZWZyZXNoX3Rva2VuIiwidG9rZW5fdHlwZSIsInVzZXIiLCJpZCIsImVtYWlsIiwiZmlyc3RfbmFtZSIsImxhc3RfbmFtZSIsInJvbGUiLCJvcmdhbmlzYXRpb25faWQiLCJpc19hY3RpdmUiLCJzdGF0dXMiLCJkZXRhaWwiLCJnZXQiLCJ1cmwiLCJVUkwiLCJyZWRpcmVjdFVyaSIsInNlYXJjaFBhcmFtcyIsImF1dGhfdXJsIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiYXV0aEhlYWRlciIsImhlYWRlcnMiLCJzdGFydHNXaXRoIiwiZXhwaXJlc19pbiIsIm1lc3NhZ2UiLCJuYW1lIiwib3JnYW5pemF0aW9uX2lkIiwicGVybWlzc2lvbnMiLCJjcmVhdGVkX2F0IiwidXBkYXRlZF9hdCIsImluZHVzdHJ5Iiwic3Vic2NyaXB0aW9uIiwiZmVhdHVyZXMiLCJsaW1pdHMiLCJ1c2VycyIsImFwaV9jYWxscyIsInN0b3JhZ2UiLCJzZXR0aW5ncyIsInRpbWV6b25lIiwiY3VycmVuY3kiLCJkYXRlX2Zvcm1hdCIsImRhdGEiLCJzaXplIiwiZ3Jvd3RoX3JhdGUiLCJtZXRhIiwidG90YWwiLCJwYWdlIiwicGVyX3BhZ2UiLCJtb2NrRGF0YSIsImdlbmVyYXRlTW9ja0FwaVJlc3BvbnNlIiwibGVuZ3RoIiwidGltZWZyYW1lIiwibWV0cmljcyIsInJldmVudWUiLCJncm93dGgiLCJtYXJrZXRfc2hhcmUiLCJjb21wZXRpdG9yX2NvdW50IiwidHJlbmRzIiwiZGFpbHlfcmV2ZW51ZSIsImRhdGUiLCJ2YWx1ZSIsImZsYWdzIiwiZW5hYmxlZCIsInJvbGxvdXQiLCJTdHJpbmciLCJEYXRlIiwibm93IiwiZXJyb3IiLCJyZXRyeV9hZnRlciIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImNvbnNvbGUiLCJ3YXJuIiwicGF0aG5hbWUiLCJzZXR1cFNlcnZlciIsInN1Y2Nlc3MiLCJlbmRwb2ludCIsInVzZSIsInJhdGVMaW1pdGVkIiwibmV0d29ya0Vycm9yIiwic2xvdyIsImRlbGF5IiwiY2luZW1hIiwidmVudWVzIiwibW92aWVzIiwiYm9va2luZ3MiLCJob3RlbCIsInByb3BlcnRpZXMiLCJyb29tcyIsInJlc2VydmF0aW9ucyIsImd5bSIsImZhY2lsaXRpZXMiLCJtZW1iZXJzIiwiY2hlY2tpbnMiLCJyZXRhaWwiLCJzdG9yZXMiLCJwcm9kdWN0cyIsInNhbGVzIiwiYjJiIiwiY2xpZW50cyIsInByb2plY3RzIiwicmVwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0NBS0M7Ozs7Ozs7Ozs7O0lBMFVZQSxlQUFlO2VBQWZBOztJQStEQUMsZ0JBQWdCO2VBQWhCQTs7SUFsRUFDLE1BQU07ZUFBTkE7OztzQkFyVWU7cUJBQ087dUJBQ3lCO0FBRTVELDJCQUEyQjtBQUMzQixNQUFNQyxlQUFlO0FBRXJCLDRDQUE0QztBQUM1QyxNQUFNQyxXQUFXO0lBQ2YsMkJBQTJCO0lBQzNCQyxTQUFJLENBQUNDLElBQUksQ0FBQyxDQUFDLEVBQUVILGFBQWEsV0FBVyxDQUFDLEVBQUUsT0FBTyxFQUFFSSxPQUFPLEVBQUU7UUFDeEQsTUFBTUMsT0FBTyxNQUFNRCxRQUFRRSxJQUFJO1FBQy9CLE1BQU0sRUFBRUMsSUFBSSxFQUFFQyxZQUFZLEVBQUUsR0FBR0g7UUFFL0IsK0NBQStDO1FBQy9DLElBQUlFLFNBQVMscUJBQXFCQSxTQUFTLGtCQUFrQjtZQUMzRCxPQUFPRSxpQkFBWSxDQUFDSCxJ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