{"version":3,"names":["apiService","ApiService","constructor","cov_1voxh8aabk","f","s","client","_axios","default","create","baseURL","process","env","NEXT_PUBLIC_API_BASE_URL","headers","setupInterceptors","interceptors","request","use","config","token","_jscookie","get","b","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","refresh_token","set","access_token","refreshError","clearTokens","window","location","href","remove","url","data","post","put","delete"],"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios'\nimport Cookies from 'js-cookie'\nimport { TokenResponse, RefreshTokenRequest } from '@/types/auth'\n\nclass ApiService {\n  private client: AxiosInstance\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: process.env.NEXT_PUBLIC_API_BASE_URL + '/api/v1',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n\n    this.setupInterceptors()\n  }\n\n  private setupInterceptors() {\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = Cookies.get('access_token')\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`\n        }\n        return config\n      },\n      (error) => Promise.reject(error)\n    )\n\n    this.client.interceptors.response.use(\n      (response) => response,\n      async (error) => {\n        const originalRequest = error.config\n\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true\n\n          try {\n            const refreshToken = Cookies.get('refresh_token')\n            if (refreshToken) {\n              const response = await this.refreshToken({ refresh_token: refreshToken })\n              Cookies.set('access_token', response.access_token)\n              originalRequest.headers.Authorization = `Bearer ${response.access_token}`\n              return this.client(originalRequest)\n            }\n          } catch (refreshError) {\n            this.clearTokens()\n            window.location.href = '/login'\n          }\n        }\n\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  private clearTokens() {\n    Cookies.remove('access_token')\n    Cookies.remove('refresh_token')\n  }\n\n  async get<T>(url: string): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.get(url)\n    return response.data\n  }\n\n  async post<T>(url: string, data?: any): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.post(url, data)\n    return response.data\n  }\n\n  async put<T>(url: string, data?: any): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.put(url, data)\n    return response.data\n  }\n\n  async delete<T>(url: string): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.delete(url)\n    return response.data\n  }\n\n  async refreshToken(data: RefreshTokenRequest): Promise<{ access_token: string; token_type: string }> {\n    const response = await axios.post(\n      `${process.env.NEXT_PUBLIC_API_BASE_URL}/api/v1/auth/refresh`,\n      data\n    )\n    return response.data\n  }\n}\n\nexport const apiService = new ApiService()"],"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","ignoreList":[]}