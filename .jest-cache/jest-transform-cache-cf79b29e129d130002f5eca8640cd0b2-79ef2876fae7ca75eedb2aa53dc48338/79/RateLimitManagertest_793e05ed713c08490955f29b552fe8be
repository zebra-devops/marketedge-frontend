5ea85ed369eace661eda9449d33440f3
/**
 * Comprehensive tests for RateLimitManager component
 * 
 * Demonstrates multi-tenant testing patterns, accessibility compliance,
 * API integration testing, and role-based testing scenarios.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _msw = require("msw");
const _jestaxe = require("jest-axe");
const _RateLimitManager = require("../RateLimitManager");
const _testutils = require("../../../__tests__/utils/test-utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Extend Jest matchers for accessibility testing
expect.extend(_jestaxe.toHaveNoViolations);
describe("RateLimitManager", ()=>{
    beforeEach(()=>{
        // Reset mocks before each test
        _testutils.mockHandlerUtils.resetMocks();
        // Setup default organizations for testing
        _testutils.mockHandlerUtils.setMockOrganization("org-1", (0, _testutils.createMockOrganization)({
            id: "org-1",
            name: "Hotel Chain A",
            industry: "hotel",
            subscription_plan: "professional",
            rate_limit_per_hour: 5000,
            burst_limit: 250,
            rate_limit_enabled: true
        }));
        _testutils.mockHandlerUtils.setMockOrganization("org-2", (0, _testutils.createMockOrganization)({
            id: "org-2",
            name: "Cinema Group B",
            industry: "cinema",
            subscription_plan: "basic",
            rate_limit_per_hour: 1000,
            burst_limit: 100,
            rate_limit_enabled: true
        }));
        _testutils.mockHandlerUtils.setMockOrganization("org-3", (0, _testutils.createMockOrganization)({
            id: "org-3",
            name: "Enterprise Corp",
            industry: "b2b_service",
            subscription_plan: "enterprise",
            rate_limit_per_hour: 10000,
            burst_limit: 500,
            rate_limit_enabled: false
        }));
    });
    describe("Rendering and Basic Functionality", ()=>{
        it("renders loading state initially", ()=>{
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            expect(_react1.screen.getByTestId("loading-spinner")).toBeInTheDocument();
            expect(_react1.screen.getByLabelText("Loading rate limits")).toBeInTheDocument();
        });
        it("renders rate limits for all tenants when loaded", async ()=>{
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            // Wait for loading to complete
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Check that all organizations are displayed
            expect(_react1.screen.getByText("Hotel Chain A")).toBeInTheDocument();
            expect(_react1.screen.getByText("Cinema Group B")).toBeInTheDocument();
            expect(_react1.screen.getByText("Enterprise Corp")).toBeInTheDocument();
            // Check tier badges
            expect(_react1.screen.getByText("premium")).toBeInTheDocument();
            expect(_react1.screen.getByText("standard")).toBeInTheDocument();
            expect(_react1.screen.getByText("enterprise")).toBeInTheDocument();
        });
        it("renders single tenant view when tenantId provided", async ()=>{
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {
                tenantId: "org-1"
            }), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Should show only the specified tenant
            expect(_react1.screen.getByText("Hotel Chain A")).toBeInTheDocument();
            expect(_react1.screen.queryByText("Cinema Group B")).not.toBeInTheDocument();
            expect(_react1.screen.queryByText("Enterprise Corp")).not.toBeInTheDocument();
            // Should show single tenant indicator
            expect(_react1.screen.getByText("(Single Tenant)")).toBeInTheDocument();
        });
        it("displays correct rate limit information", async ()=>{
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Check rate limit display for Hotel Chain A
            const hotelSection = _react1.screen.getByText("Hotel Chain A").closest("li");
            expect((0, _react1.within)(hotelSection).getByText("Limit: 5,000 req/hour")).toBeInTheDocument();
            expect((0, _react1.within)(hotelSection).getByText("Burst: 250")).toBeInTheDocument();
        });
        it("displays disabled status for inactive rate limits", async ()=>{
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Enterprise Corp has rate limiting disabled
            const enterpriseSection = _react1.screen.getByText("Enterprise Corp").closest("li");
            expect((0, _react1.within)(enterpriseSection).getByText("Disabled")).toBeInTheDocument();
        });
    });
    describe("Error Handling", ()=>{
        it("displays error message when API fails", async ()=>{
            // Mock API error
            _testutils.server.use(_msw.http.get("/api/v1/admin/rate-limits", ()=>{
                return _msw.HttpResponse.json({
                    error: "Internal server error"
                }, {
                    status: 500
                });
            }));
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByRole("alert")).toBeInTheDocument();
                expect(_react1.screen.getByText(/Failed to fetch rate limits: 500/)).toBeInTheDocument();
            });
            // Should have retry button
            expect(_react1.screen.getByLabelText("Retry loading rate limits")).toBeInTheDocument();
        });
        it("retries loading when retry button clicked", async ()=>{
            // First call fails, second succeeds
            let callCount = 0;
            _testutils.server.use(_msw.http.get("/api/v1/admin/rate-limits", ()=>{
                callCount++;
                if (callCount === 1) {
                    return _msw.HttpResponse.json({
                        error: "Server error"
                    }, {
                        status: 500
                    });
                }
                return _msw.HttpResponse.json([]);
            }));
            const user = _userevent.default.setup();
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            // Wait for error
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByRole("alert")).toBeInTheDocument();
            });
            // Click retry
            await user.click(_react1.screen.getByLabelText("Retry loading rate limits"));
            // Should show loading, then success
            expect(_react1.screen.getByTestId("loading-spinner")).toBeInTheDocument();
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByRole("alert")).not.toBeInTheDocument();
                expect(_react1.screen.getByText("No rate limits found")).toBeInTheDocument();
            });
        });
    });
    describe("Edit Functionality", ()=>{
        it("opens edit modal when edit button clicked", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Click edit button for Hotel Chain A
            const editButton = _react1.screen.getByLabelText("Edit rate limit for Hotel Chain A");
            await user.click(editButton);
            // Modal should open
            expect(_react1.screen.getByRole("dialog")).toBeInTheDocument();
            expect(_react1.screen.getByText("Edit Rate Limit: Hotel Chain A")).toBeInTheDocument();
            // Form fields should be pre-populated
            expect(_react1.screen.getByDisplayValue("premium")).toBeInTheDocument();
            expect(_react1.screen.getByDisplayValue("5000")).toBeInTheDocument();
            expect(_react1.screen.getByDisplayValue("250")).toBeInTheDocument();
        });
        it("updates tier and adjusts limits automatically", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Open edit modal
            await user.click(_react1.screen.getByLabelText("Edit rate limit for Cinema Group B"));
            // Change tier from standard to enterprise
            const tierSelect = _react1.screen.getByDisplayValue("standard");
            await user.selectOptions(tierSelect, "enterprise");
            // Limits should update automatically
            expect(_react1.screen.getByDisplayValue("10000")).toBeInTheDocument();
            expect(_react1.screen.getByDisplayValue("500")).toBeInTheDocument();
        });
        it("submits update request when form is valid", async ()=>{
            let updateCalled = false;
            _testutils.server.use(_msw.http.put("/api/v1/admin/rate-limits/org-1", ()=>{
                updateCalled = true;
                return _msw.HttpResponse.json({
                    id: "rate-limit-org-1",
                    tenant_id: "org-1",
                    tenant_name: "Hotel Chain A",
                    tier: "enterprise",
                    requests_per_hour: 10000,
                    burst_size: 500,
                    enabled: true,
                    emergency_bypass: false,
                    created_at: "2025-01-08T10:00:00Z",
                    updated_at: new Date().toISOString()
                });
            }));
            const user = _userevent.default.setup();
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Open edit modal and change tier
            await user.click(_react1.screen.getByLabelText("Edit rate limit for Hotel Chain A"));
            await user.selectOptions(_react1.screen.getByDisplayValue("premium"), "enterprise");
            // Submit form
            await user.click(_react1.screen.getByText("Update"));
            // Should close modal and update data
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByRole("dialog")).not.toBeInTheDocument();
            });
            expect(updateCalled).toBe(true);
        });
        it("prevents submission with invalid values", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Open edit modal
            await user.click(_react1.screen.getByLabelText("Edit rate limit for Hotel Chain A"));
            // Clear requests per hour field
            const requestsField = _react1.screen.getByDisplayValue("5000");
            await user.clear(requestsField);
            await user.type(requestsField, "0");
            // Update button should be disabled
            expect(_react1.screen.getByText("Update")).toBeDisabled();
        });
        it("calls onUpdate callback when provided", async ()=>{
            const onUpdate = jest.fn();
            _testutils.server.use(_msw.http.put("/api/v1/admin/rate-limits/org-1", (req, res, ctx)=>{
                return res(ctx.status(200), ctx.json({
                    id: "rate-limit-org-1",
                    tenant_id: "org-1",
                    tenant_name: "Hotel Chain A",
                    tier: "enterprise",
                    requests_per_hour: 10000,
                    burst_size: 500
                }));
            }));
            const user = _userevent.default.setup();
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {
                onUpdate: onUpdate
            }), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Edit and submit
            await user.click(_react1.screen.getByLabelText("Edit rate limit for Hotel Chain A"));
            await user.click(_react1.screen.getByText("Update"));
            await (0, _react1.waitFor)(()=>{
                expect(onUpdate).toHaveBeenCalledWith(expect.objectContaining({
                    tenant_id: "org-1",
                    tier: "enterprise"
                }));
            });
        });
    });
    describe("Emergency Bypass Functionality", ()=>{
        it("opens emergency bypass modal when emergency button clicked", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Click emergency button for Hotel Chain A
            await user.click(_react1.screen.getByLabelText("Enable emergency bypass for Hotel Chain A"));
            // Emergency modal should open
            expect(_react1.screen.getByRole("dialog")).toBeInTheDocument();
            expect(_react1.screen.getByText("Emergency Bypass: Hotel Chain A")).toBeInTheDocument();
            expect(_react1.screen.getByText(/Warning.*remove all rate limiting/)).toBeInTheDocument();
        });
        it("requires reason text before allowing submission", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Open emergency modal
            await user.click(_react1.screen.getByLabelText("Enable emergency bypass for Hotel Chain A"));
            // Submit button should be disabled without reason
            expect(_react1.screen.getByText("Enable Emergency Bypass")).toBeDisabled();
            // Add short reason (should still be disabled)
            await user.type(_react1.screen.getByPlaceholderText("Explain why emergency bypass is needed..."), "urgent");
            expect(_react1.screen.getByText("Enable Emergency Bypass")).toBeDisabled();
            // Add sufficient reason
            await user.clear(_react1.screen.getByPlaceholderText("Explain why emergency bypass is needed..."));
            await user.type(_react1.screen.getByPlaceholderText("Explain why emergency bypass is needed..."), "Emergency maintenance window requires bypassing rate limits for critical operations");
            expect(_react1.screen.getByText("Enable Emergency Bypass")).toBeEnabled();
        });
        it("shows remove bypass button for tenants with active bypass", async ()=>{
            // Mock organization with active bypass
            _testutils.mockHandlerUtils.setMockOrganization("org-bypass", (0, _testutils.createMockOrganization)({
                id: "org-bypass",
                name: "Bypassed Org",
                rate_limit_enabled: true
            }));
            // Override the handler to show emergency bypass
            _testutils.server.use(_msw.http.get("/api/v1/admin/rate-limits", (req, res, ctx)=>{
                return res(ctx.status(200), ctx.json([
                    {
                        id: "rate-limit-org-bypass",
                        tenant_id: "org-bypass",
                        tenant_name: "Bypassed Org",
                        tier: "standard",
                        requests_per_hour: 1000,
                        burst_size: 100,
                        enabled: true,
                        emergency_bypass: true,
                        bypass_reason: "Critical system maintenance",
                        bypass_until: new Date(Date.now() + 3600000).toISOString()
                    }
                ]));
            }));
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {
                tenantId: "org-bypass"
            }), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Should show emergency bypass badge and remove button
            expect(_react1.screen.getByText("Emergency Bypass")).toBeInTheDocument();
            expect(_react1.screen.getByText("Critical system maintenance")).toBeInTheDocument();
            expect(_react1.screen.getByLabelText("Remove emergency bypass for Bypassed Org")).toBeInTheDocument();
        });
        it("removes emergency bypass when remove button clicked", async ()=>{
            let removeCalled = false;
            // Setup bypassed organization
            _testutils.server.use(_msw.http.get("/api/v1/admin/rate-limits", (req, res, ctx)=>{
                return res(ctx.status(200), ctx.json([
                    {
                        id: "rate-limit-org-1",
                        tenant_id: "org-1",
                        tenant_name: "Hotel Chain A",
                        tier: "premium",
                        requests_per_hour: 5000,
                        burst_size: 250,
                        enabled: true,
                        emergency_bypass: true,
                        bypass_reason: "Emergency maintenance"
                    }
                ]));
            }), _msw.http.delete("/api/v1/admin/rate-limits/org-1/emergency-bypass", (req, res, ctx)=>{
                removeCalled = true;
                return res(ctx.status(200), ctx.json({
                    message: "Emergency bypass removed successfully"
                }));
            }));
            const user = _userevent.default.setup();
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Click remove bypass button
            await user.click(_react1.screen.getByLabelText("Remove emergency bypass for Hotel Chain A"));
            // Should call API
            await (0, _react1.waitFor)(()=>{
                expect(removeCalled).toBe(true);
            });
        });
    });
    describe("Multi-tenant Testing Scenarios", ()=>{
        it("handles different subscription tiers correctly", async ()=>{
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Check tier-specific styling
            const premiumBadge = _react1.screen.getByText("premium");
            expect(premiumBadge).toHaveClass("bg-blue-100", "text-blue-800");
            const standardBadge = _react1.screen.getByText("standard");
            expect(standardBadge).toHaveClass("bg-gray-100", "text-gray-800");
            const enterpriseBadge = _react1.screen.getByText("enterprise");
            expect(enterpriseBadge).toHaveClass("bg-purple-100", "text-purple-800");
        });
        it("shows industry-appropriate default settings in edit form", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Edit enterprise organization
            await user.click(_react1.screen.getByLabelText("Edit rate limit for Enterprise Corp"));
            // Should show enterprise tier settings
            expect(_react1.screen.getByDisplayValue("enterprise")).toBeInTheDocument();
            expect(_react1.screen.getByDisplayValue("10000")).toBeInTheDocument();
            expect(_react1.screen.getByDisplayValue("500")).toBeInTheDocument();
        });
        it("filters by tenant when tenantId prop provided", async ()=>{
            const { rerender } = (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Should show all tenants initially
            expect(_react1.screen.getAllByText(/Chain|Group|Corp/)).toHaveLength(3);
            // Re-render with specific tenant
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {
                tenantId: "org-2"
            }));
            // Should only show Cinema Group B
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("Cinema Group B")).toBeInTheDocument();
                expect(_react1.screen.queryByText("Hotel Chain A")).not.toBeInTheDocument();
                expect(_react1.screen.queryByText("Enterprise Corp")).not.toBeInTheDocument();
            });
        });
    });
    describe("Accessibility Compliance", ()=>{
        it("has no accessibility violations", async ()=>{
            const { container } = (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            const results = await (0, _jestaxe.axe)(container);
            expect(results).toHaveNoViolations();
        });
        it("provides proper ARIA labels for interactive elements", async ()=>{
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Check ARIA labels on buttons
            expect(_react1.screen.getByLabelText("Refresh rate limits")).toBeInTheDocument();
            expect(_react1.screen.getByLabelText("Edit rate limit for Hotel Chain A")).toBeInTheDocument();
            expect(_react1.screen.getByLabelText("Enable emergency bypass for Hotel Chain A")).toBeInTheDocument();
        });
        it("announces errors with proper ARIA live region", async ()=>{
            _testutils.server.use(_msw.http.get("/api/v1/admin/rate-limits", (req, res, ctx)=>{
                return res(ctx.status(500), ctx.json({
                    error: "Server error"
                }));
            }));
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                const alert = _react1.screen.getByRole("alert");
                expect(alert).toBeInTheDocument();
                expect(alert).toHaveAttribute("aria-live", "assertive");
            });
        });
        it("provides proper modal accessibility", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Open edit modal
            await user.click(_react1.screen.getByLabelText("Edit rate limit for Hotel Chain A"));
            const dialog = _react1.screen.getByRole("dialog");
            expect(dialog).toHaveAttribute("aria-modal", "true");
            expect(dialog).toHaveAttribute("aria-labelledby", "edit-modal-title");
            // Check form accessibility
            expect(_react1.screen.getByLabelText("Tier")).toBeInTheDocument();
            expect(_react1.screen.getByLabelText("Requests per Hour")).toBeInTheDocument();
            expect(_react1.screen.getByLabelText("Burst Size")).toBeInTheDocument();
            // Check help text associations
            expect(_react1.screen.getByText("Tier determines default rate limits")).toHaveAttribute("id", "tier-help");
        });
        it("supports keyboard navigation", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Tab to first edit button
            await user.tab();
            await user.tab();
            expect(_react1.screen.getByLabelText("Edit rate limit for Hotel Chain A")).toHaveFocus();
            // Tab to emergency button
            await user.tab();
            expect(_react1.screen.getByLabelText("Enable emergency bypass for Hotel Chain A")).toHaveFocus();
        });
    });
    describe("Role-based Access Control", ()=>{
        it("renders for super admin users", async ()=>{
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            expect(_react1.screen.getByText("Rate Limit Management")).toBeInTheDocument();
            expect(_react1.screen.getByText("Hotel Chain A")).toBeInTheDocument();
        });
        // Note: In a real application, you'd test that non-admin users
        // either can't access this component or have limited functionality
        it("could restrict functionality for non-admin users", ()=>{
            // This would depend on your specific authorization implementation
            // For example, you might not render edit buttons for non-admin users
            expect(true).toBe(true) // Placeholder for actual role-based tests
            ;
        });
    });
    describe("Performance and User Experience", ()=>{
        it("refreshes data when refresh button clicked", async ()=>{
            let callCount = 0;
            _testutils.server.use(_msw.http.get("/api/v1/admin/rate-limits", (req, res, ctx)=>{
                callCount++;
                return res(ctx.status(200), ctx.json([]));
            }));
            const user = _userevent.default.setup();
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Initial load should have been called
            expect(callCount).toBe(1);
            // Click refresh
            await user.click(_react1.screen.getByLabelText("Refresh rate limits"));
            // Should call API again
            await (0, _react1.waitFor)(()=>{
                expect(callCount).toBe(2);
            });
        });
        it("shows empty state when no rate limits exist", async ()=>{
            _testutils.server.use(_msw.http.get("/api/v1/admin/rate-limits", (req, res, ctx)=>{
                return res(ctx.status(200), ctx.json([]));
            }));
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText("No rate limits found")).toBeInTheDocument();
            });
        });
        it("handles concurrent modal operations correctly", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithRole)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_RateLimitManager.RateLimitManager, {}), "super_admin");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.queryByTestId("loading-spinner")).not.toBeInTheDocument();
            });
            // Open edit modal
            await user.click(_react1.screen.getByLabelText("Edit rate limit for Hotel Chain A"));
            expect(_react1.screen.getByText("Edit Rate Limit: Hotel Chain A")).toBeInTheDocument();
            // Cancel and open emergency modal
            await user.click(_react1.screen.getByText("Cancel"));
            await user.click(_react1.screen.getByLabelText("Enable emergency bypass for Hotel Chain A"));
            // Should show emergency modal, not edit modal
            expect(_react1.screen.getByText("Emergency Bypass: Hotel Chain A")).toBeInTheDocument();
            expect(_react1.screen.queryByText("Edit Rate Limit: Hotel Chain A")).not.toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,