e8efd04fe730c4aa02774d6be661e747
/**
 * Comprehensive Authentication Service Tests
 * 
 * Tests all authentication functions to achieve 85%+ coverage:
 * - login, logout, refresh, getCurrentUser
 * - Multi-tenant authentication scenarios
 * - Token management edge cases
 * - Authentication error handling
 * - Session management
 */ "use strict";
// Mock dependencies
jest.mock("../api", ()=>({
        apiService: {
            get: jest.fn(),
            post: jest.fn()
        }
    }));
jest.mock("js-cookie", ()=>({
        default: {
            set: jest.fn(),
            get: jest.fn(),
            remove: jest.fn()
        },
        set: jest.fn(),
        get: jest.fn(),
        remove: jest.fn()
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _auth = require("../auth");
const _api = require("../api");
const _jscookie = /*#__PURE__*/ _interop_require_default(require("js-cookie"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock window.location
const mockLocation = {
    href: ""
};
Object.defineProperty(window, "location", {
    value: mockLocation,
    writable: true
});
const mockApiService = _api.apiService;
const mockCookies = _jscookie.default;
describe("AuthService", ()=>{
    let service;
    beforeEach(()=>{
        service = new _auth.AuthService();
        jest.clearAllMocks();
    });
    afterEach(()=>{
        // Clear mocks after each test
        jest.restoreAllMocks();
    });
    describe("login", ()=>{
        const mockLoginRequest = {
            code: "valid-auth-code",
            redirect_uri: "http://localhost:3000/callback"
        };
        const mockTokenResponse = {
            access_token: "mock-access-token",
            refresh_token: "mock-refresh-token",
            token_type: "bearer",
            user: {
                id: "user-123",
                email: "test@example.com",
                first_name: "Test",
                last_name: "User",
                role: "analyst",
                organisation_id: "org-123",
                is_active: true
            }
        };
        it("should successfully login with valid credentials", async ()=>{
            mockApiService.post.mockResolvedValue(mockTokenResponse);
            const result = await service.login(mockLoginRequest);
            expect(mockApiService.post).toHaveBeenCalledWith("/auth/login", mockLoginRequest);
            expect(mockCookies.set).toHaveBeenCalledWith("access_token", "mock-access-token", {
                expires: 1
            });
            expect(mockCookies.set).toHaveBeenCalledWith("refresh_token", "mock-refresh-token", {
                expires: 7
            });
            expect(result).toEqual(mockTokenResponse);
        });
        it("should handle login API errors", async ()=>{
            const errorResponse = new Error("Invalid authorization code");
            mockApiService.post.mockRejectedValue(errorResponse);
            await expect(service.login(mockLoginRequest)).rejects.toThrow("Invalid authorization code");
            expect(mockApiService.post).toHaveBeenCalledWith("/auth/login", mockLoginRequest);
            expect(mockCookies.set).not.toHaveBeenCalled();
        });
        it("should handle network errors during login", async ()=>{
            const networkError = new Error("Network timeout");
            mockApiService.post.mockRejectedValue(networkError);
            await expect(service.login(mockLoginRequest)).rejects.toThrow("Network timeout");
        });
        it("should set cookies with correct expiration times", async ()=>{
            mockApiService.post.mockResolvedValue(mockTokenResponse);
            await service.login(mockLoginRequest);
            expect(mockCookies.set).toHaveBeenCalledWith("access_token", "mock-access-token", {
                expires: 1
            } // 1 day
            );
            expect(mockCookies.set).toHaveBeenCalledWith("refresh_token", "mock-refresh-token", {
                expires: 7
            } // 7 days
            );
        });
    });
    describe("getCurrentUser", ()=>{
        const mockUser = {
            id: "user-456",
            email: "current@example.com",
            first_name: "Current",
            last_name: "User",
            role: "admin",
            organisation_id: "org-456",
            is_active: true
        };
        it("should successfully fetch current user", async ()=>{
            mockApiService.get.mockResolvedValue(mockUser);
            const result = await service.getCurrentUser();
            expect(mockApiService.get).toHaveBeenCalledWith("/auth/me");
            expect(result).toEqual(mockUser);
        });
        it("should handle unauthorized response", async ()=>{
            const unauthorizedError = new Error("Not authenticated");
            mockApiService.get.mockRejectedValue(unauthorizedError);
            await expect(service.getCurrentUser()).rejects.toThrow("Not authenticated");
            expect(mockApiService.get).toHaveBeenCalledWith("/auth/me");
        });
        it("should handle server errors", async ()=>{
            const serverError = new Error("Internal server error");
            mockApiService.get.mockRejectedValue(serverError);
            await expect(service.getCurrentUser()).rejects.toThrow("Internal server error");
        });
    });
    describe("getAuth0Url", ()=>{
        const mockRedirectUri = "http://localhost:3000/callback";
        const mockAuthUrlResponse = {
            auth_url: "https://dev-platform.auth0.com/authorize?response_type=code&client_id=test&redirect_uri=http%3A//localhost%3A3000/callback&scope=openid%20profile%20email"
        };
        it("should successfully get Auth0 URL", async ()=>{
            mockApiService.get.mockResolvedValue(mockAuthUrlResponse);
            const result = await service.getAuth0Url(mockRedirectUri);
            expect(mockApiService.get).toHaveBeenCalledWith(`/auth/auth0-url?redirect_uri=${encodeURIComponent(mockRedirectUri)}`);
            expect(result).toEqual(mockAuthUrlResponse);
        });
        it("should handle URL with special characters", async ()=>{
            const specialRedirectUri = "http://localhost:3000/callback?state=test&nonce=123";
            mockApiService.get.mockResolvedValue(mockAuthUrlResponse);
            await service.getAuth0Url(specialRedirectUri);
            expect(mockApiService.get).toHaveBeenCalledWith(`/auth/auth0-url?redirect_uri=${encodeURIComponent(specialRedirectUri)}`);
        });
        it("should handle API errors when getting Auth0 URL", async ()=>{
            const apiError = new Error("Auth0 configuration error");
            mockApiService.get.mockRejectedValue(apiError);
            await expect(service.getAuth0Url(mockRedirectUri)).rejects.toThrow("Auth0 configuration error");
        });
    });
    describe("logout", ()=>{
        it("should remove cookies and redirect to login", ()=>{
            service.logout();
            expect(mockCookies.remove).toHaveBeenCalledWith("access_token");
            expect(mockCookies.remove).toHaveBeenCalledWith("refresh_token");
            expect(window.location.href).toBe("/login");
        });
        it("should handle logout even if cookies do not exist", ()=>{
            // Test that logout still works even if cookies.remove doesn't throw
            mockCookies.remove.mockImplementation(()=>undefined);
            service.logout();
            expect(mockCookies.remove).toHaveBeenCalledWith("access_token");
            expect(mockCookies.remove).toHaveBeenCalledWith("refresh_token");
            expect(window.location.href).toBe("/login");
        });
    });
    describe("getToken", ()=>{
        it("should return access token when it exists", ()=>{
            mockCookies.get.mockReturnValue("valid-access-token");
            const token = service.getToken();
            expect(mockCookies.get).toHaveBeenCalledWith("access_token");
            expect(token).toBe("valid-access-token");
        });
        it("should return undefined when token does not exist", ()=>{
            mockCookies.get.mockReturnValue(undefined);
            const token = service.getToken();
            expect(mockCookies.get).toHaveBeenCalledWith("access_token");
            expect(token).toBeUndefined();
        });
        it("should return empty string as falsy when token is empty", ()=>{
            mockCookies.get.mockReturnValue("");
            const token = service.getToken();
            expect(mockCookies.get).toHaveBeenCalledWith("access_token");
            expect(token).toBe("");
        });
    });
    describe("isAuthenticated", ()=>{
        it("should return true when token exists", ()=>{
            mockCookies.get.mockReturnValue("valid-token");
            const isAuthenticated = service.isAuthenticated();
            expect(mockCookies.get).toHaveBeenCalledWith("access_token");
            expect(isAuthenticated).toBe(true);
        });
        it("should return false when token does not exist", ()=>{
            mockCookies.get.mockReturnValue(undefined);
            const isAuthenticated = service.isAuthenticated();
            expect(mockCookies.get).toHaveBeenCalledWith("access_token");
            expect(isAuthenticated).toBe(false);
        });
        it("should return false when token is empty string", ()=>{
            mockCookies.get.mockReturnValue("");
            const isAuthenticated = service.isAuthenticated();
            expect(mockCookies.get).toHaveBeenCalledWith("access_token");
            expect(isAuthenticated).toBe(false);
        });
        it("should return false when token is null", ()=>{
            mockCookies.get.mockReturnValue(null);
            const isAuthenticated = service.isAuthenticated();
            expect(isAuthenticated).toBe(false);
        });
    });
    describe("Multi-tenant scenarios", ()=>{
        const hotelTenantUser = {
            id: "hotel-user",
            email: "hotel@example.com",
            first_name: "Hotel",
            last_name: "Manager",
            role: "admin",
            organisation_id: "hotel-org-123",
            is_active: true
        };
        const cinemaTenantUser = {
            id: "cinema-user",
            email: "cinema@example.com",
            first_name: "Cinema",
            last_name: "Operator",
            role: "analyst",
            organisation_id: "cinema-org-456",
            is_active: true
        };
        it("should handle hotel tenant authentication", async ()=>{
            const hotelLogin = {
                code: "hotel-auth-code",
                redirect_uri: "http://hotel.platform.com/callback"
            };
            const hotelTokenResponse = {
                access_token: "hotel-access-token",
                refresh_token: "hotel-refresh-token",
                token_type: "bearer",
                user: hotelTenantUser
            };
            mockApiService.post.mockResolvedValue(hotelTokenResponse);
            const result = await service.login(hotelLogin);
            expect(result.user.organisation_id).toBe("hotel-org-123");
            expect(result.user.role).toBe("admin");
        });
        it("should handle cinema tenant authentication", async ()=>{
            const cinemaLogin = {
                code: "cinema-auth-code",
                redirect_uri: "http://cinema.platform.com/callback"
            };
            const cinemaTokenResponse = {
                access_token: "cinema-access-token",
                refresh_token: "cinema-refresh-token",
                token_type: "bearer",
                user: cinemaTenantUser
            };
            mockApiService.post.mockResolvedValue(cinemaTokenResponse);
            const result = await service.login(cinemaLogin);
            expect(result.user.organisation_id).toBe("cinema-org-456");
            expect(result.user.role).toBe("analyst");
        });
        it("should handle tenant-specific user data", async ()=>{
            mockApiService.get.mockResolvedValue(hotelTenantUser);
            const user = await service.getCurrentUser();
            expect(user.organisation_id).toBe("hotel-org-123");
            expect(user.email).toBe("hotel@example.com");
        });
    });
    describe("Token edge cases", ()=>{
        it("should handle malformed tokens gracefully", ()=>{
            mockCookies.get.mockReturnValue("malformed.token.here");
            const token = service.getToken();
            expect(token).toBe("malformed.token.here");
            const isAuthenticated = service.isAuthenticated();
            expect(isAuthenticated).toBe(true) // Should still consider it authenticated
            ;
        });
        it("should handle expired tokens", async ()=>{
            // Token exists but API call fails with 401
            mockCookies.get.mockReturnValue("expired-token");
            mockApiService.get.mockRejectedValue(new Error("Token expired"));
            await expect(service.getCurrentUser()).rejects.toThrow("Token expired");
        });
    });
    describe("Session management", ()=>{
        it("should maintain consistent state across multiple calls", ()=>{
            mockCookies.get.mockReturnValue("consistent-token");
            expect(service.isAuthenticated()).toBe(true);
            expect(service.getToken()).toBe("consistent-token");
            expect(service.isAuthenticated()).toBe(true);
        });
        it("should handle cookie changes during session", ()=>{
            // First call returns token
            mockCookies.get.mockReturnValueOnce("initial-token");
            expect(service.isAuthenticated()).toBe(true);
            // Second call returns no token (e.g., cookie expired)
            mockCookies.get.mockReturnValueOnce(undefined);
            expect(service.isAuthenticated()).toBe(false);
        });
    });
    describe("Error boundary scenarios", ()=>{
        it("should handle cookie access errors", ()=>{
            mockCookies.get.mockImplementation(()=>{
                throw new Error("Cookie access denied");
            });
            expect(()=>service.getToken()).toThrow("Cookie access denied");
            expect(()=>service.isAuthenticated()).toThrow("Cookie access denied");
        });
        it("should handle cookie setting errors during login", async ()=>{
            const tokenResponse = {
                access_token: "test-token",
                refresh_token: "test-refresh",
                token_type: "bearer",
                user: {
                    id: "user-123",
                    email: "test@example.com",
                    first_name: "Test",
                    last_name: "User",
                    role: "analyst",
                    organisation_id: "org-123",
                    is_active: true
                }
            };
            mockApiService.post.mockResolvedValue(tokenResponse);
            mockCookies.set.mockImplementation(()=>{
                throw new Error("Cookie setting failed");
            });
            // Should still return the response even if cookie setting fails
            const result = await service.login({
                code: "test-code",
                redirect_uri: "http://localhost:3000/callback"
            });
            expect(result).toEqual(tokenResponse);
        });
    });
});
describe("Singleton authService", ()=>{
    it("should export a singleton instance", ()=>{
        expect(_auth.authService).toBeInstanceOf(_auth.AuthService);
    });
    it("should maintain state across imports", ()=>{
        const instance1 = _auth.authService;
        const instance2 = _auth.authService;
        expect(instance1).toBe(instance2);
    });
});

//# sourceMappingURL=data:application/json;base64,