{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/__tests__/integration/user-flows.test.tsx"],"sourcesContent":["/**\n * Integration Tests for Key User Flows\n * \n * Tests complete user journeys across the multi-tenant platform\n * including authentication, navigation, and industry-specific workflows\n */\n\nimport React from 'react'\nimport { screen, waitFor, within } from '@testing-library/react'\nimport { http, HttpResponse } from 'msw'\nimport { server } from '../../../jest.setup'\nimport {\n  renderWithProviders,\n  renderForIndustry,\n  renderAsAdmin,\n  renderUnauthenticated,\n  mockApiEndpoints,\n  createTestUser,\n  createTestOrganisation,\n  waitForLoadingToFinish,\n  industryTestScenarios,\n} from '../../utils/test-utils'\n\n// Mock the main application layout and key components\nconst MockApp: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <div data-testid=\"app-layout\">\n    <header data-testid=\"app-header\">\n      <nav>\n        <a href=\"/dashboard\" data-testid=\"nav-dashboard\">Dashboard</a>\n        <a href=\"/market-edge\" data-testid=\"nav-market-edge\">Market Edge</a>\n        <a href=\"/admin\" data-testid=\"nav-admin\">Admin</a>\n        <button data-testid=\"user-menu\">User Menu</button>\n      </nav>\n    </header>\n    <main data-testid=\"app-content\">\n      {children}\n    </main>\n    <footer data-testid=\"app-footer\">\n      <p>Platform Wrapper Â© 2025</p>\n    </footer>\n  </div>\n)\n\nconst MockDashboard: React.FC<{ industry?: string }> = ({ industry }) => (\n  <div data-testid=\"dashboard-page\">\n    <h1>Dashboard</h1>\n    <div data-testid=\"industry-indicator\">Industry: {industry || 'general'}</div>\n    <div data-testid=\"dashboard-widgets\">\n      <div data-testid=\"performance-widget\">Performance Metrics</div>\n      <div data-testid=\"alerts-widget\">Recent Alerts</div>\n      <div data-testid=\"quick-actions\">\n        <button data-testid=\"view-competitors\">View Competitors</button>\n        <button data-testid=\"manage-settings\">Manage Settings</button>\n      </div>\n    </div>\n  </div>\n)\n\nconst MockMarketEdge: React.FC<{ industry?: string }> = ({ industry }) => (\n  <div data-testid=\"market-edge-page\">\n    <h1>Market Edge</h1>\n    <div data-testid=\"industry-context\">Industry: {industry || 'general'}</div>\n    <div data-testid=\"market-selector\">\n      <select data-testid=\"market-select\">\n        <option value=\"\">Select Market</option>\n        {industry === 'cinema' && (\n          <>\n            <option value=\"cinema-downtown\">Downtown Cinema</option>\n            <option value=\"cinema-mall\">Mall Cinema</option>\n          </>\n        )}\n        {industry === 'hotel' && (\n          <>\n            <option value=\"hotel-luxury\">Luxury Hotels</option>\n            <option value=\"hotel-business\">Business Hotels</option>\n          </>\n        )}\n        {(!industry || industry === 'general') && (\n          <>\n            <option value=\"general-local\">Local Market</option>\n            <option value=\"general-regional\">Regional Market</option>\n          </>\n        )}\n      </select>\n    </div>\n    <div data-testid=\"competitor-table\">\n      <h2>Competitors</h2>\n      <table>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Market Share</th>\n            <th>Pricing</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Competitor 1</td>\n            <td>25%</td>\n            <td>Premium</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n)\n\nconst MockAdmin: React.FC = () => (\n  <div data-testid=\"admin-page\">\n    <h1>Admin Panel</h1>\n    <nav data-testid=\"admin-nav\">\n      <button data-testid=\"admin-stats\">Statistics</button>\n      <button data-testid=\"admin-users\">Manage Users</button>\n      <button data-testid=\"admin-orgs\">Manage Organizations</button>\n      <button data-testid=\"admin-features\">Feature Flags</button>\n      <button data-testid=\"admin-rate-limits\">Rate Limiting</button>\n    </nav>\n    <div data-testid=\"admin-content\">\n      <div data-testid=\"system-health\">\n        <h2>System Health</h2>\n        <p data-testid=\"health-status\">Status: Healthy</p>\n        <p data-testid=\"active-users\">Active Users: 230</p>\n        <p data-testid=\"total-orgs\">Organizations: 45</p>\n      </div>\n    </div>\n  </div>\n)\n\nconst MockLogin: React.FC<{ onLogin: () => void }> = ({ onLogin }) => (\n  <div data-testid=\"login-page\">\n    <h1>Login</h1>\n    <form\n      onSubmit={(e) => {\n        e.preventDefault()\n        onLogin()\n      }}\n    >\n      <input\n        type=\"email\"\n        placeholder=\"Email\"\n        data-testid=\"login-email\"\n        required\n      />\n      <input\n        type=\"password\"\n        placeholder=\"Password\"\n        data-testid=\"login-password\"\n        required\n      />\n      <button type=\"submit\" data-testid=\"login-submit\">\n        Sign In\n      </button>\n    </form>\n  </div>\n)\n\ndescribe('User Flow Integration Tests', () => {\n  \n  describe('Authentication Flow', () => {\n    it('allows user to login and access dashboard', async () => {\n      const user = createTestUser({ role: 'user' })\n      const organisation = createTestOrganisation('general')\n      \n      mockApiEndpoints.mockAuth(user)\n      mockApiEndpoints.mockOrganisation(organisation)\n      \n      let isLoggedIn = false\n      const handleLogin = () => {\n        isLoggedIn = true\n      }\n      \n      // Start unauthenticated\n      const { rerender, user: userEvent } = renderUnauthenticated(\n        <MockApp>\n          <MockLogin onLogin={handleLogin} />\n        </MockApp>\n      )\n      \n      expect(screen.getByTestId('login-page')).toBeInTheDocument()\n      \n      // Fill out login form\n      await userEvent.type(screen.getByTestId('login-email'), user.email)\n      await userEvent.type(screen.getByTestId('login-password'), 'password123')\n      await userEvent.click(screen.getByTestId('login-submit'))\n      \n      // Simulate successful login and redirect\n      rerender(\n        <MockApp>\n          <MockDashboard industry={organisation.industry} />\n        </MockApp>,\n        { user, organisation, isAuthenticated: true }\n      )\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('dashboard-page')).toBeInTheDocument()\n      })\n      \n      expect(screen.getByText('Dashboard')).toBeInTheDocument()\n      expect(screen.getByTestId('industry-indicator')).toHaveTextContent('Industry: general')\n    })\n    \n    it('redirects unauthenticated users to login', async () => {\n      const { user } = renderUnauthenticated(\n        <MockApp>\n          <MockLogin onLogin={() => {}} />\n        </MockApp>\n      )\n      \n      expect(screen.getByTestId('login-page')).toBeInTheDocument()\n      \n      // Try to navigate to protected route\n      await user.click(screen.getByTestId('nav-dashboard'))\n      \n      // Should still see login page (in real app, router would handle this)\n      expect(screen.getByTestId('login-page')).toBeInTheDocument()\n    })\n  })\n  \n  describe('Dashboard to Market Edge Navigation Flow', () => {\n    it('allows seamless navigation between dashboard and market edge', async () => {\n      const user = createTestUser({ role: 'user' })\n      const organisation = createTestOrganisation('cinema')\n      \n      mockApiEndpoints.mockAuth(user)\n      mockApiEndpoints.mockOrganisation(organisation)\n      mockApiEndpoints.mockMarketEdge()\n      \n      // Start on dashboard\n      const { rerender, user: userEvent } = renderForIndustry(\n        <MockApp>\n          <MockDashboard industry={organisation.industry} />\n        </MockApp>,\n        'cinema'\n      )\n      \n      expect(screen.getByTestId('dashboard-page')).toBeInTheDocument()\n      expect(screen.getByTestId('industry-indicator')).toHaveTextContent('Industry: cinema')\n      \n      // Navigate to Market Edge from dashboard quick action\n      await userEvent.click(screen.getByTestId('view-competitors'))\n      \n      // Simulate navigation to Market Edge\n      rerender(\n        <MockApp>\n          <MockMarketEdge industry={organisation.industry} />\n        </MockApp>,\n        { industryType: 'cinema' }\n      )\n      \n      await waitFor(() => {\n        expect(screen.getByTestId('market-edge-page')).toBeInTheDocument()\n      })\n      \n      expect(screen.getByText('Market Edge')).toBeInTheDocument()\n      expect(screen.getByTestId('industry-context')).toHaveTextContent('Industry: cinema')\n      \n      // Should see cinema-specific market options\n      expect(screen.getByText('Downtown Cinema')).toBeInTheDocument()\n      expect(screen.getByText('Mall Cinema')).toBeInTheDocument()\n    })\n  })\n  \n  describe('Industry-Specific User Flows', () => {\n    describe('Cinema Industry Flow', () => {\n      beforeEach(() => {\n        industryTestScenarios.cinema.ticketingSystem()\n        industryTestScenarios.cinema.highTrafficRateLimiting()\n      })\n      \n      it('supports complete cinema management workflow', async () => {\n        const cinemaUser = createTestUser({ role: 'user' }, 'cinema')\n        const cinemaOrg = createTestOrganisation('cinema')\n        \n        mockApiEndpoints.mockAuth(cinemaUser)\n        mockApiEndpoints.mockOrganisation(cinemaOrg)\n        \n        const { user } = renderForIndustry(\n          <MockApp>\n            <MockDashboard industry=\"cinema\" />\n          </MockApp>,\n          'cinema'\n        )\n        \n        // Should see cinema-specific dashboard\n        expect(screen.getByTestId('industry-indicator')).toHaveTextContent('Industry: cinema')\n        \n        // Navigate to Market Edge\n        await user.click(screen.getByTestId('view-competitors'))\n        \n        // Simulate navigation\n        const { rerender } = renderForIndustry(\n          <MockApp>\n            <MockMarketEdge industry=\"cinema\" />\n          </MockApp>,\n          'cinema'\n        )\n        \n        // Should have cinema-specific options\n        const marketSelect = screen.getByTestId('market-select')\n        await user.selectOptions(marketSelect, 'cinema-downtown')\n        \n        expect(marketSelect).toHaveValue('cinema-downtown')\n        \n        // Should see competitor data relevant to cinema industry\n        expect(screen.getByTestId('competitor-table')).toBeInTheDocument()\n        expect(screen.getByText('Competitors')).toBeInTheDocument()\n      })\n    })\n    \n    describe('Hotel Industry Flow', () => {\n      beforeEach(() => {\n        industryTestScenarios.hotel.realTimePricing()\n      })\n      \n      it('supports hotel pricing and competitor analysis workflow', async () => {\n        const hotelUser = createTestUser({ role: 'user' }, 'hotel')\n        const hotelOrg = createTestOrganisation('hotel')\n        \n        const { user } = renderForIndustry(\n          <MockApp>\n            <MockMarketEdge industry=\"hotel\" />\n          </MockApp>,\n          'hotel'\n        )\n        \n        expect(screen.getByTestId('industry-context')).toHaveTextContent('Industry: hotel')\n        \n        // Select hotel market segment\n        const marketSelect = screen.getByTestId('market-select')\n        await user.selectOptions(marketSelect, 'hotel-luxury')\n        \n        expect(marketSelect).toHaveValue('hotel-luxury')\n        \n        // Should integrate with real-time pricing data\n        await waitFor(() => {\n          expect(screen.getByTestId('competitor-table')).toBeInTheDocument()\n        })\n      })\n    })\n    \n    describe('Gym Industry Flow', () => {\n      beforeEach(() => {\n        industryTestScenarios.gym.membershipTracking()\n      })\n      \n      it('supports gym membership and competition analysis', async () => {\n        const gymUser = createTestUser({ role: 'user' }, 'gym')\n        const gymOrg = createTestOrganisation('gym')\n        \n        const { user } = renderForIndustry(\n          <MockApp>\n            <MockDashboard industry=\"gym\" />\n          </MockApp>,\n          'gym'\n        )\n        \n        expect(screen.getByTestId('industry-indicator')).toHaveTextContent('Industry: gym')\n        \n        // Should have gym-specific performance metrics\n        expect(screen.getByTestId('performance-widget')).toBeInTheDocument()\n        \n        // Navigate to competitor analysis\n        await user.click(screen.getByTestId('view-competitors'))\n        \n        // Should see gym-specific competitor data\n        const { rerender } = renderForIndustry(\n          <MockApp>\n            <MockMarketEdge industry=\"gym\" />\n          </MockApp>,\n          'gym'\n        )\n        \n        expect(screen.getByTestId('industry-context')).toHaveTextContent('Industry: gym')\n      })\n    })\n  })\n  \n  describe('Admin User Flows', () => {\n    it('allows admin to access all system management features', async () => {\n      const adminUser = createTestUser({ role: 'admin' })\n      \n      mockApiEndpoints.mockAuth(adminUser)\n      mockApiEndpoints.mockAdmin()\n      mockApiEndpoints.mockRateLimiting()\n      \n      const { user } = renderAsAdmin(\n        <MockApp>\n          <MockAdmin />\n        </MockApp>\n      )\n      \n      expect(screen.getByTestId('admin-page')).toBeInTheDocument()\n      \n      // Should see admin navigation\n      expect(screen.getByTestId('admin-nav')).toBeInTheDocument()\n      \n      // Check system health\n      expect(screen.getByTestId('system-health')).toBeInTheDocument()\n      expect(screen.getByTestId('health-status')).toHaveTextContent('Status: Healthy')\n      \n      // Navigate to different admin sections\n      await user.click(screen.getByTestId('admin-stats'))\n      expect(screen.getByTestId('admin-stats')).toBeInTheDocument()\n      \n      await user.click(screen.getByTestId('admin-rate-limits'))\n      expect(screen.getByTestId('admin-rate-limits')).toBeInTheDocument()\n    })\n    \n    it('allows admin to manage multi-tenant data', async () => {\n      const adminUser = createTestUser({ role: 'admin' })\n      const organisations = [\n        createTestOrganisation('cinema'),\n        createTestOrganisation('hotel'),\n        createTestOrganisation('gym'),\n      ]\n      \n      mockApiEndpoints.mockAuth(adminUser)\n      mockApiEndpoints.mockAdmin()\n      \n      const { user } = renderAsAdmin(\n        <MockApp>\n          <MockAdmin />\n        </MockApp>\n      )\n      \n      // Should see aggregated statistics\n      expect(screen.getByTestId('system-health')).toBeInTheDocument()\n      \n      // Navigate to organization management\n      await user.click(screen.getByTestId('admin-orgs'))\n      \n      // Should be able to manage organizations across all industries\n      expect(screen.getByTestId('admin-orgs')).toBeInTheDocument()\n    })\n  })\n  \n  describe('Error Handling Flows', () => {\n    it('handles API errors gracefully during user flows', async () => {\n      const user = createTestUser({ role: 'user' })\n      \n      // Mock API failure\n      server.use(\n        http.get('/api/v1/auth/me', () => {\n          return HttpResponse.error()\n        }),\n        http.get('/api/v1/market-edge/*', () => {\n          return HttpResponse.error()\n        })\n      )\n      \n      const { user: userEvent } = renderWithProviders(\n        <MockApp>\n          <MockMarketEdge />\n        </MockApp>,\n        { user, isAuthenticated: true }\n      )\n      \n      // Should handle errors gracefully\n      await waitFor(() => {\n        expect(screen.getByTestId('market-edge-page')).toBeInTheDocument()\n      })\n      \n      // Component should still render with fallback data\n      expect(screen.getByTestId('market-selector')).toBeInTheDocument()\n    })\n    \n    it('handles rate limiting during user flows', async () => {\n      const user = createTestUser({ role: 'user' })\n      \n      // Mock rate limiting response\n      server.use(\n        http.get('/api/v1/market-edge/*', () => {\n          return new HttpResponse(\n            JSON.stringify({ detail: 'Rate limit exceeded' }),\n            { \n              status: 429,\n              headers: {\n                'X-RateLimit-Remaining': '0',\n                'X-RateLimit-Reset': String(Date.now() + 60000),\n                'Retry-After': '60'\n              }\n            }\n          )\n        })\n      )\n      \n      const { user: userEvent } = renderWithProviders(\n        <MockApp>\n          <MockMarketEdge />\n        </MockApp>,\n        { user, isAuthenticated: true }\n      )\n      \n      // Try to trigger API call\n      const marketSelect = screen.getByTestId('market-select')\n      await userEvent.selectOptions(marketSelect, 'general-local')\n      \n      // Should show rate limiting message or handle gracefully\n      await waitFor(() => {\n        // Component should still be functional with cached/fallback data\n        expect(screen.getByTestId('market-edge-page')).toBeInTheDocument()\n      })\n    })\n  })\n  \n  describe('Cross-tenant Data Isolation', () => {\n    it('properly isolates data between different tenants', async () => {\n      const tenant1User = createTestUser({ organisation_id: 'tenant-1' })\n      const tenant1Org = createTestOrganisation('cinema', { id: 'tenant-1' })\n      \n      const tenant2User = createTestUser({ organisation_id: 'tenant-2' })\n      const tenant2Org = createTestOrganisation('hotel', { id: 'tenant-2' })\n      \n      // Start with tenant 1\n      const { rerender } = renderWithProviders(\n        <MockApp>\n          <MockDashboard industry=\"cinema\" />\n        </MockApp>,\n        { user: tenant1User, organisation: tenant1Org }\n      )\n      \n      expect(screen.getByTestId('industry-indicator')).toHaveTextContent('Industry: cinema')\n      \n      // Switch to tenant 2 (simulate user switching organizations or logging in as different user)\n      rerender(\n        <MockApp>\n          <MockDashboard industry=\"hotel\" />\n        </MockApp>,\n        { user: tenant2User, organisation: tenant2Org }\n      )\n      \n      // Should see different industry-specific data\n      expect(screen.getByTestId('industry-indicator')).toHaveTextContent('Industry: hotel')\n      \n      // Data should be completely isolated - no cinema data should be visible\n      const { rerender: rerender2 } = renderWithProviders(\n        <MockApp>\n          <MockMarketEdge industry=\"hotel\" />\n        </MockApp>,\n        { user: tenant2User, organisation: tenant2Org }\n      )\n      \n      // Should only see hotel-specific options\n      expect(screen.queryByText('Downtown Cinema')).not.toBeInTheDocument()\n      expect(screen.getByText('Luxury Hotels')).toBeInTheDocument()\n    })\n  })\n  \n  describe('Performance and User Experience', () => {\n    it('provides fast navigation between pages', async () => {\n      const user = createTestUser({ role: 'user' })\n      const organisation = createTestOrganisation('general')\n      \n      const { user: userEvent } = renderWithProviders(\n        <MockApp>\n          <MockDashboard />\n        </MockApp>,\n        { user, organisation }\n      )\n      \n      const startTime = performance.now()\n      \n      // Navigate to Market Edge\n      await userEvent.click(screen.getByTestId('view-competitors'))\n      \n      // Simulate fast navigation\n      const endTime = performance.now()\n      const navigationTime = endTime - startTime\n      \n      // Navigation should be fast (under 100ms for simulated navigation)\n      expect(navigationTime).toBeLessThan(100)\n    })\n    \n    it('maintains state during navigation', async () => {\n      const user = createTestUser({ role: 'user' })\n      const organisation = createTestOrganisation('cinema')\n      \n      const { user: userEvent, rerender } = renderWithProviders(\n        <MockApp>\n          <MockMarketEdge industry=\"cinema\" />\n        </MockApp>,\n        { user, organisation }\n      )\n      \n      // Select market\n      const marketSelect = screen.getByTestId('market-select')\n      await userEvent.selectOptions(marketSelect, 'cinema-downtown')\n      \n      expect(marketSelect).toHaveValue('cinema-downtown')\n      \n      // Navigate away and back\n      rerender(\n        <MockApp>\n          <MockDashboard industry=\"cinema\" />\n        </MockApp>\n      )\n      \n      expect(screen.getByTestId('dashboard-page')).toBeInTheDocument()\n      \n      // Navigate back to Market Edge\n      rerender(\n        <MockApp>\n          <MockMarketEdge industry=\"cinema\" />\n        </MockApp>\n      )\n      \n      // State should be maintained (in real app, this would be handled by state management)\n      expect(screen.getByTestId('market-edge-page')).toBeInTheDocument()\n    })\n  })\n})"],"names":["MockApp","children","div","data-testid","header","nav","a","href","button","main","footer","p","MockDashboard","industry","h1","MockMarketEdge","select","option","value","h2","table","thead","tr","th","tbody","td","MockAdmin","MockLogin","onLogin","form","onSubmit","e","preventDefault","input","type","placeholder","required","describe","it","user","createTestUser","role","organisation","createTestOrganisation","mockApiEndpoints","mockAuth","mockOrganisation","isLoggedIn","handleLogin","rerender","userEvent","renderUnauthenticated","expect","screen","getByTestId","toBeInTheDocument","email","click","isAuthenticated","waitFor","getByText","toHaveTextContent","mockMarketEdge","renderForIndustry","industryType","beforeEach","industryTestScenarios","cinema","ticketingSystem","highTrafficRateLimiting","cinemaUser","cinemaOrg","marketSelect","selectOptions","toHaveValue","hotel","realTimePricing","hotelUser","hotelOrg","gym","membershipTracking","gymUser","gymOrg","adminUser","mockAdmin","mockRateLimiting","renderAsAdmin","organisations","server","use","http","get","HttpResponse","error","renderWithProviders","JSON","stringify","detail","status","headers","String","Date","now","tenant1User","organisation_id","tenant1Org","id","tenant2User","tenant2Org","rerender2","queryByText","not","startTime","performance","endTime","navigationTime","toBeLessThan"],"mappings":"AAAA;;;;;CAKC;;;;;8DAEiB;wBACsB;qBACL;2BACZ;2BAWhB;;;;;;AAEP,sDAAsD;AACtD,MAAMA,UAAmD,CAAC,EAAEC,QAAQ,EAAE,iBACpE,sBAACC;QAAIC,eAAY;;0BACf,qBAACC;gBAAOD,eAAY;0BAClB,cAAA,sBAACE;;sCACC,qBAACC;4BAAEC,MAAK;4BAAaJ,eAAY;sCAAgB;;sCACjD,qBAACG;4BAAEC,MAAK;4BAAeJ,eAAY;sCAAkB;;sCACrD,qBAACG;4BAAEC,MAAK;4BAASJ,eAAY;sCAAY;;sCACzC,qBAACK;4BAAOL,eAAY;sCAAY;;;;;0BAGpC,qBAACM;gBAAKN,eAAY;0BACfF;;0BAEH,qBAACS;gBAAOP,eAAY;0BAClB,cAAA,qBAACQ;8BAAE;;;;;AAKT,MAAMC,gBAAiD,CAAC,EAAEC,QAAQ,EAAE,iBAClE,sBAACX;QAAIC,eAAY;;0BACf,qBAACW;0BAAG;;0BACJ,sBAACZ;gBAAIC,eAAY;;oBAAqB;oBAAWU,YAAY;;;0BAC7D,sBAACX;gBAAIC,eAAY;;kCACf,qBAACD;wBAAIC,eAAY;kCAAqB;;kCACtC,qBAACD;wBAAIC,eAAY;kCAAgB;;kCACjC,sBAACD;wBAAIC,eAAY;;0CACf,qBAACK;gCAAOL,eAAY;0CAAmB;;0CACvC,qBAACK;gCAAOL,eAAY;0CAAkB;;;;;;;;AAM9C,MAAMY,iBAAkD,CAAC,EAAEF,QAAQ,EAAE,iBACnE,sBAACX;QAAIC,eAAY;;0BACf,qBAACW;0BAAG;;0BACJ,sBAACZ;gBAAIC,eAAY;;oBAAmB;oBAAWU,YAAY;;;0BAC3D,qBAACX;gBAAIC,eAAY;0BACf,cAAA,sBAACa;oBAAOb,eAAY;;sCAClB,qBAACc;4BAAOC,OAAM;sCAAG;;wBAChBL,aAAa,0BACZ;;8CACE,qBAACI;oCAAOC,OAAM;8CAAkB;;8CAChC,qBAACD;oCAAOC,OAAM;8CAAc;;;;wBAG/BL,aAAa,yBACZ;;8CACE,qBAACI;oCAAOC,OAAM;8CAAe;;8CAC7B,qBAACD;oCAAOC,OAAM;8CAAiB;;;;wBAGjC,CAAA,CAACL,YAAYA,aAAa,SAAQ,mBAClC;;8CACE,qBAACI;oCAAOC,OAAM;8CAAgB;;8CAC9B,qBAACD;oCAAOC,OAAM;8CAAmB;;;;;;;0BAKzC,sBAAChB;gBAAIC,eAAY;;kCACf,qBAACgB;kCAAG;;kCACJ,sBAACC;;0CACC,qBAACC;0CACC,cAAA,sBAACC;;sDACC,qBAACC;sDAAG;;sDACJ,qBAACA;sDAAG;;sDACJ,qBAACA;sDAAG;;;;;0CAGR,qBAACC;0CACC,cAAA,sBAACF;;sDACC,qBAACG;sDAAG;;sDACJ,qBAACA;sDAAG;;sDACJ,qBAACA;sDAAG;;;;;;;;;;;AAQhB,MAAMC,YAAsB,kBAC1B,sBAACxB;QAAIC,eAAY;;0BACf,qBAACW;0BAAG;;0BACJ,sBAACT;gBAAIF,eAAY;;kCACf,qBAACK;wBAAOL,eAAY;kCAAc;;kCAClC,qBAACK;wBAAOL,eAAY;kCAAc;;kCAClC,qBAACK;wBAAOL,eAAY;kCAAa;;kCACjC,qBAACK;wBAAOL,eAAY;kCAAiB;;kCACrC,qBAACK;wBAAOL,eAAY;kCAAoB;;;;0BAE1C,qBAACD;gBAAIC,eAAY;0BACf,cAAA,sBAACD;oBAAIC,eAAY;;sCACf,qBAACgB;sCAAG;;sCACJ,qBAACR;4BAAER,eAAY;sCAAgB;;sCAC/B,qBAACQ;4BAAER,eAAY;sCAAe;;sCAC9B,qBAACQ;4BAAER,eAAY;sCAAa;;;;;;;AAMpC,MAAMwB,YAA+C,CAAC,EAAEC,OAAO,EAAE,iBAC/D,sBAAC1B;QAAIC,eAAY;;0BACf,qBAACW;0BAAG;;0BACJ,sBAACe;gBACCC,UAAU,CAACC;oBACTA,EAAEC,cAAc;oBAChBJ;gBACF;;kCAEA,qBAACK;wBACCC,MAAK;wBACLC,aAAY;wBACZhC,eAAY;wBACZiC,QAAQ;;kCAEV,qBAACH;wBACCC,MAAK;wBACLC,aAAY;wBACZhC,eAAY;wBACZiC,QAAQ;;kCAEV,qBAAC5B;wBAAO0B,MAAK;wBAAS/B,eAAY;kCAAe;;;;;;AAOvDkC,SAAS,+BAA+B;IAEtCA,SAAS,uBAAuB;QAC9BC,GAAG,6CAA6C;YAC9C,MAAMC,OAAOC,IAAAA,yBAAc,EAAC;gBAAEC,MAAM;YAAO;YAC3C,MAAMC,eAAeC,IAAAA,iCAAsB,EAAC;YAE5CC,2BAAgB,CAACC,QAAQ,CAACN;YAC1BK,2BAAgB,CAACE,gBAAgB,CAACJ;YAElC,IAAIK,aAAa;YACjB,MAAMC,cAAc;gBAClBD,aAAa;YACf;YAEA,wBAAwB;YACxB,MAAM,EAAEE,QAAQ,EAAEV,MAAMW,SAAS,EAAE,GAAGC,IAAAA,gCAAqB,gBACzD,qBAACnD;0BACC,cAAA,qBAAC2B;oBAAUC,SAASoB;;;YAIxBI,OAAOC,cAAM,CAACC,WAAW,CAAC,eAAeC,iBAAiB;YAE1D,sBAAsB;YACtB,MAAML,UAAUhB,IAAI,CAACmB,cAAM,CAACC,WAAW,CAAC,gBAAgBf,KAAKiB,KAAK;YAClE,MAAMN,UAAUhB,IAAI,CAACmB,cAAM,CAACC,WAAW,CAAC,mBAAmB;YAC3D,MAAMJ,UAAUO,KAAK,CAACJ,cAAM,CAACC,WAAW,CAAC;YAEzC,yCAAyC;YACzCL,uBACE,qBAACjD;0BACC,cAAA,qBAACY;oBAAcC,UAAU6B,aAAa7B,QAAQ;;gBAEhD;gBAAE0B;gBAAMG;gBAAcgB,iBAAiB;YAAK;YAG9C,MAAMC,IAAAA,eAAO,EAAC;gBACZP,OAAOC,cAAM,CAACC,WAAW,CAAC,mBAAmBC,iBAAiB;YAChE;YAEAH,OAAOC,cAAM,CAACO,SAAS,CAAC,cAAcL,iBAAiB;YACvDH,OAAOC,cAAM,CAACC,WAAW,CAAC,uBAAuBO,iBAAiB,CAAC;QACrE;QAEAvB,GAAG,4CAA4C;YAC7C,MAAM,EAAEC,IAAI,EAAE,GAAGY,IAAAA,gCAAqB,gBACpC,qBAACnD;0BACC,cAAA,qBAAC2B;oBAAUC,SAAS,KAAO;;;YAI/BwB,OAAOC,cAAM,CAACC,WAAW,CAAC,eAAeC,iBAAiB;YAE1D,qCAAqC;YACrC,MAAMhB,KAAKkB,KAAK,CAACJ,cAAM,CAACC,WAAW,CAAC;YAEpC,sEAAsE;YACtEF,OAAOC,cAAM,CAACC,WAAW,CAAC,eAAeC,iBAAiB;QAC5D;IACF;IAEAlB,SAAS,4CAA4C;QACnDC,GAAG,gEAAgE;YACjE,MAAMC,OAAOC,IAAAA,yBAAc,EAAC;gBAAEC,MAAM;YAAO;YAC3C,MAAMC,eAAeC,IAAAA,iCAAsB,EAAC;YAE5CC,2BAAgB,CAACC,QAAQ,CAACN;YAC1BK,2BAAgB,CAACE,gBAAgB,CAACJ;YAClCE,2BAAgB,CAACkB,cAAc;YAE/B,qBAAqB;YACrB,MAAM,EAAEb,QAAQ,EAAEV,MAAMW,SAAS,EAAE,GAAGa,IAAAA,4BAAiB,gBACrD,qBAAC/D;0BACC,cAAA,qBAACY;oBAAcC,UAAU6B,aAAa7B,QAAQ;;gBAEhD;YAGFuC,OAAOC,cAAM,CAACC,WAAW,CAAC,mBAAmBC,iBAAiB;YAC9DH,OAAOC,cAAM,CAACC,WAAW,CAAC,uBAAuBO,iBAAiB,CAAC;YAEnE,sDAAsD;YACtD,MAAMX,UAAUO,KAAK,CAACJ,cAAM,CAACC,WAAW,CAAC;YAEzC,qCAAqC;YACrCL,uBACE,qBAACjD;0BACC,cAAA,qBAACe;oBAAeF,UAAU6B,aAAa7B,QAAQ;;gBAEjD;gBAAEmD,cAAc;YAAS;YAG3B,MAAML,IAAAA,eAAO,EAAC;gBACZP,OAAOC,cAAM,CAACC,WAAW,CAAC,qBAAqBC,iBAAiB;YAClE;YAEAH,OAAOC,cAAM,CAACO,SAAS,CAAC,gBAAgBL,iBAAiB;YACzDH,OAAOC,cAAM,CAACC,WAAW,CAAC,qBAAqBO,iBAAiB,CAAC;YAEjE,4CAA4C;YAC5CT,OAAOC,cAAM,CAACO,SAAS,CAAC,oBAAoBL,iBAAiB;YAC7DH,OAAOC,cAAM,CAACO,SAAS,CAAC,gBAAgBL,iBAAiB;QAC3D;IACF;IAEAlB,SAAS,gCAAgC;QACvCA,SAAS,wBAAwB;YAC/B4B,WAAW;gBACTC,gCAAqB,CAACC,MAAM,CAACC,eAAe;gBAC5CF,gCAAqB,CAACC,MAAM,CAACE,uBAAuB;YACtD;YAEA/B,GAAG,gDAAgD;gBACjD,MAAMgC,aAAa9B,IAAAA,yBAAc,EAAC;oBAAEC,MAAM;gBAAO,GAAG;gBACpD,MAAM8B,YAAY5B,IAAAA,iCAAsB,EAAC;gBAEzCC,2BAAgB,CAACC,QAAQ,CAACyB;gBAC1B1B,2BAAgB,CAACE,gBAAgB,CAACyB;gBAElC,MAAM,EAAEhC,IAAI,EAAE,GAAGwB,IAAAA,4BAAiB,gBAChC,qBAAC/D;8BACC,cAAA,qBAACY;wBAAcC,UAAS;;oBAE1B;gBAGF,uCAAuC;gBACvCuC,OAAOC,cAAM,CAACC,WAAW,CAAC,uBAAuBO,iBAAiB,CAAC;gBAEnE,0BAA0B;gBAC1B,MAAMtB,KAAKkB,KAAK,CAACJ,cAAM,CAACC,WAAW,CAAC;gBAEpC,sBAAsB;gBACtB,MAAM,EAAEL,QAAQ,EAAE,GAAGc,IAAAA,4BAAiB,gBACpC,qBAAC/D;8BACC,cAAA,qBAACe;wBAAeF,UAAS;;oBAE3B;gBAGF,sCAAsC;gBACtC,MAAM2D,eAAenB,cAAM,CAACC,WAAW,CAAC;gBACxC,MAAMf,KAAKkC,aAAa,CAACD,cAAc;gBAEvCpB,OAAOoB,cAAcE,WAAW,CAAC;gBAEjC,yDAAyD;gBACzDtB,OAAOC,cAAM,CAACC,WAAW,CAAC,qBAAqBC,iBAAiB;gBAChEH,OAAOC,cAAM,CAACO,SAAS,CAAC,gBAAgBL,iBAAiB;YAC3D;QACF;QAEAlB,SAAS,uBAAuB;YAC9B4B,WAAW;gBACTC,gCAAqB,CAACS,KAAK,CAACC,eAAe;YAC7C;YAEAtC,GAAG,2DAA2D;gBAC5D,MAAMuC,YAAYrC,IAAAA,yBAAc,EAAC;oBAAEC,MAAM;gBAAO,GAAG;gBACnD,MAAMqC,WAAWnC,IAAAA,iCAAsB,EAAC;gBAExC,MAAM,EAAEJ,IAAI,EAAE,GAAGwB,IAAAA,4BAAiB,gBAChC,qBAAC/D;8BACC,cAAA,qBAACe;wBAAeF,UAAS;;oBAE3B;gBAGFuC,OAAOC,cAAM,CAACC,WAAW,CAAC,qBAAqBO,iBAAiB,CAAC;gBAEjE,8BAA8B;gBAC9B,MAAMW,eAAenB,cAAM,CAACC,WAAW,CAAC;gBACxC,MAAMf,KAAKkC,aAAa,CAACD,cAAc;gBAEvCpB,OAAOoB,cAAcE,WAAW,CAAC;gBAEjC,+CAA+C;gBAC/C,MAAMf,IAAAA,eAAO,EAAC;oBACZP,OAAOC,cAAM,CAACC,WAAW,CAAC,qBAAqBC,iBAAiB;gBAClE;YACF;QACF;QAEAlB,SAAS,qBAAqB;YAC5B4B,WAAW;gBACTC,gCAAqB,CAACa,GAAG,CAACC,kBAAkB;YAC9C;YAEA1C,GAAG,oDAAoD;gBACrD,MAAM2C,UAAUzC,IAAAA,yBAAc,EAAC;oBAAEC,MAAM;gBAAO,GAAG;gBACjD,MAAMyC,SAASvC,IAAAA,iCAAsB,EAAC;gBAEtC,MAAM,EAAEJ,IAAI,EAAE,GAAGwB,IAAAA,4BAAiB,gBAChC,qBAAC/D;8BACC,cAAA,qBAACY;wBAAcC,UAAS;;oBAE1B;gBAGFuC,OAAOC,cAAM,CAACC,WAAW,CAAC,uBAAuBO,iBAAiB,CAAC;gBAEnE,+CAA+C;gBAC/CT,OAAOC,cAAM,CAACC,WAAW,CAAC,uBAAuBC,iBAAiB;gBAElE,kCAAkC;gBAClC,MAAMhB,KAAKkB,KAAK,CAACJ,cAAM,CAACC,WAAW,CAAC;gBAEpC,0CAA0C;gBAC1C,MAAM,EAAEL,QAAQ,EAAE,GAAGc,IAAAA,4BAAiB,gBACpC,qBAAC/D;8BACC,cAAA,qBAACe;wBAAeF,UAAS;;oBAE3B;gBAGFuC,OAAOC,cAAM,CAACC,WAAW,CAAC,qBAAqBO,iBAAiB,CAAC;YACnE;QACF;IACF;IAEAxB,SAAS,oBAAoB;QAC3BC,GAAG,yDAAyD;YAC1D,MAAM6C,YAAY3C,IAAAA,yBAAc,EAAC;gBAAEC,MAAM;YAAQ;YAEjDG,2BAAgB,CAACC,QAAQ,CAACsC;YAC1BvC,2BAAgB,CAACwC,SAAS;YAC1BxC,2BAAgB,CAACyC,gBAAgB;YAEjC,MAAM,EAAE9C,IAAI,EAAE,GAAG+C,IAAAA,wBAAa,gBAC5B,qBAACtF;0BACC,cAAA,qBAAC0B;;YAIL0B,OAAOC,cAAM,CAACC,WAAW,CAAC,eAAeC,iBAAiB;YAE1D,8BAA8B;YAC9BH,OAAOC,cAAM,CAACC,WAAW,CAAC,cAAcC,iBAAiB;YAEzD,sBAAsB;YACtBH,OAAOC,cAAM,CAACC,WAAW,CAAC,kBAAkBC,iBAAiB;YAC7DH,OAAOC,cAAM,CAACC,WAAW,CAAC,kBAAkBO,iBAAiB,CAAC;YAE9D,uCAAuC;YACvC,MAAMtB,KAAKkB,KAAK,CAACJ,cAAM,CAACC,WAAW,CAAC;YACpCF,OAAOC,cAAM,CAACC,WAAW,CAAC,gBAAgBC,iBAAiB;YAE3D,MAAMhB,KAAKkB,KAAK,CAACJ,cAAM,CAACC,WAAW,CAAC;YACpCF,OAAOC,cAAM,CAACC,WAAW,CAAC,sBAAsBC,iBAAiB;QACnE;QAEAjB,GAAG,4CAA4C;YAC7C,MAAM6C,YAAY3C,IAAAA,yBAAc,EAAC;gBAAEC,MAAM;YAAQ;YACjD,MAAM8C,gBAAgB;gBACpB5C,IAAAA,iCAAsB,EAAC;gBACvBA,IAAAA,iCAAsB,EAAC;gBACvBA,IAAAA,iCAAsB,EAAC;aACxB;YAEDC,2BAAgB,CAACC,QAAQ,CAACsC;YAC1BvC,2BAAgB,CAACwC,SAAS;YAE1B,MAAM,EAAE7C,IAAI,EAAE,GAAG+C,IAAAA,wBAAa,gBAC5B,qBAACtF;0BACC,cAAA,qBAAC0B;;YAIL,mCAAmC;YACnC0B,OAAOC,cAAM,CAACC,WAAW,CAAC,kBAAkBC,iBAAiB;YAE7D,sCAAsC;YACtC,MAAMhB,KAAKkB,KAAK,CAACJ,cAAM,CAACC,WAAW,CAAC;YAEpC,+DAA+D;YAC/DF,OAAOC,cAAM,CAACC,WAAW,CAAC,eAAeC,iBAAiB;QAC5D;IACF;IAEAlB,SAAS,wBAAwB;QAC/BC,GAAG,mDAAmD;YACpD,MAAMC,OAAOC,IAAAA,yBAAc,EAAC;gBAAEC,MAAM;YAAO;YAE3C,mBAAmB;YACnB+C,iBAAM,CAACC,GAAG,CACRC,SAAI,CAACC,GAAG,CAAC,mBAAmB;gBAC1B,OAAOC,iBAAY,CAACC,KAAK;YAC3B,IACAH,SAAI,CAACC,GAAG,CAAC,yBAAyB;gBAChC,OAAOC,iBAAY,CAACC,KAAK;YAC3B;YAGF,MAAM,EAAEtD,MAAMW,SAAS,EAAE,GAAG4C,IAAAA,8BAAmB,gBAC7C,qBAAC9F;0BACC,cAAA,qBAACe;gBAEH;gBAAEwB;gBAAMmB,iBAAiB;YAAK;YAGhC,kCAAkC;YAClC,MAAMC,IAAAA,eAAO,EAAC;gBACZP,OAAOC,cAAM,CAACC,WAAW,CAAC,qBAAqBC,iBAAiB;YAClE;YAEA,mDAAmD;YACnDH,OAAOC,cAAM,CAACC,WAAW,CAAC,oBAAoBC,iBAAiB;QACjE;QAEAjB,GAAG,2CAA2C;YAC5C,MAAMC,OAAOC,IAAAA,yBAAc,EAAC;gBAAEC,MAAM;YAAO;YAE3C,8BAA8B;YAC9B+C,iBAAM,CAACC,GAAG,CACRC,SAAI,CAACC,GAAG,CAAC,yBAAyB;gBAChC,OAAO,IAAIC,iBAAY,CACrBG,KAAKC,SAAS,CAAC;oBAAEC,QAAQ;gBAAsB,IAC/C;oBACEC,QAAQ;oBACRC,SAAS;wBACP,yBAAyB;wBACzB,qBAAqBC,OAAOC,KAAKC,GAAG,KAAK;wBACzC,eAAe;oBACjB;gBACF;YAEJ;YAGF,MAAM,EAAE/D,MAAMW,SAAS,EAAE,GAAG4C,IAAAA,8BAAmB,gBAC7C,qBAAC9F;0BACC,cAAA,qBAACe;gBAEH;gBAAEwB;gBAAMmB,iBAAiB;YAAK;YAGhC,0BAA0B;YAC1B,MAAMc,eAAenB,cAAM,CAACC,WAAW,CAAC;YACxC,MAAMJ,UAAUuB,aAAa,CAACD,cAAc;YAE5C,yDAAyD;YACzD,MAAMb,IAAAA,eAAO,EAAC;gBACZ,iEAAiE;gBACjEP,OAAOC,cAAM,CAACC,WAAW,CAAC,qBAAqBC,iBAAiB;YAClE;QACF;IACF;IAEAlB,SAAS,+BAA+B;QACtCC,GAAG,oDAAoD;YACrD,MAAMiE,cAAc/D,IAAAA,yBAAc,EAAC;gBAAEgE,iBAAiB;YAAW;YACjE,MAAMC,aAAa9D,IAAAA,iCAAsB,EAAC,UAAU;gBAAE+D,IAAI;YAAW;YAErE,MAAMC,cAAcnE,IAAAA,yBAAc,EAAC;gBAAEgE,iBAAiB;YAAW;YACjE,MAAMI,aAAajE,IAAAA,iCAAsB,EAAC,SAAS;gBAAE+D,IAAI;YAAW;YAEpE,sBAAsB;YACtB,MAAM,EAAEzD,QAAQ,EAAE,GAAG6C,IAAAA,8BAAmB,gBACtC,qBAAC9F;0BACC,cAAA,qBAACY;oBAAcC,UAAS;;gBAE1B;gBAAE0B,MAAMgE;gBAAa7D,cAAc+D;YAAW;YAGhDrD,OAAOC,cAAM,CAACC,WAAW,CAAC,uBAAuBO,iBAAiB,CAAC;YAEnE,6FAA6F;YAC7FZ,uBACE,qBAACjD;0BACC,cAAA,qBAACY;oBAAcC,UAAS;;gBAE1B;gBAAE0B,MAAMoE;gBAAajE,cAAckE;YAAW;YAGhD,8CAA8C;YAC9CxD,OAAOC,cAAM,CAACC,WAAW,CAAC,uBAAuBO,iBAAiB,CAAC;YAEnE,wEAAwE;YACxE,MAAM,EAAEZ,UAAU4D,SAAS,EAAE,GAAGf,IAAAA,8BAAmB,gBACjD,qBAAC9F;0BACC,cAAA,qBAACe;oBAAeF,UAAS;;gBAE3B;gBAAE0B,MAAMoE;gBAAajE,cAAckE;YAAW;YAGhD,yCAAyC;YACzCxD,OAAOC,cAAM,CAACyD,WAAW,CAAC,oBAAoBC,GAAG,CAACxD,iBAAiB;YACnEH,OAAOC,cAAM,CAACO,SAAS,CAAC,kBAAkBL,iBAAiB;QAC7D;IACF;IAEAlB,SAAS,mCAAmC;QAC1CC,GAAG,0CAA0C;YAC3C,MAAMC,OAAOC,IAAAA,yBAAc,EAAC;gBAAEC,MAAM;YAAO;YAC3C,MAAMC,eAAeC,IAAAA,iCAAsB,EAAC;YAE5C,MAAM,EAAEJ,MAAMW,SAAS,EAAE,GAAG4C,IAAAA,8BAAmB,gBAC7C,qBAAC9F;0BACC,cAAA,qBAACY;gBAEH;gBAAE2B;gBAAMG;YAAa;YAGvB,MAAMsE,YAAYC,YAAYX,GAAG;YAEjC,0BAA0B;YAC1B,MAAMpD,UAAUO,KAAK,CAACJ,cAAM,CAACC,WAAW,CAAC;YAEzC,2BAA2B;YAC3B,MAAM4D,UAAUD,YAAYX,GAAG;YAC/B,MAAMa,iBAAiBD,UAAUF;YAEjC,mEAAmE;YACnE5D,OAAO+D,gBAAgBC,YAAY,CAAC;QACtC;QAEA9E,GAAG,qCAAqC;YACtC,MAAMC,OAAOC,IAAAA,yBAAc,EAAC;gBAAEC,MAAM;YAAO;YAC3C,MAAMC,eAAeC,IAAAA,iCAAsB,EAAC;YAE5C,MAAM,EAAEJ,MAAMW,SAAS,EAAED,QAAQ,EAAE,GAAG6C,IAAAA,8BAAmB,gBACvD,qBAAC9F;0BACC,cAAA,qBAACe;oBAAeF,UAAS;;gBAE3B;gBAAE0B;gBAAMG;YAAa;YAGvB,gBAAgB;YAChB,MAAM8B,eAAenB,cAAM,CAACC,WAAW,CAAC;YACxC,MAAMJ,UAAUuB,aAAa,CAACD,cAAc;YAE5CpB,OAAOoB,cAAcE,WAAW,CAAC;YAEjC,yBAAyB;YACzBzB,uBACE,qBAACjD;0BACC,cAAA,qBAACY;oBAAcC,UAAS;;;YAI5BuC,OAAOC,cAAM,CAACC,WAAW,CAAC,mBAAmBC,iBAAiB;YAE9D,+BAA+B;YAC/BN,uBACE,qBAACjD;0BACC,cAAA,qBAACe;oBAAeF,UAAS;;;YAI7B,sFAAsF;YACtFuC,OAAOC,cAAM,CAACC,WAAW,CAAC,qBAAqBC,iBAAiB;QAClE;IACF;AACF"}