c7219b067e9f17e9873ab7aefaf56155
"use strict";
// Mock auth service
jest.mock("@/services/auth", ()=>({
        authService: {
            isAuthenticated: jest.fn(),
            getCurrentUser: jest.fn(),
            login: jest.fn(),
            logout: jest.fn()
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _useAuth = require("../useAuth");
const _auth = require("../../services/auth");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const mockAuthService = _auth.authService;
describe("useAuth Hook", ()=>{
    beforeEach(()=>{
        jest.clearAllMocks();
        // Reset console.error mock
        jest.spyOn(console, "error").mockImplementation(()=>{});
    });
    afterEach(()=>{
        jest.restoreAllMocks();
    });
    it("initializes with loading state", ()=>{
        mockAuthService.isAuthenticated.mockReturnValue(false);
        const { result } = (0, _react1.renderHook)(()=>(0, _useAuth.useAuth)());
        expect(result.current.user).toBeNull();
        expect(result.current.isLoading).toBe(true);
        expect(result.current.isAuthenticated).toBe(false);
    });
    it("loads authenticated user on initialization", async ()=>{
        const mockUser = {
            id: "1",
            email: "test@example.com",
            name: "Test User",
            role: "user",
            organisation_id: "org-1",
            is_active: true,
            created_at: "2023-01-01T00:00:00Z",
            updated_at: "2023-01-01T00:00:00Z"
        };
        mockAuthService.isAuthenticated.mockReturnValue(true);
        mockAuthService.getCurrentUser.mockResolvedValue(mockUser);
        const { result } = (0, _react1.renderHook)(()=>(0, _useAuth.useAuth)());
        await (0, _react1.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false);
        });
        expect(result.current.user).toEqual(mockUser);
        expect(result.current.isAuthenticated).toBe(true);
        expect(mockAuthService.getCurrentUser).toHaveBeenCalledTimes(1);
    });
    it("handles initialization failure", async ()=>{
        mockAuthService.isAuthenticated.mockReturnValue(true);
        mockAuthService.getCurrentUser.mockRejectedValue(new Error("API Error"));
        const { result } = (0, _react1.renderHook)(()=>(0, _useAuth.useAuth)());
        await (0, _react1.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false);
        });
        expect(result.current.user).toBeNull();
        expect(result.current.isAuthenticated).toBe(false);
        expect(mockAuthService.logout).toHaveBeenCalledTimes(1);
        expect(console.error).toHaveBeenCalledWith("Auth initialization failed:", expect.any(Error));
    });
    it("handles login successfully", async ()=>{
        const mockUser = {
            id: "1",
            email: "test@example.com",
            name: "Test User",
            role: "user",
            organisation_id: "org-1",
            is_active: true,
            created_at: "2023-01-01T00:00:00Z",
            updated_at: "2023-01-01T00:00:00Z"
        };
        mockAuthService.isAuthenticated.mockReturnValue(false);
        mockAuthService.login.mockResolvedValue({
            user: mockUser
        });
        const { result } = (0, _react1.renderHook)(()=>(0, _useAuth.useAuth)());
        await (0, _react1.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false);
        });
        await (0, _react1.act)(async ()=>{
            await result.current.login("auth-code", "http://localhost:3000/callback");
        });
        expect(result.current.user).toEqual(mockUser);
        expect(result.current.isAuthenticated).toBe(true);
        expect(mockAuthService.login).toHaveBeenCalledWith({
            code: "auth-code",
            redirect_uri: "http://localhost:3000/callback"
        });
    });
    it("handles login failure", async ()=>{
        const loginError = new Error("Login failed");
        mockAuthService.isAuthenticated.mockReturnValue(false);
        mockAuthService.login.mockRejectedValue(loginError);
        const { result } = (0, _react1.renderHook)(()=>(0, _useAuth.useAuth)());
        await (0, _react1.waitFor)(()=>{
            expect(result.current.isLoading).toBe(false);
        });
        await expect((0, _react1.act)(async ()=>{
            await result.current.login("invalid-code", "http://localhost:3000/callback");
        })).rejects.toThrow("Login failed");
        expect(result.current.user).toBeNull();
        expect(result.current.isAuthenticated).toBe(false);
        expect(console.error).toHaveBeenCalledWith("Login failed:", loginError);
    });
    it("handles logout", async ()=>{
        const mockUser = {
            id: "1",
            email: "test@example.com",
            name: "Test User",
            role: "user",
            organisation_id: "org-1",
            is_active: true,
            created_at: "2023-01-01T00:00:00Z",
            updated_at: "2023-01-01T00:00:00Z"
        };
        mockAuthService.isAuthenticated.mockReturnValue(true);
        mockAuthService.getCurrentUser.mockResolvedValue(mockUser);
        const { result } = (0, _react1.renderHook)(()=>(0, _useAuth.useAuth)());
        await (0, _react1.waitFor)(()=>{
            expect(result.current.user).toEqual(mockUser);
        });
        (0, _react1.act)(()=>{
            result.current.logout();
        });
        expect(result.current.user).toBeNull();
        expect(result.current.isAuthenticated).toBe(false);
        expect(mockAuthService.logout).toHaveBeenCalledTimes(1);
    });
    it("handles user refresh successfully", async ()=>{
        const initialUser = {
            id: "1",
            email: "test@example.com",
            name: "Test User",
            role: "user",
            organisation_id: "org-1",
            is_active: true,
            created_at: "2023-01-01T00:00:00Z",
            updated_at: "2023-01-01T00:00:00Z"
        };
        const updatedUser = {
            ...initialUser,
            name: "Updated User",
            updated_at: "2023-01-02T00:00:00Z"
        };
        mockAuthService.isAuthenticated.mockReturnValue(true);
        mockAuthService.getCurrentUser.mockResolvedValueOnce(initialUser).mockResolvedValueOnce(updatedUser);
        const { result } = (0, _react1.renderHook)(()=>(0, _useAuth.useAuth)());
        await (0, _react1.waitFor)(()=>{
            expect(result.current.user).toEqual(initialUser);
        });
        await (0, _react1.act)(async ()=>{
            await result.current.refreshUser();
        });
        expect(result.current.user).toEqual(updatedUser);
        expect(mockAuthService.getCurrentUser).toHaveBeenCalledTimes(2);
    });
    it("handles user refresh failure", async ()=>{
        const mockUser = {
            id: "1",
            email: "test@example.com",
            name: "Test User",
            role: "user",
            organisation_id: "org-1",
            is_active: true,
            created_at: "2023-01-01T00:00:00Z",
            updated_at: "2023-01-01T00:00:00Z"
        };
        mockAuthService.isAuthenticated.mockReturnValue(true);
        mockAuthService.getCurrentUser.mockResolvedValueOnce(mockUser).mockRejectedValueOnce(new Error("Refresh failed"));
        const { result } = (0, _react1.renderHook)(()=>(0, _useAuth.useAuth)());
        await (0, _react1.waitFor)(()=>{
            expect(result.current.user).toEqual(mockUser);
        });
        await (0, _react1.act)(async ()=>{
            await result.current.refreshUser();
        });
        expect(result.current.user).toBeNull();
        expect(result.current.isAuthenticated).toBe(false);
        expect(mockAuthService.logout).toHaveBeenCalledTimes(1);
        expect(console.error).toHaveBeenCalledWith("User refresh failed:", expect.any(Error));
    });
});
describe("useAuthContext Hook", ()=>{
    const mockAuthContextValue = {
        user: null,
        isAuthenticated: false,
        isLoading: false,
        login: jest.fn(),
        logout: jest.fn(),
        refreshUser: jest.fn()
    };
    it("returns context value when used within provider", ()=>{
        const wrapper = ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_useAuth.AuthContext.Provider, {
                value: mockAuthContextValue,
                children: children
            });
        const { result } = (0, _react1.renderHook)(()=>(0, _useAuth.useAuthContext)(), {
            wrapper
        });
        expect(result.current).toBe(mockAuthContextValue);
    });
    it("throws error when used outside provider", ()=>{
        const { result } = (0, _react1.renderHook)(()=>(0, _useAuth.useAuthContext)());
        expect(result.error).toEqual(new Error("useAuthContext must be used within an AuthProvider"));
    });
    it("provides all required context properties", ()=>{
        const wrapper = ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_useAuth.AuthContext.Provider, {
                value: mockAuthContextValue,
                children: children
            });
        const { result } = (0, _react1.renderHook)(()=>(0, _useAuth.useAuthContext)(), {
            wrapper
        });
        expect(result.current).toHaveProperty("user");
        expect(result.current).toHaveProperty("isAuthenticated");
        expect(result.current).toHaveProperty("isLoading");
        expect(result.current).toHaveProperty("login");
        expect(result.current).toHaveProperty("logout");
        expect(result.current).toHaveProperty("refreshUser");
    });
});

//# sourceMappingURL=data:application/json;base64,