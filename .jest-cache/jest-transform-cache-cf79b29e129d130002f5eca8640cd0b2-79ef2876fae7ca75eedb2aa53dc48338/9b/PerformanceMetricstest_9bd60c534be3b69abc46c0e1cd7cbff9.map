{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/market-edge/__tests__/PerformanceMetrics.test.tsx"],"sourcesContent":["/**\n * Integration test for PerformanceMetrics component\n * \n * Demonstrates multi-tenant testing with API integration and different industry contexts\n */\n\nimport React from 'react'\nimport { screen, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { rest } from 'msw'\nimport { server } from '../../../__tests__/mocks/server'\nimport { mockHandlerUtils } from '../../../__tests__/mocks/handlers'\nimport { \n  renderWithProviders, \n  renderWithIndustry, \n  renderWithSubscription,\n  createMockUser,\n  createMockOrganization,\n  waitForLoadingToFinish\n} from '../../../__tests__/utils/test-utils'\nimport { PerformanceMetrics } from '../PerformanceMetrics'\n\ndescribe('PerformanceMetrics Component', () => {\n  beforeEach(() => {\n    mockHandlerUtils.resetMocks()\n  })\n\n  describe('Basic Rendering', () => {\n    it('renders loading state initially', () => {\n      renderWithProviders(<PerformanceMetrics />)\n      \n      expect(screen.getByTestId('loading-spinner')).toBeInTheDocument()\n      expect(screen.getByText(/loading performance metrics/i)).toBeInTheDocument()\n    })\n\n    it('displays performance metrics after loading', async () => {\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/market performance/i)).toBeInTheDocument()\n      expect(screen.getByText(/revenue growth/i)).toBeInTheDocument()\n      expect(screen.getByText(/competitor analysis/i)).toBeInTheDocument()\n    })\n\n    it('handles API errors gracefully', async () => {\n      // Mock API error\n      server.use(\n        rest.get('*/api/v1/market-edge/dashboard', (req, res, ctx) => {\n          return res(\n            ctx.status(500),\n            ctx.json({ error: 'Internal Server Error' })\n          )\n        })\n      )\n\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitFor(() => {\n        expect(screen.getByText(/failed to load performance metrics/i)).toBeInTheDocument()\n      })\n      \n      expect(screen.getByRole('button', { name: /try again/i })).toBeInTheDocument()\n    })\n  })\n\n  describe('Multi-Tenant Industry Scenarios', () => {\n    it('displays hotel-specific metrics for hotel industry', async () => {\n      renderWithIndustry(<PerformanceMetrics />, 'hotel')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/occupancy rate/i)).toBeInTheDocument()\n      expect(screen.getByText(/adr \\(average daily rate\\)/i)).toBeInTheDocument()\n      expect(screen.getByText(/revpar/i)).toBeInTheDocument()\n    })\n\n    it('displays cinema-specific metrics for cinema industry', async () => {\n      renderWithIndustry(<PerformanceMetrics />, 'cinema')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/ticket sales/i)).toBeInTheDocument()\n      expect(screen.getByText(/box office performance/i)).toBeInTheDocument()\n      expect(screen.getByText(/screening utilization/i)).toBeInTheDocument()\n    })\n\n    it('displays gym-specific metrics for gym industry', async () => {\n      renderWithIndustry(<PerformanceMetrics />, 'gym')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/membership growth/i)).toBeInTheDocument()\n      expect(screen.getByText(/facility utilization/i)).toBeInTheDocument()\n      expect(screen.getByText(/member retention/i)).toBeInTheDocument()\n    })\n\n    it('displays retail-specific metrics for retail industry', async () => {\n      renderWithIndustry(<PerformanceMetrics />, 'retail')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/sales per square foot/i)).toBeInTheDocument()\n      expect(screen.getByText(/inventory turnover/i)).toBeInTheDocument()\n      expect(screen.getByText(/customer conversion/i)).toBeInTheDocument()\n    })\n\n    it('displays b2b-specific metrics for b2b service industry', async () => {\n      renderWithIndustry(<PerformanceMetrics />, 'b2b_service')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/client acquisition cost/i)).toBeInTheDocument()\n      expect(screen.getByText(/monthly recurring revenue/i)).toBeInTheDocument()\n      expect(screen.getByText(/churn rate/i)).toBeInTheDocument()\n    })\n  })\n\n  describe('Subscription Plan Features', () => {\n    it('shows basic metrics for basic subscription', async () => {\n      renderWithSubscription(<PerformanceMetrics />, 'basic')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/basic metrics/i)).toBeInTheDocument()\n      expect(screen.queryByText(/advanced analytics/i)).not.toBeInTheDocument()\n      expect(screen.queryByText(/predictive insights/i)).not.toBeInTheDocument()\n    })\n\n    it('shows enhanced metrics for professional subscription', async () => {\n      renderWithSubscription(<PerformanceMetrics />, 'professional')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/basic metrics/i)).toBeInTheDocument()\n      expect(screen.getByText(/advanced analytics/i)).toBeInTheDocument()\n      expect(screen.queryByText(/predictive insights/i)).not.toBeInTheDocument()\n    })\n\n    it('shows all metrics for enterprise subscription', async () => {\n      renderWithSubscription(<PerformanceMetrics />, 'enterprise')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/basic metrics/i)).toBeInTheDocument()\n      expect(screen.getByText(/advanced analytics/i)).toBeInTheDocument()\n      expect(screen.getByText(/predictive insights/i)).toBeInTheDocument()\n      expect(screen.getByText(/custom reporting/i)).toBeInTheDocument()\n    })\n  })\n\n  describe('User Interactions', () => {\n    it('allows users to refresh metrics', async () => {\n      const user = userEvent.setup()\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      const refreshButton = screen.getByRole('button', { name: /refresh/i })\n      await user.click(refreshButton)\n      \n      expect(screen.getByTestId('loading-spinner')).toBeInTheDocument()\n      \n      await waitForLoadingToFinish()\n      expect(screen.getByText(/market performance/i)).toBeInTheDocument()\n    })\n\n    it('allows users to change time period', async () => {\n      const user = userEvent.setup()\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      const periodSelector = screen.getByRole('combobox', { name: /time period/i })\n      await user.selectOptions(periodSelector, '30d')\n      \n      await waitFor(() => {\n        expect(screen.getByText(/last 30 days/i)).toBeInTheDocument()\n      })\n    })\n\n    it('allows users to export data', async () => {\n      const user = userEvent.setup()\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      const exportButton = screen.getByRole('button', { name: /export/i })\n      await user.click(exportButton)\n      \n      expect(screen.getByText(/export options/i)).toBeInTheDocument()\n      \n      const csvOption = screen.getByRole('button', { name: /export as csv/i })\n      await user.click(csvOption)\n      \n      // Verify download was triggered (this would need to be mocked in real implementation)\n      await waitFor(() => {\n        expect(screen.getByText(/download started/i)).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Feature Flag Integration', () => {\n    it('hides advanced features when feature flags are disabled', async () => {\n      mockHandlerUtils.setMockFeatureFlags({\n        'market_edge_enabled': true,\n        'competitive_analysis': false,\n        'pricing_optimization': false\n      })\n\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/market performance/i)).toBeInTheDocument()\n      expect(screen.queryByText(/competitive analysis/i)).not.toBeInTheDocument()\n      expect(screen.queryByText(/pricing optimization/i)).not.toBeInTheDocument()\n    })\n\n    it('shows all features when feature flags are enabled', async () => {\n      mockHandlerUtils.setMockFeatureFlags({\n        'market_edge_enabled': true,\n        'competitive_analysis': true,\n        'pricing_optimization': true\n      })\n\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/market performance/i)).toBeInTheDocument()\n      expect(screen.getByText(/competitive analysis/i)).toBeInTheDocument()\n      expect(screen.getByText(/pricing optimization/i)).toBeInTheDocument()\n    })\n  })\n\n  describe('Rate Limiting Integration', () => {\n    it('handles rate limit errors appropriately', async () => {\n      server.use(\n        rest.get('*/api/v1/market-edge/dashboard', (req, res, ctx) => {\n          return res(\n            ctx.status(429),\n            ctx.json({\n              error: 'Rate limit exceeded',\n              message: 'Too many requests. Please try again later.',\n            }),\n            ctx.set('X-RateLimit-Limit', '5000'),\n            ctx.set('X-RateLimit-Remaining', '0'),\n            ctx.set('X-RateLimit-Reset', String(Date.now() + 3600))\n          )\n        })\n      )\n\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitFor(() => {\n        expect(screen.getByText(/rate limit exceeded/i)).toBeInTheDocument()\n        expect(screen.getByText(/please try again later/i)).toBeInTheDocument()\n      })\n      \n      expect(screen.getByRole('button', { name: /try again/i })).toBeInTheDocument()\n    })\n  })\n\n  describe('Accessibility', () => {\n    it('has proper ARIA labels and roles', async () => {\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByRole('region', { name: /performance metrics/i })).toBeInTheDocument()\n      expect(screen.getByRole('button', { name: /refresh metrics/i })).toBeInTheDocument()\n      \n      const charts = screen.getAllByRole('img', { name: /performance chart/i })\n      expect(charts.length).toBeGreaterThan(0)\n    })\n\n    it('supports keyboard navigation', async () => {\n      const user = userEvent.setup()\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      const refreshButton = screen.getByRole('button', { name: /refresh/i })\n      refreshButton.focus()\n      \n      await user.keyboard('{Enter}')\n      expect(screen.getByTestId('loading-spinner')).toBeInTheDocument()\n    })\n  })\n\n  describe('Responsive Design', () => {\n    it('adapts layout for mobile screens', async () => {\n      // Mock mobile viewport\n      Object.defineProperty(window, 'innerWidth', { value: 375 })\n      Object.defineProperty(window, 'innerHeight', { value: 667 })\n      \n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByTestId('mobile-layout')).toBeInTheDocument()\n      expect(screen.queryByTestId('desktop-layout')).not.toBeInTheDocument()\n    })\n\n    it('shows full layout for desktop screens', async () => {\n      // Mock desktop viewport\n      Object.defineProperty(window, 'innerWidth', { value: 1920 })\n      Object.defineProperty(window, 'innerHeight', { value: 1080 })\n      \n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByTestId('desktop-layout')).toBeInTheDocument()\n      expect(screen.queryByTestId('mobile-layout')).not.toBeInTheDocument()\n    })\n  })\n})"],"names":["describe","beforeEach","mockHandlerUtils","resetMocks","it","renderWithProviders","PerformanceMetrics","expect","screen","getByTestId","toBeInTheDocument","getByText","waitForLoadingToFinish","server","use","rest","get","req","res","ctx","status","json","error","waitFor","getByRole","name","renderWithIndustry","renderWithSubscription","queryByText","not","user","userEvent","setup","refreshButton","click","periodSelector","selectOptions","exportButton","csvOption","setMockFeatureFlags","message","set","String","Date","now","charts","getAllByRole","length","toBeGreaterThan","focus","keyboard","Object","defineProperty","window","value","queryByTestId"],"mappings":"AAAA;;;;CAIC;;;;;8DAEiB;wBACc;kEACV;qBACD;wBACE;0BACU;2BAQ1B;oCAC4B;;;;;;AAEnCA,SAAS,gCAAgC;IACvCC,WAAW;QACTC,0BAAgB,CAACC,UAAU;IAC7B;IAEAH,SAAS,mBAAmB;QAC1BI,GAAG,mCAAmC;YACpCC,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvCC,OAAOC,cAAM,CAACC,WAAW,CAAC,oBAAoBC,iBAAiB;YAC/DH,OAAOC,cAAM,CAACG,SAAS,CAAC,iCAAiCD,iBAAiB;QAC5E;QAEAN,GAAG,8CAA8C;YAC/CC,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMM,IAAAA,iCAAsB;YAE5BL,OAAOC,cAAM,CAACG,SAAS,CAAC,wBAAwBD,iBAAiB;YACjEH,OAAOC,cAAM,CAACG,SAAS,CAAC,oBAAoBD,iBAAiB;YAC7DH,OAAOC,cAAM,CAACG,SAAS,CAAC,yBAAyBD,iBAAiB;QACpE;QAEAN,GAAG,iCAAiC;YAClC,iBAAiB;YACjBS,cAAM,CAACC,GAAG,CACRC,SAAI,CAACC,GAAG,CAAC,kCAAkC,CAACC,KAAKC,KAAKC;gBACpD,OAAOD,IACLC,IAAIC,MAAM,CAAC,MACXD,IAAIE,IAAI,CAAC;oBAAEC,OAAO;gBAAwB;YAE9C;YAGFjB,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMiB,IAAAA,eAAO,EAAC;gBACZhB,OAAOC,cAAM,CAACG,SAAS,CAAC,wCAAwCD,iBAAiB;YACnF;YAEAH,OAAOC,cAAM,CAACgB,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAa,IAAIf,iBAAiB;QAC9E;IACF;IAEAV,SAAS,mCAAmC;QAC1CI,GAAG,sDAAsD;YACvDsB,IAAAA,6BAAkB,gBAAC,qBAACpB,sCAAkB,OAAK;YAE3C,MAAMM,IAAAA,iCAAsB;YAE5BL,OAAOC,cAAM,CAACG,SAAS,CAAC,oBAAoBD,iBAAiB;YAC7DH,OAAOC,cAAM,CAACG,SAAS,CAAC,gCAAgCD,iBAAiB;YACzEH,OAAOC,cAAM,CAACG,SAAS,CAAC,YAAYD,iBAAiB;QACvD;QAEAN,GAAG,wDAAwD;YACzDsB,IAAAA,6BAAkB,gBAAC,qBAACpB,sCAAkB,OAAK;YAE3C,MAAMM,IAAAA,iCAAsB;YAE5BL,OAAOC,cAAM,CAACG,SAAS,CAAC,kBAAkBD,iBAAiB;YAC3DH,OAAOC,cAAM,CAACG,SAAS,CAAC,4BAA4BD,iBAAiB;YACrEH,OAAOC,cAAM,CAACG,SAAS,CAAC,2BAA2BD,iBAAiB;QACtE;QAEAN,GAAG,kDAAkD;YACnDsB,IAAAA,6BAAkB,gBAAC,qBAACpB,sCAAkB,OAAK;YAE3C,MAAMM,IAAAA,iCAAsB;YAE5BL,OAAOC,cAAM,CAACG,SAAS,CAAC,uBAAuBD,iBAAiB;YAChEH,OAAOC,cAAM,CAACG,SAAS,CAAC,0BAA0BD,iBAAiB;YACnEH,OAAOC,cAAM,CAACG,SAAS,CAAC,sBAAsBD,iBAAiB;QACjE;QAEAN,GAAG,wDAAwD;YACzDsB,IAAAA,6BAAkB,gBAAC,qBAACpB,sCAAkB,OAAK;YAE3C,MAAMM,IAAAA,iCAAsB;YAE5BL,OAAOC,cAAM,CAACG,SAAS,CAAC,2BAA2BD,iBAAiB;YACpEH,OAAOC,cAAM,CAACG,SAAS,CAAC,wBAAwBD,iBAAiB;YACjEH,OAAOC,cAAM,CAACG,SAAS,CAAC,yBAAyBD,iBAAiB;QACpE;QAEAN,GAAG,0DAA0D;YAC3DsB,IAAAA,6BAAkB,gBAAC,qBAACpB,sCAAkB,OAAK;YAE3C,MAAMM,IAAAA,iCAAsB;YAE5BL,OAAOC,cAAM,CAACG,SAAS,CAAC,6BAA6BD,iBAAiB;YACtEH,OAAOC,cAAM,CAACG,SAAS,CAAC,+BAA+BD,iBAAiB;YACxEH,OAAOC,cAAM,CAACG,SAAS,CAAC,gBAAgBD,iBAAiB;QAC3D;IACF;IAEAV,SAAS,8BAA8B;QACrCI,GAAG,8CAA8C;YAC/CuB,IAAAA,iCAAsB,gBAAC,qBAACrB,sCAAkB,OAAK;YAE/C,MAAMM,IAAAA,iCAAsB;YAE5BL,OAAOC,cAAM,CAACG,SAAS,CAAC,mBAAmBD,iBAAiB;YAC5DH,OAAOC,cAAM,CAACoB,WAAW,CAAC,wBAAwBC,GAAG,CAACnB,iBAAiB;YACvEH,OAAOC,cAAM,CAACoB,WAAW,CAAC,yBAAyBC,GAAG,CAACnB,iBAAiB;QAC1E;QAEAN,GAAG,wDAAwD;YACzDuB,IAAAA,iCAAsB,gBAAC,qBAACrB,sCAAkB,OAAK;YAE/C,MAAMM,IAAAA,iCAAsB;YAE5BL,OAAOC,cAAM,CAACG,SAAS,CAAC,mBAAmBD,iBAAiB;YAC5DH,OAAOC,cAAM,CAACG,SAAS,CAAC,wBAAwBD,iBAAiB;YACjEH,OAAOC,cAAM,CAACoB,WAAW,CAAC,yBAAyBC,GAAG,CAACnB,iBAAiB;QAC1E;QAEAN,GAAG,iDAAiD;YAClDuB,IAAAA,iCAAsB,gBAAC,qBAACrB,sCAAkB,OAAK;YAE/C,MAAMM,IAAAA,iCAAsB;YAE5BL,OAAOC,cAAM,CAACG,SAAS,CAAC,mBAAmBD,iBAAiB;YAC5DH,OAAOC,cAAM,CAACG,SAAS,CAAC,wBAAwBD,iBAAiB;YACjEH,OAAOC,cAAM,CAACG,SAAS,CAAC,yBAAyBD,iBAAiB;YAClEH,OAAOC,cAAM,CAACG,SAAS,CAAC,sBAAsBD,iBAAiB;QACjE;IACF;IAEAV,SAAS,qBAAqB;QAC5BI,GAAG,mCAAmC;YACpC,MAAM0B,OAAOC,kBAAS,CAACC,KAAK;YAC5B3B,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMM,IAAAA,iCAAsB;YAE5B,MAAMqB,gBAAgBzB,cAAM,CAACgB,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAW;YACpE,MAAMK,KAAKI,KAAK,CAACD;YAEjB1B,OAAOC,cAAM,CAACC,WAAW,CAAC,oBAAoBC,iBAAiB;YAE/D,MAAME,IAAAA,iCAAsB;YAC5BL,OAAOC,cAAM,CAACG,SAAS,CAAC,wBAAwBD,iBAAiB;QACnE;QAEAN,GAAG,sCAAsC;YACvC,MAAM0B,OAAOC,kBAAS,CAACC,KAAK;YAC5B3B,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMM,IAAAA,iCAAsB;YAE5B,MAAMuB,iBAAiB3B,cAAM,CAACgB,SAAS,CAAC,YAAY;gBAAEC,MAAM;YAAe;YAC3E,MAAMK,KAAKM,aAAa,CAACD,gBAAgB;YAEzC,MAAMZ,IAAAA,eAAO,EAAC;gBACZhB,OAAOC,cAAM,CAACG,SAAS,CAAC,kBAAkBD,iBAAiB;YAC7D;QACF;QAEAN,GAAG,+BAA+B;YAChC,MAAM0B,OAAOC,kBAAS,CAACC,KAAK;YAC5B3B,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMM,IAAAA,iCAAsB;YAE5B,MAAMyB,eAAe7B,cAAM,CAACgB,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAU;YAClE,MAAMK,KAAKI,KAAK,CAACG;YAEjB9B,OAAOC,cAAM,CAACG,SAAS,CAAC,oBAAoBD,iBAAiB;YAE7D,MAAM4B,YAAY9B,cAAM,CAACgB,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAiB;YACtE,MAAMK,KAAKI,KAAK,CAACI;YAEjB,sFAAsF;YACtF,MAAMf,IAAAA,eAAO,EAAC;gBACZhB,OAAOC,cAAM,CAACG,SAAS,CAAC,sBAAsBD,iBAAiB;YACjE;QACF;IACF;IAEAV,SAAS,4BAA4B;QACnCI,GAAG,2DAA2D;YAC5DF,0BAAgB,CAACqC,mBAAmB,CAAC;gBACnC,uBAAuB;gBACvB,wBAAwB;gBACxB,wBAAwB;YAC1B;YAEAlC,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMM,IAAAA,iCAAsB;YAE5BL,OAAOC,cAAM,CAACG,SAAS,CAAC,wBAAwBD,iBAAiB;YACjEH,OAAOC,cAAM,CAACoB,WAAW,CAAC,0BAA0BC,GAAG,CAACnB,iBAAiB;YACzEH,OAAOC,cAAM,CAACoB,WAAW,CAAC,0BAA0BC,GAAG,CAACnB,iBAAiB;QAC3E;QAEAN,GAAG,qDAAqD;YACtDF,0BAAgB,CAACqC,mBAAmB,CAAC;gBACnC,uBAAuB;gBACvB,wBAAwB;gBACxB,wBAAwB;YAC1B;YAEAlC,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMM,IAAAA,iCAAsB;YAE5BL,OAAOC,cAAM,CAACG,SAAS,CAAC,wBAAwBD,iBAAiB;YACjEH,OAAOC,cAAM,CAACG,SAAS,CAAC,0BAA0BD,iBAAiB;YACnEH,OAAOC,cAAM,CAACG,SAAS,CAAC,0BAA0BD,iBAAiB;QACrE;IACF;IAEAV,SAAS,6BAA6B;QACpCI,GAAG,2CAA2C;YAC5CS,cAAM,CAACC,GAAG,CACRC,SAAI,CAACC,GAAG,CAAC,kCAAkC,CAACC,KAAKC,KAAKC;gBACpD,OAAOD,IACLC,IAAIC,MAAM,CAAC,MACXD,IAAIE,IAAI,CAAC;oBACPC,OAAO;oBACPkB,SAAS;gBACX,IACArB,IAAIsB,GAAG,CAAC,qBAAqB,SAC7BtB,IAAIsB,GAAG,CAAC,yBAAyB,MACjCtB,IAAIsB,GAAG,CAAC,qBAAqBC,OAAOC,KAAKC,GAAG,KAAK;YAErD;YAGFvC,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMiB,IAAAA,eAAO,EAAC;gBACZhB,OAAOC,cAAM,CAACG,SAAS,CAAC,yBAAyBD,iBAAiB;gBAClEH,OAAOC,cAAM,CAACG,SAAS,CAAC,4BAA4BD,iBAAiB;YACvE;YAEAH,OAAOC,cAAM,CAACgB,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAa,IAAIf,iBAAiB;QAC9E;IACF;IAEAV,SAAS,iBAAiB;QACxBI,GAAG,oCAAoC;YACrCC,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMM,IAAAA,iCAAsB;YAE5BL,OAAOC,cAAM,CAACgB,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAuB,IAAIf,iBAAiB;YACtFH,OAAOC,cAAM,CAACgB,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAmB,IAAIf,iBAAiB;YAElF,MAAMmC,SAASrC,cAAM,CAACsC,YAAY,CAAC,OAAO;gBAAErB,MAAM;YAAqB;YACvElB,OAAOsC,OAAOE,MAAM,EAAEC,eAAe,CAAC;QACxC;QAEA5C,GAAG,gCAAgC;YACjC,MAAM0B,OAAOC,kBAAS,CAACC,KAAK;YAC5B3B,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMM,IAAAA,iCAAsB;YAE5B,MAAMqB,gBAAgBzB,cAAM,CAACgB,SAAS,CAAC,UAAU;gBAAEC,MAAM;YAAW;YACpEQ,cAAcgB,KAAK;YAEnB,MAAMnB,KAAKoB,QAAQ,CAAC;YACpB3C,OAAOC,cAAM,CAACC,WAAW,CAAC,oBAAoBC,iBAAiB;QACjE;IACF;IAEAV,SAAS,qBAAqB;QAC5BI,GAAG,oCAAoC;YACrC,uBAAuB;YACvB+C,OAAOC,cAAc,CAACC,QAAQ,cAAc;gBAAEC,OAAO;YAAI;YACzDH,OAAOC,cAAc,CAACC,QAAQ,eAAe;gBAAEC,OAAO;YAAI;YAE1DjD,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMM,IAAAA,iCAAsB;YAE5BL,OAAOC,cAAM,CAACC,WAAW,CAAC,kBAAkBC,iBAAiB;YAC7DH,OAAOC,cAAM,CAAC+C,aAAa,CAAC,mBAAmB1B,GAAG,CAACnB,iBAAiB;QACtE;QAEAN,GAAG,yCAAyC;YAC1C,wBAAwB;YACxB+C,OAAOC,cAAc,CAACC,QAAQ,cAAc;gBAAEC,OAAO;YAAK;YAC1DH,OAAOC,cAAc,CAACC,QAAQ,eAAe;gBAAEC,OAAO;YAAK;YAE3DjD,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMM,IAAAA,iCAAsB;YAE5BL,OAAOC,cAAM,CAACC,WAAW,CAAC,mBAAmBC,iBAAiB;YAC9DH,OAAOC,cAAM,CAAC+C,aAAa,CAAC,kBAAkB1B,GAAG,CAACnB,iBAAiB;QACrE;IACF;AACF"}