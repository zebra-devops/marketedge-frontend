{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/__tests__/integration/UserManagementSecurity.test.tsx"],"sourcesContent":["/**\n * User Management Security Integration Tests\n * \n * Tests multi-tenant security isolation for user management features\n */\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { jest } from '@jest/globals'\nimport SuperAdminUserProvisioning from '@/components/admin/SuperAdminUserProvisioning'\nimport OrganizationUserManagement from '@/components/admin/OrganizationUserManagement'\nimport ApplicationAccessMatrix from '@/components/admin/ApplicationAccessMatrix'\nimport { useAuthContext } from '@/hooks/useAuth'\nimport { useOrganisationContext } from '@/components/providers/OrganisationProvider'\nimport { apiService } from '@/services/api'\n\n// Mock dependencies\njest.mock('@/hooks/useAuth')\njest.mock('@/components/providers/OrganisationProvider')\njest.mock('@/services/api')\n\nconst mockUseAuthContext = useAuthContext as jest.MockedFunction<typeof useAuthContext>\nconst mockUseOrganisationContext = useOrganisationContext as jest.MockedFunction<typeof useOrganisationContext>\nconst mockApiService = apiService as jest.Mocked<typeof apiService>\n\ndescribe('User Management Security Tests', () => {\n  let queryClient: QueryClient\n\n  beforeEach(() => {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    })\n    \n    jest.clearAllMocks()\n  })\n\n  const renderWithProviders = (component: React.ReactElement) => {\n    return render(\n      <QueryClientProvider client={queryClient}>\n        {component}\n      </QueryClientProvider>\n    )\n  }\n\n  describe('Super Admin User Provisioning Security', () => {\n    it('should only render for super admin users', () => {\n      // Test regular user - should show access denied\n      mockUseAuthContext.mockReturnValue({\n        user: { id: '1', email: 'user@test.com', role: 'analyst' },\n        isAuthenticated: true,\n        hasRole: jest.fn().mockReturnValue(false),\n        login: jest.fn(),\n        logout: jest.fn(),\n        refreshToken: jest.fn(),\n      })\n      \n      mockUseOrganisationContext.mockReturnValue({\n        currentOrganisation: null,\n        allOrganisations: [],\n        availableIndustries: [],\n        accessibleOrganisations: [],\n        isLoadingCurrent: false,\n        isLoadingAll: false,\n        isLoadingIndustries: false,\n        isLoadingAccessible: false,\n        isSwitching: false,\n        refreshCurrentOrganisation: jest.fn(),\n        refreshAllOrganisations: jest.fn(),\n        createOrganisation: jest.fn(),\n        switchOrganisation: jest.fn(),\n        refreshAccessibleOrganisations: jest.fn(),\n        canManageOrganisations: false,\n        isSuperAdmin: false,\n      })\n\n      renderWithProviders(<SuperAdminUserProvisioning />)\n\n      expect(screen.getByText('Super Admin access required for user provisioning')).toBeInTheDocument()\n      expect(screen.queryByText('Create User')).not.toBeInTheDocument()\n    })\n\n    it('should render full interface for super admin users', () => {\n      mockUseAuthContext.mockReturnValue({\n        user: { id: '1', email: 'admin@test.com', role: 'admin' },\n        isAuthenticated: true,\n        hasRole: jest.fn().mockReturnValue(true),\n        login: jest.fn(),\n        logout: jest.fn(),\n        refreshToken: jest.fn(),\n      })\n      \n      mockUseOrganisationContext.mockReturnValue({\n        currentOrganisation: { id: '1', name: 'Test Org', industry: 'tech' },\n        allOrganisations: [{ id: '1', name: 'Test Org', industry: 'tech' }],\n        availableIndustries: [],\n        accessibleOrganisations: [],\n        isLoadingCurrent: false,\n        isLoadingAll: false,\n        isLoadingIndustries: false,\n        isLoadingAccessible: false,\n        isSwitching: false,\n        refreshCurrentOrganisation: jest.fn(),\n        refreshAllOrganisations: jest.fn(),\n        createOrganisation: jest.fn(),\n        switchOrganisation: jest.fn(),\n        refreshAccessibleOrganisations: jest.fn(),\n        canManageOrganisations: true,\n        isSuperAdmin: true,\n      })\n\n      renderWithProviders(<SuperAdminUserProvisioning />)\n\n      expect(screen.getByText('User Provisioning')).toBeInTheDocument()\n      expect(screen.getByText('Create User')).toBeInTheDocument()\n      expect(screen.getByText('Bulk Create')).toBeInTheDocument()\n    })\n\n    it('should prevent user creation across unauthorized organizations', async () => {\n      mockUseAuthContext.mockReturnValue({\n        user: { id: '1', email: 'admin@test.com', role: 'admin' },\n        isAuthenticated: true,\n        hasRole: jest.fn().mockReturnValue(true),\n        login: jest.fn(),\n        logout: jest.fn(),\n        refreshToken: jest.fn(),\n      })\n      \n      mockUseOrganisationContext.mockReturnValue({\n        currentOrganisation: { id: '1', name: 'Test Org', industry: 'tech' },\n        allOrganisations: [{ id: '1', name: 'Test Org', industry: 'tech' }],\n        availableIndustries: [],\n        accessibleOrganisations: [],\n        isLoadingCurrent: false,\n        isLoadingAll: false,\n        isLoadingIndustries: false,\n        isLoadingAccessible: false,\n        isSwitching: false,\n        refreshCurrentOrganisation: jest.fn(),\n        refreshAllOrganisations: jest.fn(),\n        createOrganisation: jest.fn(),\n        switchOrganisation: jest.fn(),\n        refreshAccessibleOrganisations: jest.fn(),\n        canManageOrganisations: true,\n        isSuperAdmin: true,\n      })\n\n      // Mock API to return 403 for unauthorized organization\n      mockApiService.post.mockRejectedValue({\n        response: { status: 403, data: { detail: 'Access denied to this organization' } }\n      })\n\n      renderWithProviders(<SuperAdminUserProvisioning />)\n\n      // Open create user modal\n      fireEvent.click(screen.getByText('Create User'))\n\n      // Fill form with unauthorized org (simulated)\n      const orgSelect = screen.getByDisplayValue('Select Organization')\n      fireEvent.change(orgSelect, { target: { value: 'unauthorized-org-id' } })\n\n      // Submit should fail with security error\n      const submitButton = screen.getByText('Create User')\n      fireEvent.click(submitButton)\n\n      await waitFor(() => {\n        expect(mockApiService.post).toHaveBeenCalled()\n      })\n    })\n  })\n\n  describe('Organization User Management Security', () => {\n    it('should restrict access to organization admins only', () => {\n      mockUseAuthContext.mockReturnValue({\n        user: { id: '1', email: 'viewer@test.com', role: 'viewer' },\n        isAuthenticated: true,\n        hasRole: jest.fn().mockReturnValue(false),\n        login: jest.fn(),\n        logout: jest.fn(),\n        refreshToken: jest.fn(),\n      })\n      \n      mockUseOrganisationContext.mockReturnValue({\n        currentOrganisation: { id: '1', name: 'Test Org', industry: 'tech' },\n        allOrganisations: [],\n        availableIndustries: [],\n        accessibleOrganisations: [],\n        isLoadingCurrent: false,\n        isLoadingAll: false,\n        isLoadingIndustries: false,\n        isLoadingAccessible: false,\n        isSwitching: false,\n        refreshCurrentOrganisation: jest.fn(),\n        refreshAllOrganisations: jest.fn(),\n        createOrganisation: jest.fn(),\n        switchOrganisation: jest.fn(),\n        refreshAccessibleOrganisations: jest.fn(),\n        canManageOrganisations: false,\n        isSuperAdmin: false,\n      })\n\n      renderWithProviders(<OrganizationUserManagement />)\n\n      expect(screen.getByText('Admin access required for user management')).toBeInTheDocument()\n    })\n\n    it('should only show users from current organization', async () => {\n      mockUseAuthContext.mockReturnValue({\n        user: { id: '1', email: 'admin@test.com', role: 'admin' },\n        isAuthenticated: true,\n        hasRole: jest.fn().mockReturnValue(true),\n        login: jest.fn(),\n        logout: jest.fn(),\n        refreshToken: jest.fn(),\n      })\n      \n      mockUseOrganisationContext.mockReturnValue({\n        currentOrganisation: { id: 'org-1', name: 'Test Org 1', industry: 'tech' },\n        allOrganisations: [],\n        availableIndustries: [],\n        accessibleOrganisations: [{ id: 'org-1', name: 'Test Org 1', industry: 'tech' }],\n        isLoadingCurrent: false,\n        isLoadingAll: false,\n        isLoadingIndustries: false,\n        isLoadingAccessible: false,\n        isSwitching: false,\n        refreshCurrentOrganisation: jest.fn(),\n        refreshAllOrganisations: jest.fn(),\n        createOrganisation: jest.fn(),\n        switchOrganisation: jest.fn(),\n        refreshAccessibleOrganisations: jest.fn(),\n        canManageOrganisations: false,\n        isSuperAdmin: false,\n      })\n\n      // Mock API to return only current org users\n      const mockUsers = [\n        {\n          id: '1',\n          email: 'user1@test.com',\n          first_name: 'User',\n          last_name: 'One',\n          role: 'analyst',\n          organisation_id: 'org-1',\n          is_active: true,\n          created_at: '2024-01-01T00:00:00Z',\n          invitation_status: 'accepted' as const,\n          application_access: {\n            market_edge: true,\n            causal_edge: false,\n            value_edge: false\n          }\n        }\n      ]\n      mockApiService.get.mockResolvedValue(mockUsers)\n\n      renderWithProviders(<OrganizationUserManagement />)\n\n      await waitFor(() => {\n        expect(mockApiService.get).toHaveBeenCalledWith('/organizations/org-1/users')\n        expect(screen.getByText('User One')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Application Access Matrix Security', () => {\n    it('should prevent unauthorized bulk access updates', async () => {\n      mockUseAuthContext.mockReturnValue({\n        user: { id: '1', email: 'admin@test.com', role: 'admin' },\n        isAuthenticated: true,\n        hasRole: jest.fn().mockReturnValue(true),\n        login: jest.fn(),\n        logout: jest.fn(),\n        refreshToken: jest.fn(),\n      })\n      \n      mockUseOrganisationContext.mockReturnValue({\n        currentOrganisation: { id: 'org-1', name: 'Test Org 1', industry: 'tech' },\n        allOrganisations: [],\n        availableIndustries: [],\n        accessibleOrganisations: [{ id: 'org-1', name: 'Test Org 1', industry: 'tech' }],\n        isLoadingCurrent: false,\n        isLoadingAll: false,\n        isLoadingIndustries: false,\n        isLoadingAccessible: false,\n        isSwitching: false,\n        refreshCurrentOrganisation: jest.fn(),\n        refreshAllOrganisations: jest.fn(),\n        createOrganisation: jest.fn(),\n        switchOrganisation: jest.fn(),\n        refreshAccessibleOrganisations: jest.fn(),\n        canManageOrganisations: false,\n        isSuperAdmin: false,\n      })\n\n      // Mock API to return 403 for cross-org access\n      mockApiService.put.mockRejectedValue({\n        response: { status: 403, data: { detail: 'Cross-organization access denied' } }\n      })\n\n      const mockUsers = [\n        {\n          id: '1',\n          email: 'user1@test.com',\n          first_name: 'User',\n          last_name: 'One',\n          role: 'analyst',\n          organisation_id: 'org-1',\n          is_active: true,\n          application_access: {\n            market_edge: true,\n            causal_edge: false,\n            value_edge: false\n          }\n        }\n      ]\n      mockApiService.get.mockResolvedValue(mockUsers)\n\n      renderWithProviders(<ApplicationAccessMatrix />)\n\n      await waitFor(() => {\n        expect(screen.getByText('Application Access Control Matrix')).toBeInTheDocument()\n      })\n\n      // Attempting bulk update should respect organization boundaries\n      // This test verifies that the API enforces the security constraints\n    })\n\n    it('should enforce role-based permissions for access changes', async () => {\n      // Test that only admin users can modify access permissions\n      mockUseAuthContext.mockReturnValue({\n        user: { id: '1', email: 'analyst@test.com', role: 'analyst' },\n        isAuthenticated: true,\n        hasRole: jest.fn().mockReturnValue(false),\n        login: jest.fn(),\n        logout: jest.fn(),\n        refreshToken: jest.fn(),\n      })\n      \n      mockUseOrganisationContext.mockReturnValue({\n        currentOrganisation: { id: 'org-1', name: 'Test Org 1', industry: 'tech' },\n        allOrganisations: [],\n        availableIndustries: [],\n        accessibleOrganisations: [],\n        isLoadingCurrent: false,\n        isLoadingAll: false,\n        isLoadingIndustries: false,\n        isLoadingAccessible: false,\n        isSwitching: false,\n        refreshCurrentOrganisation: jest.fn(),\n        refreshAllOrganisations: jest.fn(),\n        createOrganisation: jest.fn(),\n        switchOrganisation: jest.fn(),\n        refreshAccessibleOrganisations: jest.fn(),\n        canManageOrganisations: false,\n        isSuperAdmin: false,\n      })\n\n      renderWithProviders(<ApplicationAccessMatrix />)\n\n      expect(screen.getByText('Admin access required for application access management')).toBeInTheDocument()\n    })\n  })\n\n  describe('Multi-Tenant Data Isolation', () => {\n    it('should prevent cross-tenant user access', async () => {\n      // Test that users from different organizations cannot access each other's data\n      const orgAdmin = {\n        id: '1',\n        email: 'admin@org1.com',\n        role: 'admin',\n        organisation_id: 'org-1'\n      }\n\n      mockUseAuthContext.mockReturnValue({\n        user: orgAdmin,\n        isAuthenticated: true,\n        hasRole: jest.fn().mockReturnValue(true),\n        login: jest.fn(),\n        logout: jest.fn(),\n        refreshToken: jest.fn(),\n      })\n\n      // Mock API to enforce tenant isolation\n      mockApiService.get.mockImplementation((url: string) => {\n        if (url.includes('org-2')) {\n          return Promise.reject({\n            response: { status: 403, data: { detail: 'Access denied to this organization' } }\n          })\n        }\n        return Promise.resolve([])\n      })\n\n      // Attempting to access users from different org should fail\n      try {\n        await mockApiService.get('/organizations/org-2/users')\n        fail('Should have thrown security error')\n      } catch (error: any) {\n        expect(error.response.status).toBe(403)\n        expect(error.response.data.detail).toBe('Access denied to this organization')\n      }\n    })\n\n    it('should validate organization context in API requests', () => {\n      // Test that API service includes proper organization context headers\n      const mockConfig = { headers: {} }\n      \n      // Mock organization context\n      mockApiService.setOrganizationContext('org-1')\n      \n      // Simulate request interceptor\n      const token = 'mock-token'\n      const organizationId = 'org-1'\n      \n      const config = {\n        ...mockConfig,\n        headers: {\n          ...mockConfig.headers,\n          'Authorization': `Bearer ${token}`,\n          'X-Organization-ID': organizationId\n        }\n      }\n      \n      expect(config.headers['X-Organization-ID']).toBe('org-1')\n      expect(config.headers['Authorization']).toBe('Bearer mock-token')\n    })\n  })\n})\n\ndescribe('Permission Validation Tests', () => {\n  it('should validate super admin permissions', () => {\n    const superAdmin = { role: 'admin', id: '1', email: 'admin@platform.com' }\n    const regularAdmin = { role: 'admin', id: '2', email: 'admin@org.com', organisation_id: 'org-1' }\n    const user = { role: 'analyst', id: '3', email: 'user@org.com', organisation_id: 'org-1' }\n    \n    // Super admin should have cross-org access\n    expect(superAdmin.role === 'admin').toBe(true)\n    \n    // Regular admin should have org-scoped access\n    expect(regularAdmin.role === 'admin' && regularAdmin.organisation_id).toBe('org-1')\n    \n    // Regular user should have limited access\n    expect(user.role !== 'admin').toBe(true)\n  })\n\n  it('should enforce application access permissions', () => {\n    const userAccess = {\n      market_edge: true,\n      causal_edge: false,\n      value_edge: true\n    }\n    \n    // User should only access granted applications\n    expect(userAccess.market_edge).toBe(true)\n    expect(userAccess.causal_edge).toBe(false)\n    expect(userAccess.value_edge).toBe(true)\n  })\n\n  it('should validate invitation token security', () => {\n    const validToken = 'valid-secure-token-123'\n    const expiredToken = 'expired-token'\n    const invalidToken = 'invalid-token'\n    \n    // Mock validation logic\n    const validateToken = (token: string) => {\n      if (token === validToken) return { valid: true, expired: false }\n      if (token === expiredToken) return { valid: true, expired: true }\n      return { valid: false, expired: false }\n    }\n    \n    expect(validateToken(validToken)).toEqual({ valid: true, expired: false })\n    expect(validateToken(expiredToken)).toEqual({ valid: true, expired: true })\n    expect(validateToken(invalidToken)).toEqual({ valid: false, expired: false })\n  })\n})"],"names":["jest","mock","mockUseAuthContext","useAuthContext","mockUseOrganisationContext","useOrganisationContext","mockApiService","apiService","describe","queryClient","beforeEach","QueryClient","defaultOptions","queries","retry","mutations","clearAllMocks","renderWithProviders","component","render","QueryClientProvider","client","it","mockReturnValue","user","id","email","role","isAuthenticated","hasRole","fn","login","logout","refreshToken","currentOrganisation","allOrganisations","availableIndustries","accessibleOrganisations","isLoadingCurrent","isLoadingAll","isLoadingIndustries","isLoadingAccessible","isSwitching","refreshCurrentOrganisation","refreshAllOrganisations","createOrganisation","switchOrganisation","refreshAccessibleOrganisations","canManageOrganisations","isSuperAdmin","SuperAdminUserProvisioning","expect","screen","getByText","toBeInTheDocument","queryByText","not","name","industry","post","mockRejectedValue","response","status","data","detail","fireEvent","click","orgSelect","getByDisplayValue","change","target","value","submitButton","waitFor","toHaveBeenCalled","OrganizationUserManagement","mockUsers","first_name","last_name","organisation_id","is_active","created_at","invitation_status","application_access","market_edge","causal_edge","value_edge","get","mockResolvedValue","toHaveBeenCalledWith","put","ApplicationAccessMatrix","orgAdmin","mockImplementation","url","includes","Promise","reject","resolve","fail","error","toBe","mockConfig","headers","setOrganizationContext","token","organizationId","config","superAdmin","regularAdmin","userAccess","validToken","expiredToken","invalidToken","validateToken","valid","expired","toEqual"],"mappings":"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"}