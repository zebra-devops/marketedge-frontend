{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/test-utils/index.ts"],"sourcesContent":["/**\n * Multi-Tenant Testing Utilities\n * \n * Provides utilities for testing multi-tenant scenarios including:\n * - Custom render functions with providers\n * - Mock data generators\n * - Tenant context setup\n * - API mocking helpers\n * - User interaction utilities\n */\n\nimport React, { ReactElement } from 'react'\nimport { render, RenderOptions, RenderResult } from '@testing-library/react'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport userEvent from '@testing-library/user-event'\nimport { AuthContext } from '../hooks/useAuth'\nimport { ToastProvider } from '../components/providers/ToastProvider'\n\n// Re-export everything from testing-library\nexport * from '@testing-library/react'\nexport { default as userEvent } from '@testing-library/user-event'\n\n// Types for multi-tenant testing\nexport interface TenantContext {\n  tenantId: string\n  organizationName: string\n  industry: 'cinema' | 'hotel' | 'gym' | 'b2b' | 'retail'\n  features: string[]\n  subscription: 'basic' | 'premium' | 'enterprise'\n  limits: {\n    users: number\n    apiCalls: number\n    storage: number\n  }\n}\n\nexport interface MockUser {\n  id: string\n  email: string\n  name: string\n  role: 'admin' | 'manager' | 'user' | 'viewer'\n  organizationId: string\n  permissions: string[]\n  isActive: boolean\n}\n\nexport interface TestOptions extends Omit<RenderOptions, 'wrapper'> {\n  tenant?: Partial<TenantContext>\n  user?: Partial<MockUser>\n  initialRoute?: string\n  enableAuth?: boolean\n  enableQuery?: boolean\n  queryClient?: QueryClient\n}\n\n// Default test contexts\nexport const DEFAULT_TENANT: TenantContext = {\n  tenantId: 'test-tenant-123',\n  organizationName: 'Test Organization',\n  industry: 'b2b',\n  features: ['market-edge', 'analytics', 'reporting'],\n  subscription: 'premium',\n  limits: {\n    users: 100,\n    apiCalls: 10000,\n    storage: 1000,\n  },\n}\n\nexport const DEFAULT_USER: MockUser = {\n  id: 'test-user-456',\n  email: 'test@example.com',\n  name: 'Test User',\n  role: 'user',\n  organizationId: 'test-tenant-123',\n  permissions: ['read:data', 'write:data'],\n  isActive: true,\n}\n\n// Multi-tenant test provider wrapper\ninterface TestProvidersProps {\n  children: React.ReactNode\n  tenant: TenantContext\n  user: MockUser\n  enableAuth: boolean\n  enableQuery: boolean\n  queryClient?: QueryClient\n}\n\nconst TestProviders: React.FC<TestProvidersProps> = ({\n  children,\n  tenant,\n  user,\n  enableAuth,\n  enableQuery,\n  queryClient: providedQueryClient,\n}) => {\n  const queryClient = providedQueryClient || new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n        cacheTime: 0,\n      },\n      mutations: {\n        retry: false,\n      },\n    },\n  })\n\n  let wrappedChildren = React.createElement(React.Fragment, {}, children)\n\n  // Wrap with Query Provider if enabled\n  if (enableQuery) {\n    wrappedChildren = React.createElement(\n      QueryClientProvider,\n      { client: queryClient },\n      wrappedChildren\n    )\n  }\n\n  // Wrap with Auth Provider if enabled\n  if (enableAuth) {\n    const mockAuthValue = {\n      user,\n      isLoading: false,\n      isAuthenticated: true,\n      login: jest.fn(),\n      logout: jest.fn(),\n      refreshUser: jest.fn(),\n    }\n    \n    wrappedChildren = React.createElement(\n      AuthContext.Provider,\n      { value: mockAuthValue },\n      wrappedChildren\n    )\n  }\n\n  // Always wrap with Toast Provider for notifications\n  wrappedChildren = React.createElement(\n    ToastProvider,\n    {},\n    wrappedChildren\n  )\n\n  return wrappedChildren\n}\n\n/**\n * Custom render function with multi-tenant providers\n */\nexport const renderWithProviders = (\n  ui: ReactElement,\n  options: TestOptions = {}\n): RenderResult => {\n  const {\n    tenant = {},\n    user = {},\n    enableAuth = true,\n    enableQuery = true,\n    queryClient,\n    ...renderOptions\n  } = options\n\n  const mergedTenant: TenantContext = { ...DEFAULT_TENANT, ...tenant }\n  const mergedUser: MockUser = { ...DEFAULT_USER, ...user, organizationId: mergedTenant.tenantId }\n\n  const AllTheProviders = ({ children }: { children: React.ReactNode }) => \n    React.createElement(\n      TestProviders,\n      {\n        tenant: mergedTenant,\n        user: mergedUser,\n        enableAuth,\n        enableQuery,\n        queryClient,\n      },\n      children\n    )\n\n  return render(ui, { wrapper: AllTheProviders, ...renderOptions })\n}\n\n/**\n * Render component with specific tenant context\n */\nexport const renderWithTenant = (\n  ui: ReactElement,\n  tenantOverrides: Partial<TenantContext> = {},\n  options: Omit<TestOptions, 'tenant'> = {}\n): RenderResult => {\n  return renderWithProviders(ui, { ...options, tenant: tenantOverrides })\n}\n\n/**\n * Render component with specific user context\n */\nexport const renderWithUser = (\n  ui: ReactElement,\n  userOverrides: Partial<MockUser> = {},\n  options: Omit<TestOptions, 'user'> = {}\n): RenderResult => {\n  return renderWithProviders(ui, { ...options, user: userOverrides })\n}\n\n/**\n * Create a test user event instance with default configuration\n */\nexport const createUserEvent = () => {\n  return userEvent.setup({\n    delay: null, // Disable delays in tests for faster execution\n  })\n}\n\n// Mock data generators for different industries\nexport const mockDataGenerators = {\n  cinema: {\n    venue: (overrides: any = {}) => ({\n      id: 'cinema-venue-1',\n      name: 'Grand Cinema',\n      location: 'Downtown',\n      screens: 12,\n      totalSeats: 2400,\n      ...overrides,\n    }),\n    \n    movie: (overrides: any = {}) => ({\n      id: 'movie-1',\n      title: 'Test Movie',\n      genre: 'Action',\n      duration: 120,\n      rating: 'PG-13',\n      showtimes: ['14:00', '17:00', '20:00'],\n      ...overrides,\n    }),\n    \n    booking: (overrides: any = {}) => ({\n      id: 'booking-1',\n      movieId: 'movie-1',\n      venueId: 'cinema-venue-1',\n      showtime: '20:00',\n      seats: ['A1', 'A2'],\n      totalPrice: 24.99,\n      status: 'confirmed',\n      ...overrides,\n    }),\n  },\n\n  hotel: {\n    property: (overrides: any = {}) => ({\n      id: 'hotel-1',\n      name: 'Grand Hotel',\n      location: 'City Center',\n      stars: 4,\n      totalRooms: 200,\n      amenities: ['wifi', 'pool', 'restaurant'],\n      ...overrides,\n    }),\n    \n    room: (overrides: any = {}) => ({\n      id: 'room-1',\n      number: '101',\n      type: 'standard',\n      price: 120,\n      capacity: 2,\n      amenities: ['wifi', 'tv', 'minibar'],\n      isAvailable: true,\n      ...overrides,\n    }),\n    \n    reservation: (overrides: any = {}) => ({\n      id: 'reservation-1',\n      hotelId: 'hotel-1',\n      roomId: 'room-1',\n      checkIn: '2024-01-15',\n      checkOut: '2024-01-18',\n      guests: 2,\n      totalPrice: 360,\n      status: 'confirmed',\n      ...overrides,\n    }),\n  },\n\n  gym: {\n    facility: (overrides: any = {}) => ({\n      id: 'gym-1',\n      name: 'Fitness Center',\n      location: 'Mall Complex',\n      equipment: ['cardio', 'weights', 'pool'],\n      operatingHours: '06:00-22:00',\n      capacity: 150,\n      ...overrides,\n    }),\n    \n    member: (overrides: any = {}) => ({\n      id: 'member-1',\n      name: 'John Doe',\n      email: 'john@example.com',\n      membershipType: 'premium',\n      joinDate: '2024-01-01',\n      isActive: true,\n      ...overrides,\n    }),\n    \n    checkin: (overrides: any = {}) => ({\n      id: 'checkin-1',\n      memberId: 'member-1',\n      facilityId: 'gym-1',\n      timestamp: '2024-01-15T10:30:00Z',\n      duration: 90,\n      activities: ['cardio', 'weights'],\n      ...overrides,\n    }),\n  },\n\n  retail: {\n    store: (overrides: any = {}) => ({\n      id: 'store-1',\n      name: 'Fashion Store',\n      location: 'Shopping Center',\n      category: 'clothing',\n      area: 1200,\n      employees: 8,\n      ...overrides,\n    }),\n    \n    product: (overrides: any = {}) => ({\n      id: 'product-1',\n      name: 'T-Shirt',\n      category: 'clothing',\n      price: 29.99,\n      stock: 50,\n      sku: 'TS-001',\n      ...overrides,\n    }),\n    \n    sale: (overrides: any = {}) => ({\n      id: 'sale-1',\n      storeId: 'store-1',\n      products: [{ productId: 'product-1', quantity: 2 }],\n      totalAmount: 59.98,\n      timestamp: '2024-01-15T15:30:00Z',\n      paymentMethod: 'credit_card',\n      ...overrides,\n    }),\n  },\n\n  b2b: {\n    client: (overrides: any = {}) => ({\n      id: 'client-1',\n      name: 'Enterprise Corp',\n      industry: 'technology',\n      size: 'large',\n      revenue: 50000000,\n      contractValue: 100000,\n      ...overrides,\n    }),\n    \n    project: (overrides: any = {}) => ({\n      id: 'project-1',\n      name: 'Digital Transformation',\n      clientId: 'client-1',\n      status: 'active',\n      startDate: '2024-01-01',\n      endDate: '2024-12-31',\n      budget: 500000,\n      ...overrides,\n    }),\n    \n    report: (overrides: any = {}) => ({\n      id: 'report-1',\n      projectId: 'project-1',\n      type: 'monthly',\n      period: '2024-01',\n      metrics: { revenue: 25000, costs: 15000, profit: 10000 },\n      ...overrides,\n    }),\n  },\n}\n\n/**\n * Generate mock API response data based on industry\n */\nexport const generateMockApiResponse = <T>(\n  industry: keyof typeof mockDataGenerators,\n  dataType: string,\n  count: number = 1,\n  overrides: any = {}\n): T[] => {\n  const generator = (mockDataGenerators[industry] as any)?.[dataType]\n  \n  if (!generator) {\n    throw new Error(`No mock generator found for ${industry}.${dataType}`)\n  }\n\n  return Array.from({ length: count }, (_, index) => \n    generator({ \n      id: `${dataType}-${index + 1}`,\n      ...overrides \n    })\n  )\n}\n\n/**\n * Create tenant-specific test scenarios\n */\nexport const createTenantScenarios = () => {\n  const scenarios = [\n    {\n      name: 'Cinema Chain',\n      tenant: { \n        industry: 'cinema' as const, \n        organizationName: 'CineMax Theaters',\n        features: ['market-edge', 'competitor-analysis', 'pricing-optimization'],\n        subscription: 'premium' as const,\n      },\n      user: { role: 'manager' as const, permissions: ['read:venues', 'write:showtimes'] },\n    },\n    {\n      name: 'Hotel Group',\n      tenant: { \n        industry: 'hotel' as const, \n        organizationName: 'Luxury Hotels Ltd',\n        features: ['market-edge', 'revenue-management', 'guest-analytics'],\n        subscription: 'enterprise' as const,\n      },\n      user: { role: 'admin' as const, permissions: ['read:all', 'write:all'] },\n    },\n    {\n      name: 'Gym Chain',\n      tenant: { \n        industry: 'gym' as const, \n        organizationName: 'FitLife Centers',\n        features: ['member-analytics', 'capacity-management'],\n        subscription: 'basic' as const,\n      },\n      user: { role: 'user' as const, permissions: ['read:members', 'write:checkins'] },\n    },\n    {\n      name: 'Retail Chain',\n      tenant: { \n        industry: 'retail' as const, \n        organizationName: 'Fashion Forward',\n        features: ['market-edge', 'inventory-optimization', 'sales-analytics'],\n        subscription: 'premium' as const,\n      },\n      user: { role: 'manager' as const, permissions: ['read:stores', 'write:inventory'] },\n    },\n    {\n      name: 'B2B Services',\n      tenant: { \n        industry: 'b2b' as const, \n        organizationName: 'Business Solutions Inc',\n        features: ['market-edge', 'client-analytics', 'project-management'],\n        subscription: 'enterprise' as const,\n      },\n      user: { role: 'admin' as const, permissions: ['read:all', 'write:all', 'admin:users'] },\n    },\n  ]\n\n  return scenarios\n}\n\n/**\n * Utility to wait for async operations to complete\n */\nexport const waitForAsyncOperations = async () => {\n  await new Promise(resolve => setTimeout(resolve, 0))\n}\n\n/**\n * Mock window.location for different tenant subdomains\n */\nexport const mockTenantLocation = (tenantSubdomain: string) => {\n  Object.defineProperty(window, 'location', {\n    writable: true,\n    value: {\n      ...window.location,\n      hostname: `${tenantSubdomain}.platform.local`,\n      origin: `http://${tenantSubdomain}.platform.local:3000`,\n      href: `http://${tenantSubdomain}.platform.local:3000/`,\n    },\n  })\n}\n\n/**\n * Reset all test mocks and state\n */\nexport const resetTestEnvironment = () => {\n  // Reset localStorage\n  localStorage.clear()\n  sessionStorage.clear()\n  \n  // Reset location\n  Object.defineProperty(window, 'location', {\n    writable: true,\n    value: {\n      hostname: 'localhost',\n      port: '3000',\n      protocol: 'http:',\n      pathname: '/',\n      search: '',\n      hash: '',\n      origin: 'http://localhost:3000',\n      href: 'http://localhost:3000',\n      assign: jest.fn(),\n      replace: jest.fn(),\n      reload: jest.fn(),\n    },\n  })\n  \n  // Clear any global state\n  if (window.__PLATFORM_CONFIG__) {\n    delete window.__PLATFORM_CONFIG__\n  }\n}\n\n// Export default render as renderWithProviders for convenience\nexport { renderWithProviders as render }"],"names":["DEFAULT_TENANT","DEFAULT_USER","createTenantScenarios","createUserEvent","generateMockApiResponse","mockDataGenerators","mockTenantLocation","render","renderWithProviders","renderWithTenant","renderWithUser","resetTestEnvironment","userEvent","waitForAsyncOperations","tenantId","organizationName","industry","features","subscription","limits","users","apiCalls","storage","id","email","name","role","organizationId","permissions","isActive","TestProviders","children","tenant","user","enableAuth","enableQuery","queryClient","providedQueryClient","QueryClient","defaultOptions","queries","retry","cacheTime","mutations","wrappedChildren","React","createElement","Fragment","QueryClientProvider","client","mockAuthValue","isLoading","isAuthenticated","login","jest","fn","logout","refreshUser","AuthContext","Provider","value","ToastProvider","ui","options","renderOptions","mergedTenant","mergedUser","AllTheProviders","wrapper","tenantOverrides","userOverrides","setup","delay","cinema","venue","overrides","location","screens","totalSeats","movie","title","genre","duration","rating","showtimes","booking","movieId","venueId","showtime","seats","totalPrice","status","hotel","property","stars","totalRooms","amenities","room","number","type","price","capacity","isAvailable","reservation","hotelId","roomId","checkIn","checkOut","guests","gym","facility","equipment","operatingHours","member","membershipType","joinDate","checkin","memberId","facilityId","timestamp","activities","retail","store","category","area","employees","product","stock","sku","sale","storeId","products","productId","quantity","totalAmount","paymentMethod","b2b","size","revenue","contractValue","project","clientId","startDate","endDate","budget","report","projectId","period","metrics","costs","profit","dataType","count","generator","Error","Array","from","length","_","index","scenarios","Promise","resolve","setTimeout","tenantSubdomain","Object","defineProperty","window","writable","hostname","origin","href","localStorage","clear","sessionStorage","port","protocol","pathname","search","hash","assign","replace","reload","__PLATFORM_CONFIG__"],"mappings":"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"}