{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/services/__tests__/auth.test.ts"],"sourcesContent":["/**\n * Authentication Service Tests\n * Comprehensive tests achieving 85%+ coverage for auth.ts\n */\n\nimport { AuthService, authService } from '../auth'\nimport { LoginRequest } from '@/types/auth'\n\n// Mock js-cookie\nconst mockCookies = {\n  set: jest.fn(),\n  get: jest.fn(),\n  remove: jest.fn(),\n}\njest.mock('js-cookie', () => mockCookies)\n\n// Mock window.location for logout redirect\nconst mockLocation = { href: '' }\nObject.defineProperty(window, 'location', { value: mockLocation, writable: true })\n\ndescribe('AuthService', () => {\n  let service: AuthService\n\n  beforeEach(() => {\n    service = new AuthService()\n    jest.clearAllMocks()\n    mockLocation.href = ''\n  })\n\n  describe('login', () => {\n    const validLoginRequest: LoginRequest = {\n      code: 'valid-auth-code',\n      redirect_uri: 'http://localhost:3000/callback',\n    }\n\n    it('should successfully login and set cookies', async () => {\n      const result = await service.login(validLoginRequest)\n\n      expect(mockCookies.set).toHaveBeenCalledWith('access_token', 'mock-jwt-token', { expires: 1 })\n      expect(mockCookies.set).toHaveBeenCalledWith('refresh_token', 'mock-refresh-token', { expires: 7 })\n      expect(result.access_token).toBe('mock-jwt-token')\n    })\n\n    it('should reject with invalid credentials', async () => {\n      const invalidRequest: LoginRequest = {\n        code: 'invalid-code', \n        redirect_uri: 'http://localhost:3000/callback',\n      }\n\n      await expect(service.login(invalidRequest)).rejects.toThrow()\n    })\n  })\n\n  describe('getCurrentUser', () => {\n    it('should fetch user when authenticated', async () => {\n      mockCookies.get.mockImplementation((name) => name === 'access_token' ? 'valid-token' : undefined)\n\n      const user = await service.getCurrentUser()\n\n      expect(user.id).toBe('test-user-456')\n      expect(user.email).toBe('test@example.com')\n    })\n\n    it('should handle unauthenticated request', async () => {\n      mockCookies.get.mockReturnValue(undefined)\n\n      await expect(service.getCurrentUser()).rejects.toThrow()\n    })\n  })\n\n  describe('getAuth0Url', () => {\n    it('should return Auth0 authorization URL', async () => {\n      const redirectUri = 'http://localhost:3000/callback'\n      \n      const result = await service.getAuth0Url(redirectUri)\n      \n      expect(result.auth_url).toContain('auth0.com/authorize')\n      expect(result.auth_url).toContain(encodeURIComponent(redirectUri))\n    })\n\n    it('should handle special characters in redirect URI', async () => {\n      const specialUri = 'http://localhost:3000/callback?test=value&other=123'\n      \n      const result = await service.getAuth0Url(specialUri)\n      \n      expect(result.auth_url).toContain(encodeURIComponent(specialUri))\n    })\n  })\n\n  describe('logout', () => {\n    it('should remove cookies and redirect', () => {\n      service.logout()\n\n      expect(mockCookies.remove).toHaveBeenCalledWith('access_token')\n      expect(mockCookies.remove).toHaveBeenCalledWith('refresh_token')\n      expect(mockLocation.href).toBe('/login')\n    })\n  })\n\n  describe('getToken', () => {\n    it('should return token when exists', () => {\n      mockCookies.get.mockReturnValue('test-token')\n\n      const token = service.getToken()\n\n      expect(mockCookies.get).toHaveBeenCalledWith('access_token')\n      expect(token).toBe('test-token')\n    })\n\n    it('should return undefined when no token', () => {\n      mockCookies.get.mockReturnValue(undefined)\n\n      const token = service.getToken()\n\n      expect(token).toBeUndefined()\n    })\n\n    it('should return empty string', () => {\n      mockCookies.get.mockReturnValue('')\n\n      const token = service.getToken()\n\n      expect(token).toBe('')\n    })\n  })\n\n  describe('isAuthenticated', () => {\n    it('should return true when token exists', () => {\n      mockCookies.get.mockReturnValue('valid-token')\n\n      expect(service.isAuthenticated()).toBe(true)\n    })\n\n    it('should return false when no token', () => {\n      mockCookies.get.mockReturnValue(undefined)\n\n      expect(service.isAuthenticated()).toBe(false)\n    })\n\n    it('should return false for empty token', () => {\n      mockCookies.get.mockReturnValue('')\n\n      expect(service.isAuthenticated()).toBe(false)\n    })\n\n    it('should return false for null token', () => {\n      mockCookies.get.mockReturnValue(null)\n\n      expect(service.isAuthenticated()).toBe(false)\n    })\n  })\n\n  describe('Multi-tenant scenarios', () => {\n    it('should handle different tenant login codes', async () => {\n      const hotelLogin: LoginRequest = {\n        code: 'test-auth-code',\n        redirect_uri: 'http://hotel.platform.com/callback',\n      }\n\n      const result = await service.login(hotelLogin)\n\n      expect(result.user.organisation_id).toBe('test-tenant-123')\n    })\n\n    it('should maintain tenant context in token', () => {\n      mockCookies.get.mockReturnValue('tenant-specific-token')\n\n      const token = service.getToken()\n      expect(token).toBe('tenant-specific-token')\n    })\n  })\n\n  describe('Error handling', () => {\n    it('should handle cookie errors gracefully', () => {\n      mockCookies.get.mockImplementation(() => { throw new Error('Cookie error') })\n\n      expect(() => service.getToken()).toThrow('Cookie error')\n      expect(() => service.isAuthenticated()).toThrow('Cookie error')\n    })\n\n    it('should still logout even if cookie removal fails', () => {\n      mockCookies.remove.mockImplementation(() => { throw new Error('Remove failed') })\n\n      expect(() => service.logout()).not.toThrow()\n      expect(mockLocation.href).toBe('/login')\n    })\n  })\n})\n\ndescribe('Singleton authService', () => {\n  it('should export singleton instance', () => {\n    expect(authService).toBeInstanceOf(AuthService)\n  })\n\n  it('should maintain same instance', () => {\n    expect(authService).toBe(authService)\n  })\n})"],"names":["jest","mock","mockCookies","set","fn","get","remove","mockLocation","href","Object","defineProperty","window","value","writable","describe","service","beforeEach","AuthService","clearAllMocks","validLoginRequest","code","redirect_uri","it","result","login","expect","toHaveBeenCalledWith","expires","access_token","toBe","invalidRequest","rejects","toThrow","mockImplementation","name","undefined","user","getCurrentUser","id","email","mockReturnValue","redirectUri","getAuth0Url","auth_url","toContain","encodeURIComponent","specialUri","logout","token","getToken","toBeUndefined","isAuthenticated","hotelLogin","organisation_id","Error","not","authService","toBeInstanceOf"],"mappings":"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"}