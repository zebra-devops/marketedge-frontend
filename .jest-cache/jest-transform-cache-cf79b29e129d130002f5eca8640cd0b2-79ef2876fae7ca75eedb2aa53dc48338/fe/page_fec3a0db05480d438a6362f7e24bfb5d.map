{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/app/login/page.tsx"],"sourcesContent":["'use client'\n\nimport { useEffect, useState, useRef } from 'react'\nimport { useRouter, useSearchParams } from 'next/navigation'\nimport { useAuthContext } from '@/hooks/useAuth'\nimport { authService } from '@/services/auth'\nimport Button from '@/components/ui/Button'\nimport LoadingSpinner from '@/components/ui/LoadingSpinner'\nimport toast from 'react-hot-toast'\n\nexport default function LoginPage() {\n  // Add this temporarily to see if env vars are loaded\n  console.log('Auth0 Domain:', process.env.NEXT_PUBLIC_AUTH0_DOMAIN);\n  console.log('Auth0 Client ID:', process.env.NEXT_PUBLIC_AUTH0_CLIENT_ID);\n  \n  const [isLoading, setIsLoading] = useState(false)\n  const [isProcessingCallback, setIsProcessingCallback] = useState(false)\n  const { user, login } = useAuthContext()\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  \n  // Use ref to prevent multiple processing\n  const processedCodeRef = useRef<string | null>(null)\n  const isProcessingRef = useRef(false)\n\n  useEffect(() => {\n    console.log('LoginPage useEffect triggered')\n    \n    if (user) {\n      console.log('User already logged in, redirecting to dashboard')\n      router.push('/dashboard')\n      return\n    }\n\n    const code = searchParams.get('code')\n    const error = searchParams.get('error')\n\n    console.log('URL params - code:', code?.substring(0, 10) + '...', 'error:', error)\n    console.log('Processing state - processedCode:', processedCodeRef.current?.substring(0, 10) + '...', 'isProcessing:', isProcessingRef.current)\n\n    if (error) {\n      toast.error(`Authentication error: ${error}`)\n      // Clear URL parameters\n      window.history.replaceState({}, document.title, window.location.pathname)\n      return\n    }\n\n    if (code && code !== processedCodeRef.current && !isProcessingRef.current) {\n      console.log('Processing new authorization code')\n      processedCodeRef.current = code\n      isProcessingRef.current = true\n      \n      // Immediately clear URL to prevent reuse\n      window.history.replaceState({}, document.title, window.location.pathname)\n      handleCallback(code)\n    }\n  }, [user, searchParams, router])\n\n  const handleCallback = async (code: string) => {\n    setIsProcessingCallback(true)\n    try {\n      console.log('Processing auth code:', code.substring(0, 10) + '...')\n      const redirectUri = `${window.location.origin}/callback`\n      await login({ code, redirect_uri: redirectUri })\n      toast.success('Login successful!')\n      router.push('/dashboard')\n    } catch (error) {\n      console.error('Login callback failed:', error)\n      toast.error('Login failed. Please get a new authorization code.')\n      // Reset refs to allow fresh login attempt\n      processedCodeRef.current = null\n      isProcessingRef.current = false\n    } finally {\n      setIsProcessingCallback(false)\n    }\n  }\n\n  const handleLogin = async () => {\n    setIsLoading(true)\n    // Reset refs before new login attempt\n    processedCodeRef.current = null\n    isProcessingRef.current = false\n    \n    try {\n      const redirectUri = `${window.location.origin}/callback`\n      \n      // Check for organization hint in URL parameters\n      const orgHint = searchParams.get('org') || undefined\n      \n      const { auth_url } = await authService.getAuth0Url(\n        redirectUri,\n        undefined, // no additional scopes for now\n        orgHint // organization hint for multi-tenant routing\n      )\n      \n      console.log('Redirecting to Auth0 with tenant context:', { auth_url, orgHint })\n      window.location.href = auth_url\n    } catch (error) {\n      console.error('Failed to get Auth0 URL:', error)\n      toast.error('Failed to initiate login. Please try again.')\n      setIsLoading(false)\n    }\n  }\n\n  const clearSession = () => {\n    // Clear any stored tokens\n    localStorage.clear()\n    sessionStorage.clear()\n    // Clear URL parameters\n    window.history.replaceState({}, document.title, window.location.pathname)\n    // Reset refs\n    processedCodeRef.current = null\n    isProcessingRef.current = false\n    setIsProcessingCallback(false)\n    toast.success('Session cleared. Try logging in again.')\n  }\n\n  if (isProcessingCallback) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-gray-50\">\n        <div className=\"text-center\">\n          <LoadingSpinner size=\"lg\" />\n          <p className=\"mt-4 text-gray-600\">Processing login...</p>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 py-12 px-4 sm:px-6 lg:px-8\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div>\n          <h2 className=\"mt-6 text-center text-3xl font-extrabold text-gray-900\">\n            Sign in to Platform Wrapper\n          </h2>\n          <p className=\"mt-2 text-center text-sm text-gray-600\">\n            Access your business intelligence tools\n          </p>\n        </div>\n        <div className=\"mt-8 space-y-6\">\n          <div className=\"rounded-md shadow-sm space-y-3\">\n            <Button\n              onClick={handleLogin}\n              isLoading={isLoading}\n              className=\"group relative w-full flex justify-center py-3 px-4 text-sm font-medium rounded-md\"\n              size=\"lg\"\n            >\n              Sign in with Auth0\n            </Button>\n            <Button\n              onClick={clearSession}\n              className=\"group relative w-full flex justify-center py-2 px-4 text-sm font-medium rounded-md bg-gray-200 hover:bg-gray-300 text-gray-700\"\n              size=\"sm\"\n            >\n              Clear Session & Get Fresh Code\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"],"names":["LoginPage","console","log","process","env","NEXT_PUBLIC_AUTH0_DOMAIN","NEXT_PUBLIC_AUTH0_CLIENT_ID","isLoading","setIsLoading","useState","isProcessingCallback","setIsProcessingCallback","user","login","useAuthContext","router","useRouter","searchParams","useSearchParams","processedCodeRef","useRef","isProcessingRef","useEffect","push","code","get","error","substring","current","toast","window","history","replaceState","document","title","location","pathname","handleCallback","redirectUri","origin","redirect_uri","success","handleLogin","orgHint","undefined","auth_url","authService","getAuth0Url","href","clearSession","localStorage","clear","sessionStorage","div","className","LoadingSpinner","size","p","h2","Button","onClick"],"mappings":"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"}