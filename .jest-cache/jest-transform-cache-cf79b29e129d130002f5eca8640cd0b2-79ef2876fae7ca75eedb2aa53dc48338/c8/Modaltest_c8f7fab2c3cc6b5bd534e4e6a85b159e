efb718c901e020d82bb8a3e4d5c0ac15
"use strict";
// Mock Headless UI components
jest.mock("@headlessui/react", ()=>({
        Dialog: {
            Root: ({ children, show })=>show ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "modal-root",
                    children: children
                }) : null,
            Panel: ({ children, className })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "modal-panel",
                    className: className,
                    children: children
                }),
            Title: ({ children, as: Component = "h3", className })=>/*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {
                    "data-testid": "modal-title",
                    className: className,
                    children: children
                })
        },
        Transition: {
            Root: ({ children, show })=>show ? /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "transition-root",
                    children: children
                }) : null,
            Child: ({ children })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "transition-child",
                    children: children
                })
        }
    }));
// Mock Heroicons
jest.mock("@heroicons/react/24/outline", ()=>({
        XMarkIcon: ({ className })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                "data-testid": "close-icon",
                className: className,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("path", {
                    d: "close-icon"
                })
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _testutils = require("../../../test-utils");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _Modal = /*#__PURE__*/ _interop_require_default(require("../Modal"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("Modal Component", ()=>{
    const user = _userevent.default.setup();
    const defaultProps = {
        isOpen: true,
        onClose: jest.fn(),
        title: "Test Modal",
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
            children: "Modal content"
        })
    };
    beforeEach(()=>{
        jest.clearAllMocks();
    });
    it("renders when isOpen is true", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps
        }));
        expect(_testutils.screen.getByTestId("modal-root")).toBeInTheDocument();
        expect(_testutils.screen.getByTestId("modal-panel")).toBeInTheDocument();
        expect(_testutils.screen.getByTestId("modal-title")).toBeInTheDocument();
        expect(_testutils.screen.getByText("Test Modal")).toBeInTheDocument();
        expect(_testutils.screen.getByText("Modal content")).toBeInTheDocument();
    });
    it("does not render when isOpen is false", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps,
            isOpen: false
        }));
        expect(_testutils.screen.queryByTestId("modal-root")).not.toBeInTheDocument();
        expect(_testutils.screen.queryByText("Test Modal")).not.toBeInTheDocument();
        expect(_testutils.screen.queryByText("Modal content")).not.toBeInTheDocument();
    });
    it("renders with default medium maxWidth", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps
        }));
        const panel = _testutils.screen.getByTestId("modal-panel");
        expect(panel).toHaveClass("max-w-md");
    });
    it("renders with different maxWidth sizes", ()=>{
        const sizes = [
            "sm",
            "md",
            "lg",
            "xl",
            "2xl"
        ];
        sizes.forEach((size)=>{
            const { unmount } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
                ...defaultProps,
                maxWidth: size
            }));
            const panel = _testutils.screen.getByTestId("modal-panel");
            expect(panel).toHaveClass(`max-w-${size}`);
            unmount();
        });
    });
    it("calls onClose when close button is clicked", async ()=>{
        const onClose = jest.fn();
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps,
            onClose: onClose
        }));
        const closeButton = _testutils.screen.getByRole("button");
        await user.click(closeButton);
        expect(onClose).toHaveBeenCalledTimes(1);
    });
    it("has proper accessibility attributes", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps
        }));
        const closeButton = _testutils.screen.getByRole("button");
        expect(closeButton).toHaveAttribute("type", "button");
        // Screen reader text for close button
        expect(_testutils.screen.getByText("Close")).toBeInTheDocument();
        expect(_testutils.screen.getByText("Close")).toHaveClass("sr-only");
        const closeIcon = _testutils.screen.getByTestId("close-icon");
        expect(closeIcon).toHaveAttribute("aria-hidden", "true");
    });
    it("renders title as h3 element", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps
        }));
        const title = _testutils.screen.getByTestId("modal-title");
        expect(title.tagName).toBe("H3");
        expect(title).toHaveClass("text-lg", "font-semibold", "leading-6", "text-gray-900", "mb-4");
    });
    it("renders custom children content", ()=>{
        const customContent = /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                    children: "Custom paragraph"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                    children: "Custom button"
                })
            ]
        });
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps,
            children: customContent
        }));
        expect(_testutils.screen.getByText("Custom paragraph")).toBeInTheDocument();
        expect(_testutils.screen.getByRole("button", {
            name: /custom button/i
        })).toBeInTheDocument();
    });
    it("has proper modal styling classes", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps
        }));
        const panel = _testutils.screen.getByTestId("modal-panel");
        expect(panel).toHaveClass("relative", "transform", "overflow-hidden", "rounded-lg", "bg-white", "px-4", "pb-4", "pt-5", "text-left", "shadow-xl", "transition-all");
    });
    it("close button has proper styling", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps
        }));
        const closeButton = _testutils.screen.getByRole("button");
        expect(closeButton).toHaveClass("rounded-md", "bg-white", "text-gray-400", "hover:text-gray-500", "focus:outline-none", "focus:ring-2", "focus:ring-indigo-500", "focus:ring-offset-2");
    });
    it("supports keyboard navigation", async ()=>{
        const onClose = jest.fn();
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps,
            onClose: onClose
        }));
        const closeButton = _testutils.screen.getByRole("button");
        closeButton.focus();
        expect(closeButton).toHaveFocus();
        await user.keyboard("{Enter}");
        expect(onClose).toHaveBeenCalledTimes(1);
    });
    it("renders with proper responsive classes", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps
        }));
        const panel = _testutils.screen.getByTestId("modal-panel");
        expect(panel).toHaveClass("sm:my-8", "sm:w-full", "sm:p-6");
    });
    it("maintains focus management", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps
        }));
        // Modal should be focusable for screen readers
        const modal = _testutils.screen.getByTestId("modal-root");
        expect(modal).toBeInTheDocument();
    });
    it("handles dynamic title changes", ()=>{
        const { rerender } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps,
            title: "Original Title"
        }));
        expect(_testutils.screen.getByText("Original Title")).toBeInTheDocument();
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps,
            title: "Updated Title"
        }));
        expect(_testutils.screen.getByText("Updated Title")).toBeInTheDocument();
        expect(_testutils.screen.queryByText("Original Title")).not.toBeInTheDocument();
    });
    it("handles dynamic content changes", ()=>{
        const { rerender } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Original Content"
            })
        }));
        expect(_testutils.screen.getByText("Original Content")).toBeInTheDocument();
        rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Modal.default, {
            ...defaultProps,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: "Updated Content"
            })
        }));
        expect(_testutils.screen.getByText("Updated Content")).toBeInTheDocument();
        expect(_testutils.screen.queryByText("Original Content")).not.toBeInTheDocument();
    });
});

//# sourceMappingURL=data:application/json;base64,