{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/lib/auth.ts"],"sourcesContent":["// Simple cookie utility\nfunction getCookie(name: string): string | undefined {\n  const value = `; ${document.cookie}`;\n  const parts = value.split(`; ${name}=`);\n  if (parts.length === 2) {\n    return parts.pop()?.split(';').shift();\n  }\n  return undefined;\n}\n\nexport class AuthError extends Error {\n  constructor(message: string, public statusCode?: number) {\n    super(message);\n    this.name = 'AuthError';\n  }\n}\n\nexport interface AuthHeaders {\n  'Content-Type'?: string;\n  'Authorization': string;\n}\n\n/**\n * Get authentication headers for API requests\n * Safely extracts token from httpOnly cookies\n */\nexport function getAuthHeaders(contentType: string = 'application/json'): AuthHeaders {\n  const token = getCookie('access_token');\n  \n  if (!token) {\n    throw new AuthError('No authentication token found', 401);\n  }\n\n  const headers: AuthHeaders = {\n    'Authorization': `Bearer ${token}`\n  };\n\n  if (contentType) {\n    headers['Content-Type'] = contentType;\n  }\n\n  return headers;\n}\n\n/**\n * Make authenticated API request with enhanced tenant context and error handling\n */\nexport async function authenticatedFetch(\n  url: string,\n  options: RequestInit = {},\n  includeCredentials: boolean = true\n): Promise<Response> {\n  try {\n    const headers = getAuthHeaders();\n    \n    // Add tenant isolation headers for multi-tenant security\n    const enhancedHeaders: HeadersInit = {\n      ...headers,\n      'X-Tenant-Context': 'isolated', // Ensure tenant isolation\n      'X-Client-Version': '1.0.0', // For API versioning\n      'X-Request-Source': 'frontend-app', // Request source tracking\n      ...options.headers,\n    };\n\n    const requestOptions: RequestInit = {\n      ...options,\n      headers: enhancedHeaders,\n    };\n\n    // Include credentials for cookie-based auth if enabled\n    if (includeCredentials) {\n      requestOptions.credentials = 'include';\n    }\n\n    const response = await fetch(url, requestOptions);\n\n    // Handle authentication errors with enhanced tenant context\n    if (response.status === 401) {\n      // Check if it's a tenant-specific auth error\n      const tenantError = response.headers.get('X-Tenant-Error');\n      if (tenantError) {\n        console.error('Tenant authentication error:', tenantError);\n      }\n\n      // Clear invalid tokens and redirect to login\n      document.cookie = 'access_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; httpOnly';\n      document.cookie = 'refresh_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; httpOnly';\n      \n      // Clear tenant-specific session data\n      localStorage.removeItem('tenant_info');\n      localStorage.removeItem('user_permissions');\n      \n      window.location.href = '/login';\n      throw new AuthError('Authentication failed - please log in again', 401);\n    }\n\n    if (response.status === 403) {\n      // Enhanced permission error with tenant context\n      const permissionError = response.headers.get('X-Permission-Error');\n      const requiredPermission = response.headers.get('X-Required-Permission');\n      \n      let errorMessage = 'Insufficient permissions';\n      if (requiredPermission) {\n        errorMessage += ` - requires: ${requiredPermission}`;\n      }\n      if (permissionError) {\n        errorMessage += ` (${permissionError})`;\n      }\n      \n      throw new AuthError(errorMessage, 403);\n    }\n\n    // Handle tenant isolation errors (custom status for cross-tenant violations)\n    if (response.status === 422) {\n      const tenantViolation = response.headers.get('X-Tenant-Violation');\n      if (tenantViolation) {\n        throw new AuthError(`Tenant isolation violation: ${tenantViolation}`, 422);\n      }\n    }\n\n    return response;\n  } catch (error) {\n    if (error instanceof AuthError) {\n      throw error;\n    }\n    \n    // Handle network errors with enhanced context\n    const networkError = error instanceof Error ? error.message : 'Unknown network error';\n    console.error('Authenticated fetch error:', {\n      url,\n      error: networkError,\n      timestamp: new Date().toISOString()\n    });\n    \n    throw new Error(`Request failed: ${networkError}`);\n  }\n}\n\n/**\n * Validate user has admin role\n */\nexport function validateAdminRole(user: any): boolean {\n  return user && user.role === 'admin' && user.is_active;\n}\n\n/**\n * Enhanced secure logout with complete session cleanup\n */\nexport function logout(): void {\n  // Clear all auth-related cookies\n  document.cookie = 'access_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; httpOnly';\n  document.cookie = 'refresh_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; httpOnly';\n  \n  // Clear all tenant-related cookies if they exist\n  document.cookie = 'tenant_context=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; httpOnly';\n  document.cookie = 'user_permissions=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; httpOnly';\n  \n  // Enhanced localStorage cleanup\n  const authKeys = [\n    'user',\n    'current_user',\n    'tenant_info',\n    'user_permissions',\n    'token_expires_at',\n    'auth_state',\n    'last_activity',\n    'session_data'\n  ];\n  \n  authKeys.forEach(key => {\n    localStorage.removeItem(key);\n  });\n  \n  // Clear all sessionStorage\n  sessionStorage.clear();\n  \n  // Clear any auth-related intervals\n  if (typeof window !== 'undefined') {\n    const refreshInterval = (window as any).__authRefreshInterval;\n    const timeoutInterval = (window as any).__sessionTimeoutInterval;\n    \n    if (refreshInterval) {\n      clearInterval(refreshInterval);\n      delete (window as any).__authRefreshInterval;\n    }\n    \n    if (timeoutInterval) {\n      clearInterval(timeoutInterval);\n      delete (window as any).__sessionTimeoutInterval;\n    }\n  }\n  \n  // Clear browser state\n  if (typeof window !== 'undefined' && window.history.replaceState) {\n    window.history.replaceState(null, '', window.location.pathname);\n  }\n  \n  console.info('Enhanced logout cleanup completed');\n  \n  // Redirect to login\n  window.location.href = '/login';\n}"],"names":["AuthError","authenticatedFetch","getAuthHeaders","logout","validateAdminRole","getCookie","name","value","document","cookie","parts","split","length","pop","shift","undefined","Error","constructor","message","statusCode","contentType","token","headers","url","options","includeCredentials","enhancedHeaders","requestOptions","credentials","response","fetch","status","tenantError","get","console","error","localStorage","removeItem","window","location","href","permissionError","requiredPermission","errorMessage","tenantViolation","networkError","timestamp","Date","toISOString","user","role","is_active","authKeys","forEach","key","sessionStorage","clear","refreshInterval","__authRefreshInterval","timeoutInterval","__sessionTimeoutInterval","clearInterval","history","replaceState","pathname","info"],"mappings":"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"}