5d86118c03ab531766fd310cd93a2b59
// Simple cookie utility
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AuthError: function() {
        return AuthError;
    },
    authenticatedFetch: function() {
        return authenticatedFetch;
    },
    getAuthHeaders: function() {
        return getAuthHeaders;
    },
    logout: function() {
        return logout;
    },
    validateAdminRole: function() {
        return validateAdminRole;
    }
});
function getCookie(name) {
    const value = `; ${document.cookie}`;
    const parts = value.split(`; ${name}=`);
    if (parts.length === 2) {
        return parts.pop()?.split(";").shift();
    }
    return undefined;
}
class AuthError extends Error {
    constructor(message, statusCode){
        super(message);
        this.statusCode = statusCode;
        this.name = "AuthError";
    }
}
function getAuthHeaders(contentType = "application/json") {
    const token = getCookie("access_token");
    if (!token) {
        throw new AuthError("No authentication token found", 401);
    }
    const headers = {
        "Authorization": `Bearer ${token}`
    };
    if (contentType) {
        headers["Content-Type"] = contentType;
    }
    return headers;
}
async function authenticatedFetch(url, options = {}, includeCredentials = true) {
    try {
        const headers = getAuthHeaders();
        // Add tenant isolation headers for multi-tenant security
        const enhancedHeaders = {
            ...headers,
            "X-Tenant-Context": "isolated",
            "X-Client-Version": "1.0.0",
            "X-Request-Source": "frontend-app",
            ...options.headers
        };
        const requestOptions = {
            ...options,
            headers: enhancedHeaders
        };
        // Include credentials for cookie-based auth if enabled
        if (includeCredentials) {
            requestOptions.credentials = "include";
        }
        const response = await fetch(url, requestOptions);
        // Handle authentication errors with enhanced tenant context
        if (response.status === 401) {
            // Check if it's a tenant-specific auth error
            const tenantError = response.headers.get("X-Tenant-Error");
            if (tenantError) {
                console.error("Tenant authentication error:", tenantError);
            }
            // Clear invalid tokens and redirect to login
            document.cookie = "access_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; httpOnly";
            document.cookie = "refresh_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; httpOnly";
            // Clear tenant-specific session data
            localStorage.removeItem("tenant_info");
            localStorage.removeItem("user_permissions");
            window.location.href = "/login";
            throw new AuthError("Authentication failed - please log in again", 401);
        }
        if (response.status === 403) {
            // Enhanced permission error with tenant context
            const permissionError = response.headers.get("X-Permission-Error");
            const requiredPermission = response.headers.get("X-Required-Permission");
            let errorMessage = "Insufficient permissions";
            if (requiredPermission) {
                errorMessage += ` - requires: ${requiredPermission}`;
            }
            if (permissionError) {
                errorMessage += ` (${permissionError})`;
            }
            throw new AuthError(errorMessage, 403);
        }
        // Handle tenant isolation errors (custom status for cross-tenant violations)
        if (response.status === 422) {
            const tenantViolation = response.headers.get("X-Tenant-Violation");
            if (tenantViolation) {
                throw new AuthError(`Tenant isolation violation: ${tenantViolation}`, 422);
            }
        }
        return response;
    } catch (error) {
        if (error instanceof AuthError) {
            throw error;
        }
        // Handle network errors with enhanced context
        const networkError = error instanceof Error ? error.message : "Unknown network error";
        console.error("Authenticated fetch error:", {
            url,
            error: networkError,
            timestamp: new Date().toISOString()
        });
        throw new Error(`Request failed: ${networkError}`);
    }
}
function validateAdminRole(user) {
    return user && user.role === "admin" && user.is_active;
}
function logout() {
    // Clear all auth-related cookies
    document.cookie = "access_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; httpOnly";
    document.cookie = "refresh_token=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; httpOnly";
    // Clear all tenant-related cookies if they exist
    document.cookie = "tenant_context=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; httpOnly";
    document.cookie = "user_permissions=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; secure; httpOnly";
    // Enhanced localStorage cleanup
    const authKeys = [
        "user",
        "current_user",
        "tenant_info",
        "user_permissions",
        "token_expires_at",
        "auth_state",
        "last_activity",
        "session_data"
    ];
    authKeys.forEach((key)=>{
        localStorage.removeItem(key);
    });
    // Clear all sessionStorage
    sessionStorage.clear();
    // Clear any auth-related intervals
    if (typeof window !== "undefined") {
        const refreshInterval = window.__authRefreshInterval;
        const timeoutInterval = window.__sessionTimeoutInterval;
        if (refreshInterval) {
            clearInterval(refreshInterval);
            delete window.__authRefreshInterval;
        }
        if (timeoutInterval) {
            clearInterval(timeoutInterval);
            delete window.__sessionTimeoutInterval;
        }
    }
    // Clear browser state
    if (typeof window !== "undefined" && window.history.replaceState) {
        window.history.replaceState(null, "", window.location.pathname);
    }
    console.info("Enhanced logout cleanup completed");
    // Redirect to login
    window.location.href = "/login";
}

//# sourceMappingURL=data:application/json;base64,