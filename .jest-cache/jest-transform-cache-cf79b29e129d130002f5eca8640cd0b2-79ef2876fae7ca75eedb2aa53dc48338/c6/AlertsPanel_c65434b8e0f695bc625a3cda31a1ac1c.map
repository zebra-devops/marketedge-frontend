{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/market-edge/AlertsPanel.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n  ExclamationTriangleIcon,\n  InformationCircleIcon,\n  ExclamationCircleIcon,\n  XCircleIcon,\n  CheckCircleIcon,\n  EyeIcon,\n  XMarkIcon\n} from '@heroicons/react/24/outline';\nimport { MarketAlert } from '@/types/market-edge';\nimport { marketEdgeAPI } from '@/services/market-edge-api';\n\ninterface AlertsPanelProps {\n  alerts: MarketAlert[];\n  isLoading?: boolean;\n  onMarkRead?: (alertId: string) => void;\n  onRefresh?: () => void;\n  className?: string;\n}\n\nexport const AlertsPanel: React.FC<AlertsPanelProps> = ({\n  alerts,\n  isLoading = false,\n  onMarkRead,\n  onRefresh,\n  className = ''\n}) => {\n  const [processingAlerts, setProcessingAlerts] = useState<Set<string>>(new Set());\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return <XCircleIcon className=\"w-5 h-5 text-red-500\" />;\n      case 'high':\n        return <ExclamationCircleIcon className=\"w-5 h-5 text-red-500\" />;\n      case 'medium':\n        return <ExclamationTriangleIcon className=\"w-5 h-5 text-yellow-500\" />;\n      case 'low':\n        return <InformationCircleIcon className=\"w-5 h-5 text-blue-500\" />;\n      default:\n        return <InformationCircleIcon className=\"w-5 h-5 text-gray-500\" />;\n    }\n  };\n\n  const getSeverityBadge = (severity: string) => {\n    const baseClasses = \"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium\";\n    \n    switch (severity) {\n      case 'critical':\n        return `${baseClasses} bg-red-100 text-red-800`;\n      case 'high':\n        return `${baseClasses} bg-red-100 text-red-800`;\n      case 'medium':\n        return `${baseClasses} bg-yellow-100 text-yellow-800`;\n      case 'low':\n        return `${baseClasses} bg-blue-100 text-blue-800`;\n      default:\n        return `${baseClasses} bg-gray-100 text-gray-800`;\n    }\n  };\n\n  const getAlertTypeLabel = (type: string) => {\n    const labels: Record<string, string> = {\n      'price_change': 'Price Change',\n      'new_competitor': 'New Competitor',\n      'anomaly': 'Anomaly',\n      'promotion': 'Promotion',\n      'market_shift': 'Market Shift',\n      'competitor_move': 'Competitor Move'\n    };\n    return labels[type] || type.charAt(0).toUpperCase() + type.slice(1);\n  };\n\n  const formatTimeAgo = (dateString: string) => {\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\n    \n    if (diffInMinutes < 1) return 'Just now';\n    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;\n    if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)}h ago`;\n    if (diffInMinutes < 10080) return `${Math.floor(diffInMinutes / 1440)}d ago`;\n    return date.toLocaleDateString();\n  };\n\n  const handleMarkRead = async (alertId: string) => {\n    if (processingAlerts.has(alertId)) return;\n\n    setProcessingAlerts(prev => new Set(prev).add(alertId));\n    \n    try {\n      await marketEdgeAPI.markAlertRead(alertId);\n      if (onMarkRead) {\n        onMarkRead(alertId);\n      }\n    } catch (error) {\n      console.error('Failed to mark alert as read:', error);\n    } finally {\n      setProcessingAlerts(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(alertId);\n        return newSet;\n      });\n    }\n  };\n\n  // Group alerts by severity and read status\n  const { unreadAlerts, readAlerts } = React.useMemo(() => {\n    const unread = alerts.filter(alert => !alert.is_read)\n      .sort((a, b) => {\n        // Sort by severity first, then by date\n        const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 };\n        const aSeverity = severityOrder[a.severity as keyof typeof severityOrder] || 0;\n        const bSeverity = severityOrder[b.severity as keyof typeof severityOrder] || 0;\n        \n        if (aSeverity !== bSeverity) return bSeverity - aSeverity;\n        return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n      });\n    \n    const read = alerts.filter(alert => alert.is_read)\n      .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())\n      .slice(0, 10); // Show only last 10 read alerts\n    \n    return { unreadAlerts: unread, readAlerts: read };\n  }, [alerts]);\n\n  if (isLoading) {\n    return (\n      <div className={`bg-white rounded-lg border border-gray-200 ${className}`}>\n        <div className=\"p-4 border-b border-gray-200\">\n          <h3 className=\"text-lg font-medium text-gray-900\">Market Alerts</h3>\n        </div>\n        <div className=\"p-4\">\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"w-5 h-5 bg-gray-200 rounded\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-200 rounded w-3/4 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (alerts.length === 0) {\n    return (\n      <div className={`bg-white rounded-lg border border-gray-200 ${className}`}>\n        <div className=\"p-4 border-b border-gray-200\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Market Alerts</h3>\n            {onRefresh && (\n              <button\n                onClick={onRefresh}\n                className=\"text-sm text-blue-600 hover:text-blue-800\"\n              >\n                Refresh\n              </button>\n            )}\n          </div>\n        </div>\n        <div className=\"p-6 text-center\">\n          <CheckCircleIcon className=\"mx-auto h-12 w-12 text-green-400\" />\n          <h3 className=\"mt-2 text-sm font-medium text-gray-900\">All clear!</h3>\n          <p className=\"mt-1 text-sm text-gray-500\">\n            No alerts at the moment. You'll be notified of any market changes.\n          </p>\n        </div>\n      </div>\n    );\n  }\n\n  const AlertItem: React.FC<{ alert: MarketAlert; showActions?: boolean }> = ({ \n    alert, \n    showActions = true \n  }) => (\n    <div className={`p-4 border-l-4 ${\n      alert.is_read \n        ? 'border-gray-200 bg-gray-50' \n        : alert.severity === 'critical' \n          ? 'border-red-500 bg-red-50'\n          : alert.severity === 'high'\n            ? 'border-red-400 bg-red-50'\n            : alert.severity === 'medium'\n              ? 'border-yellow-400 bg-yellow-50'\n              : 'border-blue-400 bg-blue-50'\n    }`}>\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex items-start space-x-3\">\n          {getSeverityIcon(alert.severity)}\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center space-x-2 mb-1\">\n              <span className={getSeverityBadge(alert.severity)}>\n                {alert.severity.toUpperCase()}\n              </span>\n              <span className=\"text-xs text-gray-500\">\n                {getAlertTypeLabel(alert.alert_type)}\n              </span>\n            </div>\n            <p className={`text-sm font-medium ${alert.is_read ? 'text-gray-700' : 'text-gray-900'}`}>\n              {alert.title}\n            </p>\n            <p className={`text-sm mt-1 ${alert.is_read ? 'text-gray-600' : 'text-gray-700'}`}>\n              {alert.message}\n            </p>\n            <div className=\"flex items-center justify-between mt-2\">\n              <span className=\"text-xs text-gray-500\">\n                {formatTimeAgo(alert.created_at)}\n              </span>\n              {alert.trigger_data && (\n                <span className=\"text-xs text-gray-500\">\n                  Confidence: {Math.round((alert.trigger_data.confidence || 0) * 100)}%\n                </span>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        {showActions && !alert.is_read && (\n          <div className=\"flex items-center space-x-1 ml-4\">\n            <button\n              onClick={() => handleMarkRead(alert.id)}\n              disabled={processingAlerts.has(alert.id)}\n              className=\"p-1 text-gray-400 hover:text-gray-600 transition-colors\"\n              title=\"Mark as read\"\n            >\n              {processingAlerts.has(alert.id) ? (\n                <div className=\"w-4 h-4 border border-gray-300 border-t-gray-600 rounded-full animate-spin\"></div>\n              ) : (\n                <EyeIcon className=\"w-4 h-4\" />\n              )}\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className={`bg-white rounded-lg border border-gray-200 ${className}`}>\n      <div className=\"p-4 border-b border-gray-200\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"text-lg font-medium text-gray-900\">\n            Market Alerts\n            {unreadAlerts.length > 0 && (\n              <span className=\"ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n                {unreadAlerts.length} new\n              </span>\n            )}\n          </h3>\n          {onRefresh && (\n            <button\n              onClick={onRefresh}\n              className=\"text-sm text-blue-600 hover:text-blue-800\"\n            >\n              Refresh\n            </button>\n          )}\n        </div>\n      </div>\n\n      <div className=\"max-h-96 overflow-y-auto\">\n        {/* Unread Alerts */}\n        {unreadAlerts.length > 0 && (\n          <div>\n            <div className=\"px-4 py-2 bg-gray-50 border-b border-gray-200\">\n              <h4 className=\"text-sm font-medium text-gray-900\">\n                Unread ({unreadAlerts.length})\n              </h4>\n            </div>\n            <div className=\"space-y-1\">\n              {unreadAlerts.map((alert) => (\n                <AlertItem key={alert.id} alert={alert} />\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Read Alerts */}\n        {readAlerts.length > 0 && (\n          <div>\n            <div className=\"px-4 py-2 bg-gray-50 border-b border-gray-200\">\n              <h4 className=\"text-sm font-medium text-gray-700\">\n                Recently Read\n              </h4>\n            </div>\n            <div className=\"space-y-1\">\n              {readAlerts.map((alert) => (\n                <AlertItem key={alert.id} alert={alert} showActions={false} />\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Footer */}\n      <div className=\"px-4 py-3 bg-gray-50 border-t border-gray-200 text-center\">\n        <p className=\"text-xs text-gray-500\">\n          Alerts are updated in real-time based on market changes\n        </p>\n      </div>\n    </div>\n  );\n};"],"names":["AlertsPanel","alerts","isLoading","onMarkRead","onRefresh","className","processingAlerts","setProcessingAlerts","useState","Set","getSeverityIcon","severity","XCircleIcon","ExclamationCircleIcon","ExclamationTriangleIcon","InformationCircleIcon","getSeverityBadge","baseClasses","getAlertTypeLabel","type","labels","charAt","toUpperCase","slice","formatTimeAgo","dateString","date","Date","now","diffInMinutes","Math","floor","getTime","toLocaleDateString","handleMarkRead","alertId","has","prev","add","marketEdgeAPI","markAlertRead","error","console","newSet","delete","unreadAlerts","readAlerts","React","useMemo","unread","filter","alert","is_read","sort","a","b","severityOrder","critical","high","medium","low","aSeverity","bSeverity","created_at","read","div","h3","Array","map","_","i","length","button","onClick","CheckCircleIcon","p","AlertItem","showActions","span","alert_type","title","message","trigger_data","round","confidence","id","disabled","EyeIcon","h4"],"mappings":"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"}