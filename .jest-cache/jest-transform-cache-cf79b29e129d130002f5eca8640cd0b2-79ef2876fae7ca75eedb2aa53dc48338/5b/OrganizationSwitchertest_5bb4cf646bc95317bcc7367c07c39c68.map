{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/ui/__tests__/OrganizationSwitcher.test.tsx"],"sourcesContent":["/**\n * Organization Switcher Integration Tests\n * \n * Tests multi-tenant organization switching functionality:\n * - Organization context switching\n * - Data isolation validation\n * - UI/UX behavior during switching\n * - Audit logging\n * - Error handling\n * - Performance validation\n */\n\nimport { render, screen, waitFor, fireEvent, act } from '@testing-library/react'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport OrganizationSwitcher from '../OrganizationSwitcher'\nimport { OrganisationProvider } from '@/components/providers/OrganisationProvider'\nimport { AuthProvider } from '@/components/providers/AuthProvider'\nimport { apiService } from '@/services/api'\n\n// Mock API service\njest.mock('@/services/api', () => ({\n  apiService: {\n    getAllOrganisations: jest.fn(),\n    getUserAccessibleOrganisations: jest.fn(),\n    setOrganizationContext: jest.fn(),\n    logOrganizationSwitch: jest.fn(),\n  },\n}))\n\n// Mock useAuth hook\nconst mockUseAuth = {\n  user: {\n    id: 'user-123',\n    email: 'admin@example.com',\n    first_name: 'John',\n    last_name: 'Doe',\n    role: 'admin',\n  },\n  tenant: null,\n  permissions: ['read:all', 'write:all', 'admin:users'],\n  isAuthenticated: true,\n  hasRole: jest.fn((role: string) => role === 'admin'),\n  logout: jest.fn(),\n}\n\njest.mock('@/hooks/useAuth', () => ({\n  useAuthContext: () => mockUseAuth,\n}))\n\nconst mockOrganizations = [\n  {\n    id: 'org-1',\n    name: 'Odeon Cinemas UK',\n    industry: 'Cinema Exhibition',\n    subscription_plan: 'premium',\n    created_at: '2024-01-01T00:00:00Z',\n    updated_at: '2024-01-01T00:00:00Z',\n  },\n  {\n    id: 'org-2',\n    name: 'Premier Hotels Group',\n    industry: 'Hotel',\n    subscription_plan: 'enterprise',\n    created_at: '2024-01-01T00:00:00Z',\n    updated_at: '2024-01-01T00:00:00Z',\n  },\n  {\n    id: 'org-3',\n    name: 'FitLife Gym Chain',\n    industry: 'Gym',\n    subscription_plan: 'basic',\n    created_at: '2024-01-01T00:00:00Z',\n    updated_at: '2024-01-01T00:00:00Z',\n  },\n]\n\nconst renderOrganizationSwitcher = (queryClient: QueryClient) => {\n  return render(\n    <QueryClientProvider client={queryClient}>\n      <AuthProvider>\n        <OrganisationProvider>\n          <OrganizationSwitcher />\n        </OrganisationProvider>\n      </AuthProvider>\n    </QueryClientProvider>\n  )\n}\n\ndescribe('Organization Switcher Integration Tests', () => {\n  let queryClient: QueryClient\n\n  beforeEach(() => {\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false, cacheTime: 0 },\n        mutations: { retry: false },\n      },\n    })\n\n    // Reset mocks\n    jest.clearAllMocks()\n    \n    // Mock successful organization loading\n    ;(apiService.getAllOrganisations as jest.Mock).mockResolvedValue(mockOrganizations)\n    ;(apiService.getUserAccessibleOrganisations as jest.Mock).mockResolvedValue(mockOrganizations)\n    ;(apiService.setOrganizationContext as jest.Mock).mockResolvedValue(undefined)\n    ;(apiService.logOrganizationSwitch as jest.Mock).mockResolvedValue(undefined)\n\n    // Mock localStorage\n    Object.defineProperty(window, 'localStorage', {\n      value: {\n        getItem: jest.fn(),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n        clear: jest.fn(),\n        key: jest.fn(),\n        length: 0,\n      },\n      writable: true,\n    })\n\n    // Mock window.dispatchEvent for organization change events\n    window.dispatchEvent = jest.fn()\n  })\n\n  afterEach(() => {\n    queryClient.clear()\n  })\n\n  describe('Organization Context Loading', () => {\n    it('loads accessible organizations on mount', async () => {\n      renderOrganizationSwitcher(queryClient)\n\n      await waitFor(() => {\n        expect(apiService.getAllOrganisations).toHaveBeenCalled()\n      })\n    })\n\n    it('displays organization switcher when multiple organizations available', async () => {\n      renderOrganizationSwitcher(queryClient)\n\n      await waitFor(() => {\n        expect(screen.getByRole('button')).toBeInTheDocument()\n      })\n\n      // Should show first organization as default\n      expect(screen.getByText('Odeon Cinemas UK')).toBeInTheDocument()\n      expect(screen.getByText('Cinema Exhibition')).toBeInTheDocument()\n    })\n\n    it('does not show switcher when only one organization available', async () => {\n      ;(apiService.getAllOrganisations as jest.Mock).mockResolvedValue([mockOrganizations[0]])\n      ;(apiService.getUserAccessibleOrganisations as jest.Mock).mockResolvedValue([mockOrganizations[0]])\n\n      renderOrganizationSwitcher(queryClient)\n\n      await waitFor(() => {\n        expect(screen.queryByRole('button')).not.toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Organization Switching Functionality', () => {\n    it('successfully switches between organizations', async () => {\n      renderOrganizationSwitcher(queryClient)\n\n      // Wait for initial load\n      await waitFor(() => {\n        expect(screen.getByText('Odeon Cinemas UK')).toBeInTheDocument()\n      })\n\n      // Click to open dropdown\n      const switcherButton = screen.getByRole('button')\n      fireEvent.click(switcherButton)\n\n      // Wait for dropdown to appear\n      await waitFor(() => {\n        expect(screen.getByText('Switch Organization')).toBeInTheDocument()\n      })\n\n      // Click on different organization\n      const hotelOption = screen.getByText('Premier Hotels Group')\n      fireEvent.click(hotelOption)\n\n      await waitFor(() => {\n        expect(apiService.setOrganizationContext).toHaveBeenCalledWith('org-2')\n        expect(apiService.logOrganizationSwitch).toHaveBeenCalledWith('org-2')\n        expect(localStorage.setItem).toHaveBeenCalledWith('selectedOrganisationId', 'org-2')\n        expect(window.dispatchEvent).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: 'organizationChanged',\n            detail: { organizationId: 'org-2', organization: mockOrganizations[1] }\n          })\n        )\n      })\n    })\n\n    it('shows loading state during organization switch', async () => {\n      // Delay the API call to test loading state\n      ;(apiService.setOrganizationContext as jest.Mock).mockImplementation(\n        () => new Promise(resolve => setTimeout(resolve, 100))\n      )\n\n      renderOrganizationSwitcher(queryClient)\n\n      await waitFor(() => {\n        expect(screen.getByText('Odeon Cinemas UK')).toBeInTheDocument()\n      })\n\n      const switcherButton = screen.getByRole('button')\n      fireEvent.click(switcherButton)\n\n      await waitFor(() => {\n        expect(screen.getByText('Premier Hotels Group')).toBeInTheDocument()\n      })\n\n      const hotelOption = screen.getByText('Premier Hotels Group')\n      fireEvent.click(hotelOption)\n\n      // Should show loading spinner\n      await waitFor(() => {\n        expect(screen.getByTestId('loading-spinner')).toBeInTheDocument()\n      })\n    })\n\n    it('handles organization switching errors gracefully', async () => {\n      const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {})\n      ;(apiService.setOrganizationContext as jest.Mock).mockRejectedValue(\n        new Error('Organization switch failed')\n      )\n\n      renderOrganizationSwitcher(queryClient)\n\n      await waitFor(() => {\n        expect(screen.getByText('Odeon Cinemas UK')).toBeInTheDocument()\n      })\n\n      const switcherButton = screen.getByRole('button')\n      fireEvent.click(switcherButton)\n\n      await waitFor(() => {\n        expect(screen.getByText('Premier Hotels Group')).toBeInTheDocument()\n      })\n\n      const hotelOption = screen.getByText('Premier Hotels Group')\n      fireEvent.click(hotelOption)\n\n      await waitFor(() => {\n        expect(consoleSpy).toHaveBeenCalledWith('Failed to switch organization:', expect.any(Error))\n      })\n\n      consoleSpy.mockRestore()\n    })\n  })\n\n  describe('Industry-Specific UI Elements', () => {\n    it('displays correct industry icons and badges', async () => {\n      renderOrganizationSwitcher(queryClient)\n\n      await waitFor(() => {\n        expect(screen.getByText('Odeon Cinemas UK')).toBeInTheDocument()\n      })\n\n      const switcherButton = screen.getByRole('button')\n      fireEvent.click(switcherButton)\n\n      await waitFor(() => {\n        // Check for cinema industry\n        expect(screen.getByText('🎬')).toBeInTheDocument()\n        expect(screen.getByText('Cinema Exhibition')).toBeInTheDocument()\n\n        // Check for hotel industry\n        expect(screen.getByText('🏨')).toBeInTheDocument()\n        expect(screen.getByText('Hotel')).toBeInTheDocument()\n\n        // Check for gym industry\n        expect(screen.getByText('💪')).toBeInTheDocument()\n        expect(screen.getByText('Gym')).toBeInTheDocument()\n      })\n    })\n\n    it('highlights current organization with visual distinction', async () => {\n      renderOrganizationSwitcher(queryClient)\n\n      await waitFor(() => {\n        expect(screen.getByText('Odeon Cinemas UK')).toBeInTheDocument()\n      })\n\n      const switcherButton = screen.getByRole('button')\n      fireEvent.click(switcherButton)\n\n      await waitFor(() => {\n        const currentLabel = screen.getByText('Current')\n        expect(currentLabel).toBeInTheDocument()\n        expect(currentLabel.closest('div')).toHaveClass('bg-primary-50')\n      })\n    })\n  })\n\n  describe('Data Isolation Validation', () => {\n    it('clears organization-specific cache during switch', async () => {\n      const mockRemoveItem = localStorage.removeItem as jest.Mock\n\n      renderOrganizationSwitcher(queryClient)\n\n      await waitFor(() => {\n        expect(screen.getByText('Odeon Cinemas UK')).toBeInTheDocument()\n      })\n\n      const switcherButton = screen.getByRole('button')\n      fireEvent.click(switcherButton)\n\n      await waitFor(() => {\n        expect(screen.getByText('Premier Hotels Group')).toBeInTheDocument()\n      })\n\n      const hotelOption = screen.getByText('Premier Hotels Group')\n      fireEvent.click(hotelOption)\n\n      await waitFor(() => {\n        // Should have attempted to clear organization-specific cache\n        expect(mockRemoveItem).toHaveBeenCalled()\n      })\n    })\n\n    it('triggers data refresh event after organization switch', async () => {\n      const mockDispatchEvent = window.dispatchEvent as jest.Mock\n\n      renderOrganizationSwitcher(queryClient)\n\n      await waitFor(() => {\n        expect(screen.getByText('Odeon Cinemas UK')).toBeInTheDocument()\n      })\n\n      const switcherButton = screen.getByRole('button')\n      fireEvent.click(switcherButton)\n\n      await waitFor(() => {\n        expect(screen.getByText('Premier Hotels Group')).toBeInTheDocument()\n      })\n\n      const hotelOption = screen.getByText('Premier Hotels Group')\n      fireEvent.click(hotelOption)\n\n      await waitFor(() => {\n        expect(mockDispatchEvent).toHaveBeenCalledWith(\n          expect.objectContaining({\n            type: 'organizationChanged',\n            detail: {\n              organizationId: 'org-2',\n              organization: mockOrganizations[1]\n            }\n          })\n        )\n      })\n    })\n  })\n\n  describe('Audit Logging', () => {\n    it('logs organization switches for audit trail', async () => {\n      renderOrganizationSwitcher(queryClient)\n\n      await waitFor(() => {\n        expect(screen.getByText('Odeon Cinemas UK')).toBeInTheDocument()\n      })\n\n      const switcherButton = screen.getByRole('button')\n      fireEvent.click(switcherButton)\n\n      await waitFor(() => {\n        expect(screen.getByText('Premier Hotels Group')).toBeInTheDocument()\n      })\n\n      const hotelOption = screen.getByText('Premier Hotels Group')\n      fireEvent.click(hotelOption)\n\n      await waitFor(() => {\n        expect(apiService.logOrganizationSwitch).toHaveBeenCalledWith('org-2')\n      })\n    })\n\n    it('continues operation even if audit logging fails', async () => {\n      const consoleSpy = jest.spyOn(console, 'warn').mockImplementation(() => {})\n      ;(apiService.logOrganizationSwitch as jest.Mock).mockRejectedValue(\n        new Error('Audit logging failed')\n      )\n\n      renderOrganizationSwitcher(queryClient)\n\n      await waitFor(() => {\n        expect(screen.getByText('Odeon Cinemas UK')).toBeInTheDocument()\n      })\n\n      const switcherButton = screen.getByRole('button')\n      fireEvent.click(switcherButton)\n\n      await waitFor(() => {\n        expect(screen.getByText('Premier Hotels Group')).toBeInTheDocument()\n      })\n\n      const hotelOption = screen.getByText('Premier Hotels Group')\n      fireEvent.click(hotelOption)\n\n      await waitFor(() => {\n        expect(apiService.setOrganizationContext).toHaveBeenCalledWith('org-2')\n        expect(consoleSpy).toHaveBeenCalledWith('Failed to log organization switch:', expect.any(Error))\n      })\n\n      consoleSpy.mockRestore()\n    })\n  })\n\n  describe('Performance Validation', () => {\n    it('completes organization switch within performance threshold', async () => {\n      const startTime = performance.now()\n\n      renderOrganizationSwitcher(queryClient)\n\n      await waitFor(() => {\n        expect(screen.getByText('Odeon Cinemas UK')).toBeInTheDocument()\n      })\n\n      const switcherButton = screen.getByRole('button')\n      fireEvent.click(switcherButton)\n\n      await waitFor(() => {\n        expect(screen.getByText('Premier Hotels Group')).toBeInTheDocument()\n      })\n\n      const hotelOption = screen.getByText('Premier Hotels Group')\n      fireEvent.click(hotelOption)\n\n      await waitFor(() => {\n        expect(apiService.setOrganizationContext).toHaveBeenCalledWith('org-2')\n      })\n\n      const endTime = performance.now()\n      const switchTime = endTime - startTime\n\n      // Should complete organization switch in less than 2 seconds (2000ms)\n      expect(switchTime).toBeLessThan(2000)\n    })\n  })\n\n  describe('Access Control', () => {\n    it('only allows switching to accessible organizations', async () => {\n      // Mock limited organization access\n      const limitedOrganizations = [mockOrganizations[0], mockOrganizations[1]]\n      ;(apiService.getAllOrganisations as jest.Mock).mockResolvedValue(limitedOrganizations)\n      ;(apiService.getUserAccessibleOrganisations as jest.Mock).mockResolvedValue(limitedOrganizations)\n\n      renderOrganizationSwitcher(queryClient)\n\n      await waitFor(() => {\n        expect(screen.getByText('Odeon Cinemas UK')).toBeInTheDocument()\n      })\n\n      const switcherButton = screen.getByRole('button')\n      fireEvent.click(switcherButton)\n\n      await waitFor(() => {\n        expect(screen.getByText('Premier Hotels Group')).toBeInTheDocument()\n        // Should NOT show the gym organization\n        expect(screen.queryByText('FitLife Gym Chain')).not.toBeInTheDocument()\n      })\n    })\n  })\n})"],"names":["jest","mock","apiService","getAllOrganisations","fn","getUserAccessibleOrganisations","setOrganizationContext","logOrganizationSwitch","useAuthContext","mockUseAuth","user","id","email","first_name","last_name","role","tenant","permissions","isAuthenticated","hasRole","logout","mockOrganizations","name","industry","subscription_plan","created_at","updated_at","renderOrganizationSwitcher","queryClient","render","QueryClientProvider","client","AuthProvider","OrganisationProvider","OrganizationSwitcher","describe","beforeEach","QueryClient","defaultOptions","queries","retry","cacheTime","mutations","clearAllMocks","mockResolvedValue","undefined","Object","defineProperty","window","value","getItem","setItem","removeItem","clear","key","length","writable","dispatchEvent","afterEach","it","waitFor","expect","toHaveBeenCalled","screen","getByRole","toBeInTheDocument","getByText","queryByRole","not","switcherButton","fireEvent","click","hotelOption","toHaveBeenCalledWith","localStorage","objectContaining","type","detail","organizationId","organization","mockImplementation","Promise","resolve","setTimeout","getByTestId","consoleSpy","spyOn","console","mockRejectedValue","Error","any","mockRestore","currentLabel","closest","toHaveClass","mockRemoveItem","mockDispatchEvent","startTime","performance","now","endTime","switchTime","toBeLessThan","limitedOrganizations","queryByText"],"mappings":"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"}