42920957568f1400852dffd9f8933eb0
/**
 * Organization Switcher Integration Tests
 * 
 * Tests multi-tenant organization switching functionality:
 * - Organization context switching
 * - Data isolation validation
 * - UI/UX behavior during switching
 * - Audit logging
 * - Error handling
 * - Performance validation
 */ "use strict";
// Mock API service
jest.mock("@/services/api", ()=>({
        apiService: {
            getAllOrganisations: jest.fn(),
            getUserAccessibleOrganisations: jest.fn(),
            setOrganizationContext: jest.fn(),
            logOrganizationSwitch: jest.fn()
        }
    }));
jest.mock("@/hooks/useAuth", ()=>({
        useAuthContext: ()=>mockUseAuth
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("@testing-library/react");
const _reactquery = require("react-query");
const _OrganizationSwitcher = /*#__PURE__*/ _interop_require_default(require("../OrganizationSwitcher"));
const _OrganisationProvider = require("../../providers/OrganisationProvider");
const _AuthProvider = require("../../providers/AuthProvider");
const _api = require("../../../services/api");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock useAuth hook
const mockUseAuth = {
    user: {
        id: "user-123",
        email: "admin@example.com",
        first_name: "John",
        last_name: "Doe",
        role: "admin"
    },
    tenant: null,
    permissions: [
        "read:all",
        "write:all",
        "admin:users"
    ],
    isAuthenticated: true,
    hasRole: jest.fn((role)=>role === "admin"),
    logout: jest.fn()
};
const mockOrganizations = [
    {
        id: "org-1",
        name: "Odeon Cinemas UK",
        industry: "Cinema Exhibition",
        subscription_plan: "premium",
        created_at: "2024-01-01T00:00:00Z",
        updated_at: "2024-01-01T00:00:00Z"
    },
    {
        id: "org-2",
        name: "Premier Hotels Group",
        industry: "Hotel",
        subscription_plan: "enterprise",
        created_at: "2024-01-01T00:00:00Z",
        updated_at: "2024-01-01T00:00:00Z"
    },
    {
        id: "org-3",
        name: "FitLife Gym Chain",
        industry: "Gym",
        subscription_plan: "basic",
        created_at: "2024-01-01T00:00:00Z",
        updated_at: "2024-01-01T00:00:00Z"
    }
];
const renderOrganizationSwitcher = (queryClient)=>{
    return (0, _react.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
        client: queryClient,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthProvider.AuthProvider, {
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OrganisationProvider.OrganisationProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_OrganizationSwitcher.default, {})
            })
        })
    }));
};
describe("Organization Switcher Integration Tests", ()=>{
    let queryClient;
    beforeEach(()=>{
        queryClient = new _reactquery.QueryClient({
            defaultOptions: {
                queries: {
                    retry: false,
                    cacheTime: 0
                },
                mutations: {
                    retry: false
                }
            }
        });
        // Reset mocks
        jest.clearAllMocks();
        _api.apiService.getAllOrganisations.mockResolvedValue(mockOrganizations);
        _api.apiService.getUserAccessibleOrganisations.mockResolvedValue(mockOrganizations);
        _api.apiService.setOrganizationContext.mockResolvedValue(undefined);
        _api.apiService.logOrganizationSwitch.mockResolvedValue(undefined);
        // Mock localStorage
        Object.defineProperty(window, "localStorage", {
            value: {
                getItem: jest.fn(),
                setItem: jest.fn(),
                removeItem: jest.fn(),
                clear: jest.fn(),
                key: jest.fn(),
                length: 0
            },
            writable: true
        });
        // Mock window.dispatchEvent for organization change events
        window.dispatchEvent = jest.fn();
    });
    afterEach(()=>{
        queryClient.clear();
    });
    describe("Organization Context Loading", ()=>{
        it("loads accessible organizations on mount", async ()=>{
            renderOrganizationSwitcher(queryClient);
            await (0, _react.waitFor)(()=>{
                expect(_api.apiService.getAllOrganisations).toHaveBeenCalled();
            });
        });
        it("displays organization switcher when multiple organizations available", async ()=>{
            renderOrganizationSwitcher(queryClient);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByRole("button")).toBeInTheDocument();
            });
            // Should show first organization as default
            expect(_react.screen.getByText("Odeon Cinemas UK")).toBeInTheDocument();
            expect(_react.screen.getByText("Cinema Exhibition")).toBeInTheDocument();
        });
        it("does not show switcher when only one organization available", async ()=>{
            _api.apiService.getAllOrganisations.mockResolvedValue([
                mockOrganizations[0]
            ]);
            _api.apiService.getUserAccessibleOrganisations.mockResolvedValue([
                mockOrganizations[0]
            ]);
            renderOrganizationSwitcher(queryClient);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.queryByRole("button")).not.toBeInTheDocument();
            });
        });
    });
    describe("Organization Switching Functionality", ()=>{
        it("successfully switches between organizations", async ()=>{
            renderOrganizationSwitcher(queryClient);
            // Wait for initial load
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Odeon Cinemas UK")).toBeInTheDocument();
            });
            // Click to open dropdown
            const switcherButton = _react.screen.getByRole("button");
            _react.fireEvent.click(switcherButton);
            // Wait for dropdown to appear
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Switch Organization")).toBeInTheDocument();
            });
            // Click on different organization
            const hotelOption = _react.screen.getByText("Premier Hotels Group");
            _react.fireEvent.click(hotelOption);
            await (0, _react.waitFor)(()=>{
                expect(_api.apiService.setOrganizationContext).toHaveBeenCalledWith("org-2");
                expect(_api.apiService.logOrganizationSwitch).toHaveBeenCalledWith("org-2");
                expect(localStorage.setItem).toHaveBeenCalledWith("selectedOrganisationId", "org-2");
                expect(window.dispatchEvent).toHaveBeenCalledWith(expect.objectContaining({
                    type: "organizationChanged",
                    detail: {
                        organizationId: "org-2",
                        organization: mockOrganizations[1]
                    }
                }));
            });
        });
        it("shows loading state during organization switch", async ()=>{
            _api.apiService.setOrganizationContext.mockImplementation(()=>new Promise((resolve)=>setTimeout(resolve, 100)));
            renderOrganizationSwitcher(queryClient);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Odeon Cinemas UK")).toBeInTheDocument();
            });
            const switcherButton = _react.screen.getByRole("button");
            _react.fireEvent.click(switcherButton);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Premier Hotels Group")).toBeInTheDocument();
            });
            const hotelOption = _react.screen.getByText("Premier Hotels Group");
            _react.fireEvent.click(hotelOption);
            // Should show loading spinner
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByTestId("loading-spinner")).toBeInTheDocument();
            });
        });
        it("handles organization switching errors gracefully", async ()=>{
            const consoleSpy = jest.spyOn(console, "error").mockImplementation(()=>{});
            _api.apiService.setOrganizationContext.mockRejectedValue(new Error("Organization switch failed"));
            renderOrganizationSwitcher(queryClient);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Odeon Cinemas UK")).toBeInTheDocument();
            });
            const switcherButton = _react.screen.getByRole("button");
            _react.fireEvent.click(switcherButton);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Premier Hotels Group")).toBeInTheDocument();
            });
            const hotelOption = _react.screen.getByText("Premier Hotels Group");
            _react.fireEvent.click(hotelOption);
            await (0, _react.waitFor)(()=>{
                expect(consoleSpy).toHaveBeenCalledWith("Failed to switch organization:", expect.any(Error));
            });
            consoleSpy.mockRestore();
        });
    });
    describe("Industry-Specific UI Elements", ()=>{
        it("displays correct industry icons and badges", async ()=>{
            renderOrganizationSwitcher(queryClient);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Odeon Cinemas UK")).toBeInTheDocument();
            });
            const switcherButton = _react.screen.getByRole("button");
            _react.fireEvent.click(switcherButton);
            await (0, _react.waitFor)(()=>{
                // Check for cinema industry
                expect(_react.screen.getByText("\uD83C\uDFAC")).toBeInTheDocument();
                expect(_react.screen.getByText("Cinema Exhibition")).toBeInTheDocument();
                // Check for hotel industry
                expect(_react.screen.getByText("\uD83C\uDFE8")).toBeInTheDocument();
                expect(_react.screen.getByText("Hotel")).toBeInTheDocument();
                // Check for gym industry
                expect(_react.screen.getByText("\uD83D\uDCAA")).toBeInTheDocument();
                expect(_react.screen.getByText("Gym")).toBeInTheDocument();
            });
        });
        it("highlights current organization with visual distinction", async ()=>{
            renderOrganizationSwitcher(queryClient);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Odeon Cinemas UK")).toBeInTheDocument();
            });
            const switcherButton = _react.screen.getByRole("button");
            _react.fireEvent.click(switcherButton);
            await (0, _react.waitFor)(()=>{
                const currentLabel = _react.screen.getByText("Current");
                expect(currentLabel).toBeInTheDocument();
                expect(currentLabel.closest("div")).toHaveClass("bg-primary-50");
            });
        });
    });
    describe("Data Isolation Validation", ()=>{
        it("clears organization-specific cache during switch", async ()=>{
            const mockRemoveItem = localStorage.removeItem;
            renderOrganizationSwitcher(queryClient);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Odeon Cinemas UK")).toBeInTheDocument();
            });
            const switcherButton = _react.screen.getByRole("button");
            _react.fireEvent.click(switcherButton);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Premier Hotels Group")).toBeInTheDocument();
            });
            const hotelOption = _react.screen.getByText("Premier Hotels Group");
            _react.fireEvent.click(hotelOption);
            await (0, _react.waitFor)(()=>{
                // Should have attempted to clear organization-specific cache
                expect(mockRemoveItem).toHaveBeenCalled();
            });
        });
        it("triggers data refresh event after organization switch", async ()=>{
            const mockDispatchEvent = window.dispatchEvent;
            renderOrganizationSwitcher(queryClient);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Odeon Cinemas UK")).toBeInTheDocument();
            });
            const switcherButton = _react.screen.getByRole("button");
            _react.fireEvent.click(switcherButton);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Premier Hotels Group")).toBeInTheDocument();
            });
            const hotelOption = _react.screen.getByText("Premier Hotels Group");
            _react.fireEvent.click(hotelOption);
            await (0, _react.waitFor)(()=>{
                expect(mockDispatchEvent).toHaveBeenCalledWith(expect.objectContaining({
                    type: "organizationChanged",
                    detail: {
                        organizationId: "org-2",
                        organization: mockOrganizations[1]
                    }
                }));
            });
        });
    });
    describe("Audit Logging", ()=>{
        it("logs organization switches for audit trail", async ()=>{
            renderOrganizationSwitcher(queryClient);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Odeon Cinemas UK")).toBeInTheDocument();
            });
            const switcherButton = _react.screen.getByRole("button");
            _react.fireEvent.click(switcherButton);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Premier Hotels Group")).toBeInTheDocument();
            });
            const hotelOption = _react.screen.getByText("Premier Hotels Group");
            _react.fireEvent.click(hotelOption);
            await (0, _react.waitFor)(()=>{
                expect(_api.apiService.logOrganizationSwitch).toHaveBeenCalledWith("org-2");
            });
        });
        it("continues operation even if audit logging fails", async ()=>{
            const consoleSpy = jest.spyOn(console, "warn").mockImplementation(()=>{});
            _api.apiService.logOrganizationSwitch.mockRejectedValue(new Error("Audit logging failed"));
            renderOrganizationSwitcher(queryClient);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Odeon Cinemas UK")).toBeInTheDocument();
            });
            const switcherButton = _react.screen.getByRole("button");
            _react.fireEvent.click(switcherButton);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Premier Hotels Group")).toBeInTheDocument();
            });
            const hotelOption = _react.screen.getByText("Premier Hotels Group");
            _react.fireEvent.click(hotelOption);
            await (0, _react.waitFor)(()=>{
                expect(_api.apiService.setOrganizationContext).toHaveBeenCalledWith("org-2");
                expect(consoleSpy).toHaveBeenCalledWith("Failed to log organization switch:", expect.any(Error));
            });
            consoleSpy.mockRestore();
        });
    });
    describe("Performance Validation", ()=>{
        it("completes organization switch within performance threshold", async ()=>{
            const startTime = performance.now();
            renderOrganizationSwitcher(queryClient);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Odeon Cinemas UK")).toBeInTheDocument();
            });
            const switcherButton = _react.screen.getByRole("button");
            _react.fireEvent.click(switcherButton);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Premier Hotels Group")).toBeInTheDocument();
            });
            const hotelOption = _react.screen.getByText("Premier Hotels Group");
            _react.fireEvent.click(hotelOption);
            await (0, _react.waitFor)(()=>{
                expect(_api.apiService.setOrganizationContext).toHaveBeenCalledWith("org-2");
            });
            const endTime = performance.now();
            const switchTime = endTime - startTime;
            // Should complete organization switch in less than 2 seconds (2000ms)
            expect(switchTime).toBeLessThan(2000);
        });
    });
    describe("Access Control", ()=>{
        it("only allows switching to accessible organizations", async ()=>{
            // Mock limited organization access
            const limitedOrganizations = [
                mockOrganizations[0],
                mockOrganizations[1]
            ];
            _api.apiService.getAllOrganisations.mockResolvedValue(limitedOrganizations);
            _api.apiService.getUserAccessibleOrganisations.mockResolvedValue(limitedOrganizations);
            renderOrganizationSwitcher(queryClient);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Odeon Cinemas UK")).toBeInTheDocument();
            });
            const switcherButton = _react.screen.getByRole("button");
            _react.fireEvent.click(switcherButton);
            await (0, _react.waitFor)(()=>{
                expect(_react.screen.getByText("Premier Hotels Group")).toBeInTheDocument();
                // Should NOT show the gym organization
                expect(_react.screen.queryByText("FitLife Gym Chain")).not.toBeInTheDocument();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,