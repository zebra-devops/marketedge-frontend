296d51ca67737c2330c2a9aba1091848
/**
 * Integration test for PerformanceMetrics component
 * 
 * Demonstrates multi-tenant testing with API integration and different industry contexts
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _msw = require("msw");
const _server = require("../../../__tests__/mocks/server");
const _handlers = require("../../../__tests__/mocks/handlers");
const _testutils = require("../../../__tests__/utils/test-utils");
const _PerformanceMetrics = require("../PerformanceMetrics");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("PerformanceMetrics Component", ()=>{
    beforeEach(()=>{
        _handlers.mockHandlerUtils.resetMocks();
    });
    describe("Basic Rendering", ()=>{
        it("renders loading state when isLoading is true", ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {
                isLoading: true
            }));
            // Check for loading skeleton cards
            expect(_react1.screen.getAllByText("", {
                selector: "div"
            })).toHaveLength(expect.any(Number));
            const skeletonCards = document.querySelectorAll(".animate-pulse");
            expect(skeletonCards.length).toBeGreaterThan(0);
        });
        it("displays empty state when no metrics provided", ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            expect(_react1.screen.getByText(/no metrics available/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/metrics will appear here once pricing data is analyzed/i)).toBeInTheDocument();
        });
        it("displays performance metrics when data is provided", ()=>{
            const mockMetrics = {
                period_start: "2025-01-01T00:00:00Z",
                period_end: "2025-01-14T23:59:59Z",
                total_data_points: 150,
                average_price: 125.50,
                median_price: 120.00,
                min_price: 85.00,
                max_price: 200.00,
                price_range: 115.00,
                standard_deviation: 25.75,
                price_quartiles: {
                    q1: 100.00,
                    q2: 120.00,
                    q3: 145.00
                },
                competitors: {
                    "comp-1": {
                        name: "Competitor A",
                        average_price: 130.00,
                        median_price: 125.00,
                        min_price: 110.00,
                        max_price: 160.00,
                        price_points_count: 50,
                        standard_deviation: 15.50,
                        price_rank: 1,
                        position: "high"
                    }
                },
                trends: {
                    trend: "increasing",
                    weekly_averages: {
                        "2025-01-01": 120.00,
                        "2025-01-08": 125.50
                    },
                    price_change: 5.50,
                    price_change_percent: 4.6
                },
                anomalies: []
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {
                metrics: mockMetrics
            }));
            // Check that metrics are displayed
            expect(_react1.screen.getByText("\xa3125.50")).toBeInTheDocument() // average price
            ;
            expect(_react1.screen.getByText("Median: \xa3120.00")).toBeInTheDocument() // median price
            ;
            expect(_react1.screen.getByText("\xa385.00 - \xa3200.00")).toBeInTheDocument() // min-max range
            ;
            expect(_react1.screen.getByText("\xa3115.00")).toBeInTheDocument() // price range value
            ;
            expect(_react1.screen.getByText("1")).toBeInTheDocument() // competitor count
            ;
        });
        it("handles API errors gracefully", async ()=>{
            // Mock API error
            _server.server.use(_msw.rest.get("*/api/v1/market-edge/dashboard", (req, res, ctx)=>{
                return res(ctx.status(500), ctx.json({
                    error: "Internal Server Error"
                }));
            }));
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/failed to load performance metrics/i)).toBeInTheDocument();
            });
            expect(_react1.screen.getByRole("button", {
                name: /try again/i
            })).toBeInTheDocument();
        });
    });
    describe("Multi-Tenant Industry Scenarios", ()=>{
        it("displays hotel-specific metrics for hotel industry", async ()=>{
            (0, _testutils.renderWithIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "hotel");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/occupancy rate/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/adr \(average daily rate\)/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/revpar/i)).toBeInTheDocument();
        });
        it("displays cinema-specific metrics for cinema industry", async ()=>{
            (0, _testutils.renderWithIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "cinema");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/ticket sales/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/box office performance/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/screening utilization/i)).toBeInTheDocument();
        });
        it("displays gym-specific metrics for gym industry", async ()=>{
            (0, _testutils.renderWithIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "gym");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/membership growth/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/facility utilization/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/member retention/i)).toBeInTheDocument();
        });
        it("displays retail-specific metrics for retail industry", async ()=>{
            (0, _testutils.renderWithIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "retail");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/sales per square foot/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/inventory turnover/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/customer conversion/i)).toBeInTheDocument();
        });
        it("displays b2b-specific metrics for b2b service industry", async ()=>{
            (0, _testutils.renderWithIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "b2b_service");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/client acquisition cost/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/monthly recurring revenue/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/churn rate/i)).toBeInTheDocument();
        });
    });
    describe("Subscription Plan Features", ()=>{
        it("shows basic metrics for basic subscription", async ()=>{
            (0, _testutils.renderWithSubscription)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "basic");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/basic metrics/i)).toBeInTheDocument();
            expect(_react1.screen.queryByText(/advanced analytics/i)).not.toBeInTheDocument();
            expect(_react1.screen.queryByText(/predictive insights/i)).not.toBeInTheDocument();
        });
        it("shows enhanced metrics for professional subscription", async ()=>{
            (0, _testutils.renderWithSubscription)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "professional");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/basic metrics/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/advanced analytics/i)).toBeInTheDocument();
            expect(_react1.screen.queryByText(/predictive insights/i)).not.toBeInTheDocument();
        });
        it("shows all metrics for enterprise subscription", async ()=>{
            (0, _testutils.renderWithSubscription)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "enterprise");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/basic metrics/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/advanced analytics/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/predictive insights/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/custom reporting/i)).toBeInTheDocument();
        });
    });
    describe("User Interactions", ()=>{
        it("allows users to refresh metrics", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            const refreshButton = _react1.screen.getByRole("button", {
                name: /refresh/i
            });
            await user.click(refreshButton);
            expect(_react1.screen.getByTestId("loading-spinner")).toBeInTheDocument();
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/market performance/i)).toBeInTheDocument();
        });
        it("allows users to change time period", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            const periodSelector = _react1.screen.getByRole("combobox", {
                name: /time period/i
            });
            await user.selectOptions(periodSelector, "30d");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/last 30 days/i)).toBeInTheDocument();
            });
        });
        it("allows users to export data", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            const exportButton = _react1.screen.getByRole("button", {
                name: /export/i
            });
            await user.click(exportButton);
            expect(_react1.screen.getByText(/export options/i)).toBeInTheDocument();
            const csvOption = _react1.screen.getByRole("button", {
                name: /export as csv/i
            });
            await user.click(csvOption);
            // Verify download was triggered (this would need to be mocked in real implementation)
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/download started/i)).toBeInTheDocument();
            });
        });
    });
    describe("Feature Flag Integration", ()=>{
        it("hides advanced features when feature flags are disabled", async ()=>{
            _handlers.mockHandlerUtils.setMockFeatureFlags({
                "market_edge_enabled": true,
                "competitive_analysis": false,
                "pricing_optimization": false
            });
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/market performance/i)).toBeInTheDocument();
            expect(_react1.screen.queryByText(/competitive analysis/i)).not.toBeInTheDocument();
            expect(_react1.screen.queryByText(/pricing optimization/i)).not.toBeInTheDocument();
        });
        it("shows all features when feature flags are enabled", async ()=>{
            _handlers.mockHandlerUtils.setMockFeatureFlags({
                "market_edge_enabled": true,
                "competitive_analysis": true,
                "pricing_optimization": true
            });
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/market performance/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/competitive analysis/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/pricing optimization/i)).toBeInTheDocument();
        });
    });
    describe("Rate Limiting Integration", ()=>{
        it("handles rate limit errors appropriately", async ()=>{
            _server.server.use(_msw.rest.get("*/api/v1/market-edge/dashboard", (req, res, ctx)=>{
                return res(ctx.status(429), ctx.json({
                    error: "Rate limit exceeded",
                    message: "Too many requests. Please try again later."
                }), ctx.set("X-RateLimit-Limit", "5000"), ctx.set("X-RateLimit-Remaining", "0"), ctx.set("X-RateLimit-Reset", String(Date.now() + 3600)));
            }));
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/rate limit exceeded/i)).toBeInTheDocument();
                expect(_react1.screen.getByText(/please try again later/i)).toBeInTheDocument();
            });
            expect(_react1.screen.getByRole("button", {
                name: /try again/i
            })).toBeInTheDocument();
        });
    });
    describe("Accessibility", ()=>{
        it("has proper ARIA labels and roles", async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByRole("region", {
                name: /performance metrics/i
            })).toBeInTheDocument();
            expect(_react1.screen.getByRole("button", {
                name: /refresh metrics/i
            })).toBeInTheDocument();
            const charts = _react1.screen.getAllByRole("img", {
                name: /performance chart/i
            });
            expect(charts.length).toBeGreaterThan(0);
        });
        it("supports keyboard navigation", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            const refreshButton = _react1.screen.getByRole("button", {
                name: /refresh/i
            });
            refreshButton.focus();
            await user.keyboard("{Enter}");
            expect(_react1.screen.getByTestId("loading-spinner")).toBeInTheDocument();
        });
    });
    describe("Responsive Design", ()=>{
        it("adapts layout for mobile screens", async ()=>{
            // Mock mobile viewport
            Object.defineProperty(window, "innerWidth", {
                value: 375
            });
            Object.defineProperty(window, "innerHeight", {
                value: 667
            });
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByTestId("mobile-layout")).toBeInTheDocument();
            expect(_react1.screen.queryByTestId("desktop-layout")).not.toBeInTheDocument();
        });
        it("shows full layout for desktop screens", async ()=>{
            // Mock desktop viewport
            Object.defineProperty(window, "innerWidth", {
                value: 1920
            });
            Object.defineProperty(window, "innerHeight", {
                value: 1080
            });
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByTestId("desktop-layout")).toBeInTheDocument();
            expect(_react1.screen.queryByTestId("mobile-layout")).not.toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9tYXR0L1NpdGVzL01hcmtldEVkZ2UvcGxhdGZvcm0td3JhcHBlci9mcm9udGVuZC9zcmMvY29tcG9uZW50cy9tYXJrZXQtZWRnZS9fX3Rlc3RzX18vUGVyZm9ybWFuY2VNZXRyaWNzLnRlc3QudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogSW50ZWdyYXRpb24gdGVzdCBmb3IgUGVyZm9ybWFuY2VNZXRyaWNzIGNvbXBvbmVudFxuICogXG4gKiBEZW1vbnN0cmF0ZXMgbXVsdGktdGVuYW50IHRlc3Rpbmcgd2l0aCBBUEkgaW50ZWdyYXRpb24gYW5kIGRpZmZlcmVudCBpbmR1c3RyeSBjb250ZXh0c1xuICovXG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHNjcmVlbiwgd2FpdEZvciB9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QnXG5pbXBvcnQgdXNlckV2ZW50IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvdXNlci1ldmVudCdcbmltcG9ydCB7IHJlc3QgfSBmcm9tICdtc3cnXG5pbXBvcnQgeyBzZXJ2ZXIgfSBmcm9tICcuLi8uLi8uLi9fX3Rlc3RzX18vbW9ja3Mvc2VydmVyJ1xuaW1wb3J0IHsgbW9ja0hhbmRsZXJVdGlscyB9IGZyb20gJy4uLy4uLy4uL19fdGVzdHNfXy9tb2Nrcy9oYW5kbGVycydcbmltcG9ydCB7IFxuICByZW5kZXJXaXRoUHJvdmlkZXJzLCBcbiAgcmVuZGVyV2l0aEluZHVzdHJ5LCBcbiAgcmVuZGVyV2l0aFN1YnNjcmlwdGlvbixcbiAgY3JlYXRlTW9ja1VzZXIsXG4gIGNyZWF0ZU1vY2tPcmdhbml6YXRpb24sXG4gIHdhaXRGb3JMb2FkaW5nVG9GaW5pc2hcbn0gZnJvbSAnLi4vLi4vLi4vX190ZXN0c19fL3V0aWxzL3Rlc3QtdXRpbHMnXG5pbXBvcnQgeyBQZXJmb3JtYW5jZU1ldHJpY3MgfSBmcm9tICcuLi9QZXJmb3JtYW5jZU1ldHJpY3MnXG5cbmRlc2NyaWJlKCdQZXJmb3JtYW5jZU1ldHJpY3MgQ29tcG9uZW50JywgKCkgPT4ge1xuICBiZWZvcmVFYWNoKCgpID0+IHtcbiAgICBtb2NrSGFuZGxlclV0aWxzLnJlc2V0TW9ja3MoKVxuICB9KVxuXG4gIGRlc2NyaWJlKCdCYXNpYyBSZW5kZXJpbmcnLCAoKSA9PiB7XG4gICAgaXQoJ3JlbmRlcnMgbG9hZGluZyBzdGF0ZSB3aGVuIGlzTG9hZGluZyBpcyB0cnVlJywgKCkgPT4ge1xuICAgICAgcmVuZGVyV2l0aFByb3ZpZGVycyg8UGVyZm9ybWFuY2VNZXRyaWNzIGlzTG9hZGluZz17dHJ1ZX0gLz4pXG4gICAgICBcbiAgICAgIC8vIENoZWNrIGZvciBsb2FkaW5nIHNrZWxldG9uIGNhcmRzXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEFsbEJ5VGV4dCgnJywgeyBzZWxlY3RvcjogJ2RpdicgfSkpLnRvSGF2ZUxlbmd0aChleHBlY3QuYW55KE51bWJlcikpXG4gICAgICBjb25zdCBza2VsZXRvbkNhcmRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmFuaW1hdGUtcHVsc2UnKVxuICAgICAgZXhwZWN0KHNrZWxldG9uQ2FyZHMubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMClcbiAgICB9KVxuXG4gICAgaXQoJ2Rpc3BsYXlzIGVtcHR5IHN0YXRlIHdoZW4gbm8gbWV0cmljcyBwcm92aWRlZCcsICgpID0+IHtcbiAgICAgIHJlbmRlcldpdGhQcm92aWRlcnMoPFBlcmZvcm1hbmNlTWV0cmljcyAvPilcbiAgICAgIFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL25vIG1ldHJpY3MgYXZhaWxhYmxlL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvbWV0cmljcyB3aWxsIGFwcGVhciBoZXJlIG9uY2UgcHJpY2luZyBkYXRhIGlzIGFuYWx5emVkL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgfSlcblxuICAgIGl0KCdkaXNwbGF5cyBwZXJmb3JtYW5jZSBtZXRyaWNzIHdoZW4gZGF0YSBpcyBwcm92aWRlZCcsICgpID0+IHtcbiAgICAgIGNvbnN0IG1vY2tNZXRyaWNzID0ge1xuICAgICAgICBwZXJpb2Rfc3RhcnQ6ICcyMDI1LTAxLTAxVDAwOjAwOjAwWicsXG4gICAgICAgIHBlcmlvZF9lbmQ6ICcyMDI1LTAxLTE0VDIzOjU5OjU5WicsXG4gICAgICAgIHRvdGFsX2RhdGFfcG9pbnRzOiAxNTAsXG4gICAgICAgIGF2ZXJhZ2VfcHJpY2U6IDEyNS41MCxcbiAgICAgICAgbWVkaWFuX3ByaWNlOiAxMjAuMDAsXG4gICAgICAgIG1pbl9wcmljZTogODUuMDAsXG4gICAgICAgIG1heF9wcmljZTogMjAwLjAwLFxuICAgICAgICBwcmljZV9yYW5nZTogMTE1LjAwLFxuICAgICAgICBzdGFuZGFyZF9kZXZpYXRpb246IDI1Ljc1LFxuICAgICAgICBwcmljZV9xdWFydGlsZXM6IHtcbiAgICAgICAgICBxMTogMTAwLjAwLFxuICAgICAgICAgIHEyOiAxMjAuMDAsXG4gICAgICAgICAgcTM6IDE0NS4wMFxuICAgICAgICB9LFxuICAgICAgICBjb21wZXRpdG9yczoge1xuICAgICAgICAgICdjb21wLTEnOiB7XG4gICAgICAgICAgICBuYW1lOiAnQ29tcGV0aXRvciBBJyxcbiAgICAgICAgICAgIGF2ZXJhZ2VfcHJpY2U6IDEzMC4wMCxcbiAgICAgICAgICAgIG1lZGlhbl9wcmljZTogMTI1LjAwLFxuICAgICAgICAgICAgbWluX3ByaWNlOiAxMTAuMDAsXG4gICAgICAgICAgICBtYXhfcHJpY2U6IDE2MC4wMCxcbiAgICAgICAgICAgIHByaWNlX3BvaW50c19jb3VudDogNTAsXG4gICAgICAgICAgICBzdGFuZGFyZF9kZXZpYXRpb246IDE1LjUwLFxuICAgICAgICAgICAgcHJpY2VfcmFuazogMSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiAnaGlnaCcgYXMgY29uc3RcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHRyZW5kczoge1xuICAgICAgICAgIHRyZW5kOiAnaW5jcmVhc2luZycgYXMgY29uc3QsXG4gICAgICAgICAgd2Vla2x5X2F2ZXJhZ2VzOiB7XG4gICAgICAgICAgICAnMjAyNS0wMS0wMSc6IDEyMC4wMCxcbiAgICAgICAgICAgICcyMDI1LTAxLTA4JzogMTI1LjUwXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcmljZV9jaGFuZ2U6IDUuNTAsXG4gICAgICAgICAgcHJpY2VfY2hhbmdlX3BlcmNlbnQ6IDQuNlxuICAgICAgICB9LFxuICAgICAgICBhbm9tYWxpZXM6IFtdXG4gICAgICB9XG5cbiAgICAgIHJlbmRlcldpdGhQcm92aWRlcnMoPFBlcmZvcm1hbmNlTWV0cmljcyBtZXRyaWNzPXttb2NrTWV0cmljc30gLz4pXG4gICAgICBcbiAgICAgIC8vIENoZWNrIHRoYXQgbWV0cmljcyBhcmUgZGlzcGxheWVkXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnwqMxMjUuNTAnKSkudG9CZUluVGhlRG9jdW1lbnQoKSAvLyBhdmVyYWdlIHByaWNlXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnTWVkaWFuOiDCozEyMC4wMCcpKS50b0JlSW5UaGVEb2N1bWVudCgpIC8vIG1lZGlhbiBwcmljZVxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoJ8KjODUuMDAgLSDCozIwMC4wMCcpKS50b0JlSW5UaGVEb2N1bWVudCgpIC8vIG1pbi1tYXggcmFuZ2VcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KCfCozExNS4wMCcpKS50b0JlSW5UaGVEb2N1bWVudCgpIC8vIHByaWNlIHJhbmdlIHZhbHVlXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgnMScpKS50b0JlSW5UaGVEb2N1bWVudCgpIC8vIGNvbXBldGl0b3IgY291bnRcbiAgICB9KVxuXG4gICAgaXQoJ2hhbmRsZXMgQVBJIGVycm9ycyBncmFjZWZ1bGx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgLy8gTW9jayBBUEkgZXJyb3JcbiAgICAgIHNlcnZlci51c2UoXG4gICAgICAgIHJlc3QuZ2V0KCcqL2FwaS92MS9tYXJrZXQtZWRnZS9kYXNoYm9hcmQnLCAocmVxLCByZXMsIGN0eCkgPT4ge1xuICAgICAgICAgIHJldHVybiByZXMoXG4gICAgICAgICAgICBjdHguc3RhdHVzKDUwMCksXG4gICAgICAgICAgICBjdHguanNvbih7IGVycm9yOiAnSW50ZXJuYWwgU2VydmVyIEVycm9yJyB9KVxuICAgICAgICAgIClcbiAgICAgICAgfSlcbiAgICAgIClcblxuICAgICAgcmVuZGVyV2l0aFByb3ZpZGVycyg8UGVyZm9ybWFuY2VNZXRyaWNzIC8+KVxuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL2ZhaWxlZCB0byBsb2FkIHBlcmZvcm1hbmNlIG1ldHJpY3MvaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIH0pXG4gICAgICBcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlSb2xlKCdidXR0b24nLCB7IG5hbWU6IC90cnkgYWdhaW4vaSB9KSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ011bHRpLVRlbmFudCBJbmR1c3RyeSBTY2VuYXJpb3MnLCAoKSA9PiB7XG4gICAgaXQoJ2Rpc3BsYXlzIGhvdGVsLXNwZWNpZmljIG1ldHJpY3MgZm9yIGhvdGVsIGluZHVzdHJ5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyV2l0aEluZHVzdHJ5KDxQZXJmb3JtYW5jZU1ldHJpY3MgLz4sICdob3RlbCcpXG4gICAgICBcbiAgICAgIGF3YWl0IHdhaXRGb3JMb2FkaW5nVG9GaW5pc2goKVxuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvb2NjdXBhbmN5IHJhdGUvaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9hZHIgXFwoYXZlcmFnZSBkYWlseSByYXRlXFwpL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvcmV2cGFyL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgfSlcblxuICAgIGl0KCdkaXNwbGF5cyBjaW5lbWEtc3BlY2lmaWMgbWV0cmljcyBmb3IgY2luZW1hIGluZHVzdHJ5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyV2l0aEluZHVzdHJ5KDxQZXJmb3JtYW5jZU1ldHJpY3MgLz4sICdjaW5lbWEnKVxuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yTG9hZGluZ1RvRmluaXNoKClcbiAgICAgIFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL3RpY2tldCBzYWxlcy9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL2JveCBvZmZpY2UgcGVyZm9ybWFuY2UvaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9zY3JlZW5pbmcgdXRpbGl6YXRpb24vaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICB9KVxuXG4gICAgaXQoJ2Rpc3BsYXlzIGd5bS1zcGVjaWZpYyBtZXRyaWNzIGZvciBneW0gaW5kdXN0cnknLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXJXaXRoSW5kdXN0cnkoPFBlcmZvcm1hbmNlTWV0cmljcyAvPiwgJ2d5bScpXG4gICAgICBcbiAgICAgIGF3YWl0IHdhaXRGb3JMb2FkaW5nVG9GaW5pc2goKVxuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvbWVtYmVyc2hpcCBncm93dGgvaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9mYWNpbGl0eSB1dGlsaXphdGlvbi9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL21lbWJlciByZXRlbnRpb24vaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICB9KVxuXG4gICAgaXQoJ2Rpc3BsYXlzIHJldGFpbC1zcGVjaWZpYyBtZXRyaWNzIGZvciByZXRhaWwgaW5kdXN0cnknLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXJXaXRoSW5kdXN0cnkoPFBlcmZvcm1hbmNlTWV0cmljcyAvPiwgJ3JldGFpbCcpXG4gICAgICBcbiAgICAgIGF3YWl0IHdhaXRGb3JMb2FkaW5nVG9GaW5pc2goKVxuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvc2FsZXMgcGVyIHNxdWFyZSBmb290L2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvaW52ZW50b3J5IHR1cm5vdmVyL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvY3VzdG9tZXIgY29udmVyc2lvbi9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIH0pXG5cbiAgICBpdCgnZGlzcGxheXMgYjJiLXNwZWNpZmljIG1ldHJpY3MgZm9yIGIyYiBzZXJ2aWNlIGluZHVzdHJ5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgcmVuZGVyV2l0aEluZHVzdHJ5KDxQZXJmb3JtYW5jZU1ldHJpY3MgLz4sICdiMmJfc2VydmljZScpXG4gICAgICBcbiAgICAgIGF3YWl0IHdhaXRGb3JMb2FkaW5nVG9GaW5pc2goKVxuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvY2xpZW50IGFjcXVpc2l0aW9uIGNvc3QvaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9tb250aGx5IHJlY3VycmluZyByZXZlbnVlL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvY2h1cm4gcmF0ZS9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgIH0pXG4gIH0pXG5cbiAgZGVzY3JpYmUoJ1N1YnNjcmlwdGlvbiBQbGFuIEZlYXR1cmVzJywgKCkgPT4ge1xuICAgIGl0KCdzaG93cyBiYXNpYyBtZXRyaWNzIGZvciBiYXNpYyBzdWJzY3JpcHRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXJXaXRoU3Vic2NyaXB0aW9uKDxQZXJmb3JtYW5jZU1ldHJpY3MgLz4sICdiYXNpYycpXG4gICAgICBcbiAgICAgIGF3YWl0IHdhaXRGb3JMb2FkaW5nVG9GaW5pc2goKVxuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvYmFzaWMgbWV0cmljcy9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgvYWR2YW5jZWQgYW5hbHl0aWNzL2kpKS5ub3QudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgvcHJlZGljdGl2ZSBpbnNpZ2h0cy9pKSkubm90LnRvQmVJblRoZURvY3VtZW50KClcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3dzIGVuaGFuY2VkIG1ldHJpY3MgZm9yIHByb2Zlc3Npb25hbCBzdWJzY3JpcHRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXJXaXRoU3Vic2NyaXB0aW9uKDxQZXJmb3JtYW5jZU1ldHJpY3MgLz4sICdwcm9mZXNzaW9uYWwnKVxuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yTG9hZGluZ1RvRmluaXNoKClcbiAgICAgIFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL2Jhc2ljIG1ldHJpY3MvaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9hZHZhbmNlZCBhbmFseXRpY3MvaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRleHQoL3ByZWRpY3RpdmUgaW5zaWdodHMvaSkpLm5vdC50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgfSlcblxuICAgIGl0KCdzaG93cyBhbGwgbWV0cmljcyBmb3IgZW50ZXJwcmlzZSBzdWJzY3JpcHRpb24nLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXJXaXRoU3Vic2NyaXB0aW9uKDxQZXJmb3JtYW5jZU1ldHJpY3MgLz4sICdlbnRlcnByaXNlJylcbiAgICAgIFxuICAgICAgYXdhaXQgd2FpdEZvckxvYWRpbmdUb0ZpbmlzaCgpXG4gICAgICBcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9iYXNpYyBtZXRyaWNzL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvYWR2YW5jZWQgYW5hbHl0aWNzL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvcHJlZGljdGl2ZSBpbnNpZ2h0cy9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL2N1c3RvbSByZXBvcnRpbmcvaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdVc2VyIEludGVyYWN0aW9ucycsICgpID0+IHtcbiAgICBpdCgnYWxsb3dzIHVzZXJzIHRvIHJlZnJlc2ggbWV0cmljcycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHVzZXIgPSB1c2VyRXZlbnQuc2V0dXAoKVxuICAgICAgcmVuZGVyV2l0aFByb3ZpZGVycyg8UGVyZm9ybWFuY2VNZXRyaWNzIC8+KVxuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yTG9hZGluZ1RvRmluaXNoKClcbiAgICAgIFxuICAgICAgY29uc3QgcmVmcmVzaEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3JlZnJlc2gvaSB9KVxuICAgICAgYXdhaXQgdXNlci5jbGljayhyZWZyZXNoQnV0dG9uKVxuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdsb2FkaW5nLXNwaW5uZXInKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yTG9hZGluZ1RvRmluaXNoKClcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9tYXJrZXQgcGVyZm9ybWFuY2UvaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICB9KVxuXG4gICAgaXQoJ2FsbG93cyB1c2VycyB0byBjaGFuZ2UgdGltZSBwZXJpb2QnLCBhc3luYyAoKSA9PiB7XG4gICAgICBjb25zdCB1c2VyID0gdXNlckV2ZW50LnNldHVwKClcbiAgICAgIHJlbmRlcldpdGhQcm92aWRlcnMoPFBlcmZvcm1hbmNlTWV0cmljcyAvPilcbiAgICAgIFxuICAgICAgYXdhaXQgd2FpdEZvckxvYWRpbmdUb0ZpbmlzaCgpXG4gICAgICBcbiAgICAgIGNvbnN0IHBlcmlvZFNlbGVjdG9yID0gc2NyZWVuLmdldEJ5Um9sZSgnY29tYm9ib3gnLCB7IG5hbWU6IC90aW1lIHBlcmlvZC9pIH0pXG4gICAgICBhd2FpdCB1c2VyLnNlbGVjdE9wdGlvbnMocGVyaW9kU2VsZWN0b3IsICczMGQnKVxuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yKCgpID0+IHtcbiAgICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL2xhc3QgMzAgZGF5cy9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgaXQoJ2FsbG93cyB1c2VycyB0byBleHBvcnQgZGF0YScsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHVzZXIgPSB1c2VyRXZlbnQuc2V0dXAoKVxuICAgICAgcmVuZGVyV2l0aFByb3ZpZGVycyg8UGVyZm9ybWFuY2VNZXRyaWNzIC8+KVxuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yTG9hZGluZ1RvRmluaXNoKClcbiAgICAgIFxuICAgICAgY29uc3QgZXhwb3J0QnV0dG9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvZXhwb3J0L2kgfSlcbiAgICAgIGF3YWl0IHVzZXIuY2xpY2soZXhwb3J0QnV0dG9uKVxuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvZXhwb3J0IG9wdGlvbnMvaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIFxuICAgICAgY29uc3QgY3N2T3B0aW9uID0gc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvZXhwb3J0IGFzIGNzdi9pIH0pXG4gICAgICBhd2FpdCB1c2VyLmNsaWNrKGNzdk9wdGlvbilcbiAgICAgIFxuICAgICAgLy8gVmVyaWZ5IGRvd25sb2FkIHdhcyB0cmlnZ2VyZWQgKHRoaXMgd291bGQgbmVlZCB0byBiZSBtb2NrZWQgaW4gcmVhbCBpbXBsZW1lbnRhdGlvbilcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvZG93bmxvYWQgc3RhcnRlZC9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgfSlcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdGZWF0dXJlIEZsYWcgSW50ZWdyYXRpb24nLCAoKSA9PiB7XG4gICAgaXQoJ2hpZGVzIGFkdmFuY2VkIGZlYXR1cmVzIHdoZW4gZmVhdHVyZSBmbGFncyBhcmUgZGlzYWJsZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrSGFuZGxlclV0aWxzLnNldE1vY2tGZWF0dXJlRmxhZ3Moe1xuICAgICAgICAnbWFya2V0X2VkZ2VfZW5hYmxlZCc6IHRydWUsXG4gICAgICAgICdjb21wZXRpdGl2ZV9hbmFseXNpcyc6IGZhbHNlLFxuICAgICAgICAncHJpY2luZ19vcHRpbWl6YXRpb24nOiBmYWxzZVxuICAgICAgfSlcblxuICAgICAgcmVuZGVyV2l0aFByb3ZpZGVycyg8UGVyZm9ybWFuY2VNZXRyaWNzIC8+KVxuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yTG9hZGluZ1RvRmluaXNoKClcbiAgICAgIFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL21hcmtldCBwZXJmb3JtYW5jZS9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgZXhwZWN0KHNjcmVlbi5xdWVyeUJ5VGV4dCgvY29tcGV0aXRpdmUgYW5hbHlzaXMvaSkpLm5vdC50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXh0KC9wcmljaW5nIG9wdGltaXphdGlvbi9pKSkubm90LnRvQmVJblRoZURvY3VtZW50KClcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3dzIGFsbCBmZWF0dXJlcyB3aGVuIGZlYXR1cmUgZmxhZ3MgYXJlIGVuYWJsZWQnLCBhc3luYyAoKSA9PiB7XG4gICAgICBtb2NrSGFuZGxlclV0aWxzLnNldE1vY2tGZWF0dXJlRmxhZ3Moe1xuICAgICAgICAnbWFya2V0X2VkZ2VfZW5hYmxlZCc6IHRydWUsXG4gICAgICAgICdjb21wZXRpdGl2ZV9hbmFseXNpcyc6IHRydWUsXG4gICAgICAgICdwcmljaW5nX29wdGltaXphdGlvbic6IHRydWVcbiAgICAgIH0pXG5cbiAgICAgIHJlbmRlcldpdGhQcm92aWRlcnMoPFBlcmZvcm1hbmNlTWV0cmljcyAvPilcbiAgICAgIFxuICAgICAgYXdhaXQgd2FpdEZvckxvYWRpbmdUb0ZpbmlzaCgpXG4gICAgICBcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9tYXJrZXQgcGVyZm9ybWFuY2UvaSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChzY3JlZW4uZ2V0QnlUZXh0KC9jb21wZXRpdGl2ZSBhbmFseXNpcy9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRleHQoL3ByaWNpbmcgb3B0aW1pemF0aW9uL2kpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnUmF0ZSBMaW1pdGluZyBJbnRlZ3JhdGlvbicsICgpID0+IHtcbiAgICBpdCgnaGFuZGxlcyByYXRlIGxpbWl0IGVycm9ycyBhcHByb3ByaWF0ZWx5JywgYXN5bmMgKCkgPT4ge1xuICAgICAgc2VydmVyLnVzZShcbiAgICAgICAgcmVzdC5nZXQoJyovYXBpL3YxL21hcmtldC1lZGdlL2Rhc2hib2FyZCcsIChyZXEsIHJlcywgY3R4KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHJlcyhcbiAgICAgICAgICAgIGN0eC5zdGF0dXMoNDI5KSxcbiAgICAgICAgICAgIGN0eC5qc29uKHtcbiAgICAgICAgICAgICAgZXJyb3I6ICdSYXRlIGxpbWl0IGV4Y2VlZGVkJyxcbiAgICAgICAgICAgICAgbWVzc2FnZTogJ1RvbyBtYW55IHJlcXVlc3RzLiBQbGVhc2UgdHJ5IGFnYWluIGxhdGVyLicsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIGN0eC5zZXQoJ1gtUmF0ZUxpbWl0LUxpbWl0JywgJzUwMDAnKSxcbiAgICAgICAgICAgIGN0eC5zZXQoJ1gtUmF0ZUxpbWl0LVJlbWFpbmluZycsICcwJyksXG4gICAgICAgICAgICBjdHguc2V0KCdYLVJhdGVMaW1pdC1SZXNldCcsIFN0cmluZyhEYXRlLm5vdygpICsgMzYwMCkpXG4gICAgICAgICAgKVxuICAgICAgICB9KVxuICAgICAgKVxuXG4gICAgICByZW5kZXJXaXRoUHJvdmlkZXJzKDxQZXJmb3JtYW5jZU1ldHJpY3MgLz4pXG4gICAgICBcbiAgICAgIGF3YWl0IHdhaXRGb3IoKCkgPT4ge1xuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvcmF0ZSBsaW1pdCBleGNlZWRlZC9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGV4dCgvcGxlYXNlIHRyeSBhZ2FpbiBsYXRlci9pKSkudG9CZUluVGhlRG9jdW1lbnQoKVxuICAgICAgfSlcbiAgICAgIFxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3RyeSBhZ2Fpbi9pIH0pKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgfSlcbiAgfSlcblxuICBkZXNjcmliZSgnQWNjZXNzaWJpbGl0eScsICgpID0+IHtcbiAgICBpdCgnaGFzIHByb3BlciBBUklBIGxhYmVscyBhbmQgcm9sZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgICByZW5kZXJXaXRoUHJvdmlkZXJzKDxQZXJmb3JtYW5jZU1ldHJpY3MgLz4pXG4gICAgICBcbiAgICAgIGF3YWl0IHdhaXRGb3JMb2FkaW5nVG9GaW5pc2goKVxuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgncmVnaW9uJywgeyBuYW1lOiAvcGVyZm9ybWFuY2UgbWV0cmljcy9pIH0pKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5Um9sZSgnYnV0dG9uJywgeyBuYW1lOiAvcmVmcmVzaCBtZXRyaWNzL2kgfSkpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIFxuICAgICAgY29uc3QgY2hhcnRzID0gc2NyZWVuLmdldEFsbEJ5Um9sZSgnaW1nJywgeyBuYW1lOiAvcGVyZm9ybWFuY2UgY2hhcnQvaSB9KVxuICAgICAgZXhwZWN0KGNoYXJ0cy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKVxuICAgIH0pXG5cbiAgICBpdCgnc3VwcG9ydHMga2V5Ym9hcmQgbmF2aWdhdGlvbicsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IHVzZXIgPSB1c2VyRXZlbnQuc2V0dXAoKVxuICAgICAgcmVuZGVyV2l0aFByb3ZpZGVycyg8UGVyZm9ybWFuY2VNZXRyaWNzIC8+KVxuICAgICAgXG4gICAgICBhd2FpdCB3YWl0Rm9yTG9hZGluZ1RvRmluaXNoKClcbiAgICAgIFxuICAgICAgY29uc3QgcmVmcmVzaEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVJvbGUoJ2J1dHRvbicsIHsgbmFtZTogL3JlZnJlc2gvaSB9KVxuICAgICAgcmVmcmVzaEJ1dHRvbi5mb2N1cygpXG4gICAgICBcbiAgICAgIGF3YWl0IHVzZXIua2V5Ym9hcmQoJ3tFbnRlcn0nKVxuICAgICAgZXhwZWN0KHNjcmVlbi5nZXRCeVRlc3RJZCgnbG9hZGluZy1zcGlubmVyJykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICB9KVxuICB9KVxuXG4gIGRlc2NyaWJlKCdSZXNwb25zaXZlIERlc2lnbicsICgpID0+IHtcbiAgICBpdCgnYWRhcHRzIGxheW91dCBmb3IgbW9iaWxlIHNjcmVlbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIG1vYmlsZSB2aWV3cG9ydFxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2lubmVyV2lkdGgnLCB7IHZhbHVlOiAzNzUgfSlcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdpbm5lckhlaWdodCcsIHsgdmFsdWU6IDY2NyB9KVxuICAgICAgXG4gICAgICByZW5kZXJXaXRoUHJvdmlkZXJzKDxQZXJmb3JtYW5jZU1ldHJpY3MgLz4pXG4gICAgICBcbiAgICAgIGF3YWl0IHdhaXRGb3JMb2FkaW5nVG9GaW5pc2goKVxuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdtb2JpbGUtbGF5b3V0JykpLnRvQmVJblRoZURvY3VtZW50KClcbiAgICAgIGV4cGVjdChzY3JlZW4ucXVlcnlCeVRlc3RJZCgnZGVza3RvcC1sYXlvdXQnKSkubm90LnRvQmVJblRoZURvY3VtZW50KClcbiAgICB9KVxuXG4gICAgaXQoJ3Nob3dzIGZ1bGwgbGF5b3V0IGZvciBkZXNrdG9wIHNjcmVlbnMnLCBhc3luYyAoKSA9PiB7XG4gICAgICAvLyBNb2NrIGRlc2t0b3Agdmlld3BvcnRcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csICdpbm5lcldpZHRoJywgeyB2YWx1ZTogMTkyMCB9KVxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgJ2lubmVySGVpZ2h0JywgeyB2YWx1ZTogMTA4MCB9KVxuICAgICAgXG4gICAgICByZW5kZXJXaXRoUHJvdmlkZXJzKDxQZXJmb3JtYW5jZU1ldHJpY3MgLz4pXG4gICAgICBcbiAgICAgIGF3YWl0IHdhaXRGb3JMb2FkaW5nVG9GaW5pc2goKVxuICAgICAgXG4gICAgICBleHBlY3Qoc2NyZWVuLmdldEJ5VGVzdElkKCdkZXNrdG9wLWxheW91dCcpKS50b0JlSW5UaGVEb2N1bWVudCgpXG4gICAgICBleHBlY3Qoc2NyZWVuLnF1ZXJ5QnlUZXN0SWQoJ21vYmlsZS1sYXlvdXQnKSkubm90LnRvQmVJblRoZURvY3VtZW50KClcbiAgICB9KVxuICB9KVxufSkiXSwibmFtZXMiOlsiZGVzY3JpYmUiLCJiZWZvcmVFYWNoIiwibW9ja0hhbmRsZXJVdGlscyIsInJlc2V0TW9ja3MiLCJpdCIsInJlbmRlcldpdGhQcm92aWRlcnMiLCJQZXJmb3JtYW5jZU1ldHJpY3MiLCJpc0xvYWRpbmciLCJleHBlY3QiLCJzY3JlZW4iLCJnZXRBbGxCeVRleHQiLCJzZWxlY3RvciIsInRvSGF2ZUxlbmd0aCIsImFueSIsIk51bWJlciIsInNrZWxldG9uQ2FyZHMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJsZW5ndGgiLCJ0b0JlR3JlYXRlclRoYW4iLCJnZXRCeVRleHQiLCJ0b0JlSW5UaGVEb2N1bWVudCIsIm1vY2tNZXRyaWNzIiwicGVyaW9kX3N0YXJ0IiwicGVyaW9kX2VuZCIsInRvdGFsX2RhdGFfcG9pbnRzIiwiYXZlcmFnZV9wcmljZSIsIm1lZGlhbl9wcmljZSIsIm1pbl9wcmljZSIsIm1heF9wcmljZSIsInByaWNlX3JhbmdlIiwic3RhbmRhcmRfZGV2aWF0aW9uIiwicHJpY2VfcXVhcnRpbGVzIiwicTEiLCJxMiIsInEzIiwiY29tcGV0aXRvcnMiLCJuYW1lIiwicHJpY2VfcG9pbnRzX2NvdW50IiwicHJpY2VfcmFuayIsInBvc2l0aW9uIiwidHJlbmRzIiwidHJlbmQiLCJ3ZWVrbHlfYXZlcmFnZXMiLCJwcmljZV9jaGFuZ2UiLCJwcmljZV9jaGFuZ2VfcGVyY2VudCIsImFub21hbGllcyIsIm1ldHJpY3MiLCJzZXJ2ZXIiLCJ1c2UiLCJyZXN0IiwiZ2V0IiwicmVxIiwicmVzIiwiY3R4Iiwic3RhdHVzIiwianNvbiIsImVycm9yIiwid2FpdEZvciIsImdldEJ5Um9sZSIsInJlbmRlcldpdGhJbmR1c3RyeSIsIndhaXRGb3JMb2FkaW5nVG9GaW5pc2giLCJyZW5kZXJXaXRoU3Vic2NyaXB0aW9uIiwicXVlcnlCeVRleHQiLCJub3QiLCJ1c2VyIiwidXNlckV2ZW50Iiwic2V0dXAiLCJyZWZyZXNoQnV0dG9uIiwiY2xpY2siLCJnZXRCeVRlc3RJZCIsInBlcmlvZFNlbGVjdG9yIiwic2VsZWN0T3B0aW9ucyIsImV4cG9ydEJ1dHRvbiIsImNzdk9wdGlvbiIsInNldE1vY2tGZWF0dXJlRmxhZ3MiLCJtZXNzYWdlIiwic2V0IiwiU3RyaW5nIiwiRGF0ZSIsIm5vdyIsImNoYXJ0cyIsImdldEFsbEJ5Um9sZSIsImZvY3VzIiwia2V5Ym9hcmQiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIndpbmRvdyIsInZhbHVlIiwicXVlcnlCeVRlc3RJZCJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Q0FJQzs7Ozs7OERBRWlCO3dCQUNjO2tFQUNWO3FCQUNEO3dCQUNFOzBCQUNVOzJCQVExQjtvQ0FDNEI7Ozs7OztBQUVuQ0EsU0FBUyxnQ0FBZ0M7SUFDdkNDLFdBQVc7UUFDVEMsMEJBQWdCLENBQUNDLFVBQVU7SUFDN0I7SUFFQUgsU0FBUyxtQkFBbUI7UUFDMUJJLEdBQUcsZ0RBQWdEO1lBQ2pEQyxJQUFBQSw4QkFBbUIsZ0JBQUMscUJBQUNDLHNDQUFrQjtnQkFBQ0MsV0FBVzs7WUFFbkQsbUNBQW1DO1lBQ25DQyxPQUFPQyxjQUFNLENBQUNDLFlBQVksQ0FBQyxJQUFJO2dCQUFFQyxVQUFVO1lBQU0sSUFBSUMsWUFBWSxDQUFDSixPQUFPSyxHQUFHLENBQUNDO1lBQzdFLE1BQU1DLGdCQUFnQkMsU0FBU0Ms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