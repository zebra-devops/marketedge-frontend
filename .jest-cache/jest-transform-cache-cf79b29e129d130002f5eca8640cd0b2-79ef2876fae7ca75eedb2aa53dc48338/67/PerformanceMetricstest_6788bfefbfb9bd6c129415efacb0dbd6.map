{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/market-edge/__tests__/PerformanceMetrics.test.tsx"],"sourcesContent":["/**\n * Integration test for PerformanceMetrics component\n * \n * Demonstrates multi-tenant testing with API integration and different industry contexts\n */\n\nimport React from 'react'\nimport { screen, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { rest } from 'msw'\nimport { server } from '../../../__tests__/mocks/server'\nimport { mockHandlerUtils } from '../../../__tests__/mocks/handlers'\nimport { \n  renderWithProviders, \n  renderWithIndustry, \n  renderWithSubscription,\n  createMockUser,\n  createMockOrganization,\n  waitForLoadingToFinish\n} from '../../../__tests__/utils/test-utils'\nimport { PerformanceMetrics } from '../PerformanceMetrics'\n\ndescribe('PerformanceMetrics Component', () => {\n  beforeEach(() => {\n    mockHandlerUtils.resetMocks()\n  })\n\n  describe('Basic Rendering', () => {\n    it('renders loading state when isLoading is true', () => {\n      renderWithProviders(<PerformanceMetrics isLoading={true} />)\n      \n      // Check for loading skeleton cards\n      expect(screen.getAllByText('', { selector: 'div' })).toHaveLength(expect.any(Number))\n      const skeletonCards = document.querySelectorAll('.animate-pulse')\n      expect(skeletonCards.length).toBeGreaterThan(0)\n    })\n\n    it('displays empty state when no metrics provided', () => {\n      renderWithProviders(<PerformanceMetrics />)\n      \n      expect(screen.getByText(/no metrics available/i)).toBeInTheDocument()\n      expect(screen.getByText(/metrics will appear here once pricing data is analyzed/i)).toBeInTheDocument()\n    })\n\n    it('displays performance metrics when data is provided', () => {\n      const mockMetrics = {\n        period_start: '2025-01-01T00:00:00Z',\n        period_end: '2025-01-14T23:59:59Z',\n        total_data_points: 150,\n        average_price: 125.50,\n        median_price: 120.00,\n        min_price: 85.00,\n        max_price: 200.00,\n        price_range: 115.00,\n        standard_deviation: 25.75,\n        price_quartiles: {\n          q1: 100.00,\n          q2: 120.00,\n          q3: 145.00\n        },\n        competitors: {\n          'comp-1': {\n            name: 'Competitor A',\n            average_price: 130.00,\n            median_price: 125.00,\n            min_price: 110.00,\n            max_price: 160.00,\n            price_points_count: 50,\n            standard_deviation: 15.50,\n            price_rank: 1,\n            position: 'high' as const\n          }\n        },\n        trends: {\n          trend: 'increasing' as const,\n          weekly_averages: {\n            '2025-01-01': 120.00,\n            '2025-01-08': 125.50\n          },\n          price_change: 5.50,\n          price_change_percent: 4.6\n        },\n        anomalies: []\n      }\n\n      renderWithProviders(<PerformanceMetrics metrics={mockMetrics} />)\n      \n      // Check that metrics are displayed\n      expect(screen.getByText('£125.50')).toBeInTheDocument() // average price\n      expect(screen.getByText('£120.00')).toBeInTheDocument() // median price\n      expect(screen.getByText('£85.00')).toBeInTheDocument()  // min price\n      expect(screen.getByText('£200.00')).toBeInTheDocument() // max price\n    })\n\n    it('handles API errors gracefully', async () => {\n      // Mock API error\n      server.use(\n        rest.get('*/api/v1/market-edge/dashboard', (req, res, ctx) => {\n          return res(\n            ctx.status(500),\n            ctx.json({ error: 'Internal Server Error' })\n          )\n        })\n      )\n\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitFor(() => {\n        expect(screen.getByText(/failed to load performance metrics/i)).toBeInTheDocument()\n      })\n      \n      expect(screen.getByRole('button', { name: /try again/i })).toBeInTheDocument()\n    })\n  })\n\n  describe('Multi-Tenant Industry Scenarios', () => {\n    it('displays hotel-specific metrics for hotel industry', async () => {\n      renderWithIndustry(<PerformanceMetrics />, 'hotel')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/occupancy rate/i)).toBeInTheDocument()\n      expect(screen.getByText(/adr \\(average daily rate\\)/i)).toBeInTheDocument()\n      expect(screen.getByText(/revpar/i)).toBeInTheDocument()\n    })\n\n    it('displays cinema-specific metrics for cinema industry', async () => {\n      renderWithIndustry(<PerformanceMetrics />, 'cinema')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/ticket sales/i)).toBeInTheDocument()\n      expect(screen.getByText(/box office performance/i)).toBeInTheDocument()\n      expect(screen.getByText(/screening utilization/i)).toBeInTheDocument()\n    })\n\n    it('displays gym-specific metrics for gym industry', async () => {\n      renderWithIndustry(<PerformanceMetrics />, 'gym')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/membership growth/i)).toBeInTheDocument()\n      expect(screen.getByText(/facility utilization/i)).toBeInTheDocument()\n      expect(screen.getByText(/member retention/i)).toBeInTheDocument()\n    })\n\n    it('displays retail-specific metrics for retail industry', async () => {\n      renderWithIndustry(<PerformanceMetrics />, 'retail')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/sales per square foot/i)).toBeInTheDocument()\n      expect(screen.getByText(/inventory turnover/i)).toBeInTheDocument()\n      expect(screen.getByText(/customer conversion/i)).toBeInTheDocument()\n    })\n\n    it('displays b2b-specific metrics for b2b service industry', async () => {\n      renderWithIndustry(<PerformanceMetrics />, 'b2b_service')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/client acquisition cost/i)).toBeInTheDocument()\n      expect(screen.getByText(/monthly recurring revenue/i)).toBeInTheDocument()\n      expect(screen.getByText(/churn rate/i)).toBeInTheDocument()\n    })\n  })\n\n  describe('Subscription Plan Features', () => {\n    it('shows basic metrics for basic subscription', async () => {\n      renderWithSubscription(<PerformanceMetrics />, 'basic')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/basic metrics/i)).toBeInTheDocument()\n      expect(screen.queryByText(/advanced analytics/i)).not.toBeInTheDocument()\n      expect(screen.queryByText(/predictive insights/i)).not.toBeInTheDocument()\n    })\n\n    it('shows enhanced metrics for professional subscription', async () => {\n      renderWithSubscription(<PerformanceMetrics />, 'professional')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/basic metrics/i)).toBeInTheDocument()\n      expect(screen.getByText(/advanced analytics/i)).toBeInTheDocument()\n      expect(screen.queryByText(/predictive insights/i)).not.toBeInTheDocument()\n    })\n\n    it('shows all metrics for enterprise subscription', async () => {\n      renderWithSubscription(<PerformanceMetrics />, 'enterprise')\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/basic metrics/i)).toBeInTheDocument()\n      expect(screen.getByText(/advanced analytics/i)).toBeInTheDocument()\n      expect(screen.getByText(/predictive insights/i)).toBeInTheDocument()\n      expect(screen.getByText(/custom reporting/i)).toBeInTheDocument()\n    })\n  })\n\n  describe('User Interactions', () => {\n    it('allows users to refresh metrics', async () => {\n      const user = userEvent.setup()\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      const refreshButton = screen.getByRole('button', { name: /refresh/i })\n      await user.click(refreshButton)\n      \n      expect(screen.getByTestId('loading-spinner')).toBeInTheDocument()\n      \n      await waitForLoadingToFinish()\n      expect(screen.getByText(/market performance/i)).toBeInTheDocument()\n    })\n\n    it('allows users to change time period', async () => {\n      const user = userEvent.setup()\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      const periodSelector = screen.getByRole('combobox', { name: /time period/i })\n      await user.selectOptions(periodSelector, '30d')\n      \n      await waitFor(() => {\n        expect(screen.getByText(/last 30 days/i)).toBeInTheDocument()\n      })\n    })\n\n    it('allows users to export data', async () => {\n      const user = userEvent.setup()\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      const exportButton = screen.getByRole('button', { name: /export/i })\n      await user.click(exportButton)\n      \n      expect(screen.getByText(/export options/i)).toBeInTheDocument()\n      \n      const csvOption = screen.getByRole('button', { name: /export as csv/i })\n      await user.click(csvOption)\n      \n      // Verify download was triggered (this would need to be mocked in real implementation)\n      await waitFor(() => {\n        expect(screen.getByText(/download started/i)).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Feature Flag Integration', () => {\n    it('hides advanced features when feature flags are disabled', async () => {\n      mockHandlerUtils.setMockFeatureFlags({\n        'market_edge_enabled': true,\n        'competitive_analysis': false,\n        'pricing_optimization': false\n      })\n\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/market performance/i)).toBeInTheDocument()\n      expect(screen.queryByText(/competitive analysis/i)).not.toBeInTheDocument()\n      expect(screen.queryByText(/pricing optimization/i)).not.toBeInTheDocument()\n    })\n\n    it('shows all features when feature flags are enabled', async () => {\n      mockHandlerUtils.setMockFeatureFlags({\n        'market_edge_enabled': true,\n        'competitive_analysis': true,\n        'pricing_optimization': true\n      })\n\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByText(/market performance/i)).toBeInTheDocument()\n      expect(screen.getByText(/competitive analysis/i)).toBeInTheDocument()\n      expect(screen.getByText(/pricing optimization/i)).toBeInTheDocument()\n    })\n  })\n\n  describe('Rate Limiting Integration', () => {\n    it('handles rate limit errors appropriately', async () => {\n      server.use(\n        rest.get('*/api/v1/market-edge/dashboard', (req, res, ctx) => {\n          return res(\n            ctx.status(429),\n            ctx.json({\n              error: 'Rate limit exceeded',\n              message: 'Too many requests. Please try again later.',\n            }),\n            ctx.set('X-RateLimit-Limit', '5000'),\n            ctx.set('X-RateLimit-Remaining', '0'),\n            ctx.set('X-RateLimit-Reset', String(Date.now() + 3600))\n          )\n        })\n      )\n\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitFor(() => {\n        expect(screen.getByText(/rate limit exceeded/i)).toBeInTheDocument()\n        expect(screen.getByText(/please try again later/i)).toBeInTheDocument()\n      })\n      \n      expect(screen.getByRole('button', { name: /try again/i })).toBeInTheDocument()\n    })\n  })\n\n  describe('Accessibility', () => {\n    it('has proper ARIA labels and roles', async () => {\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByRole('region', { name: /performance metrics/i })).toBeInTheDocument()\n      expect(screen.getByRole('button', { name: /refresh metrics/i })).toBeInTheDocument()\n      \n      const charts = screen.getAllByRole('img', { name: /performance chart/i })\n      expect(charts.length).toBeGreaterThan(0)\n    })\n\n    it('supports keyboard navigation', async () => {\n      const user = userEvent.setup()\n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      const refreshButton = screen.getByRole('button', { name: /refresh/i })\n      refreshButton.focus()\n      \n      await user.keyboard('{Enter}')\n      expect(screen.getByTestId('loading-spinner')).toBeInTheDocument()\n    })\n  })\n\n  describe('Responsive Design', () => {\n    it('adapts layout for mobile screens', async () => {\n      // Mock mobile viewport\n      Object.defineProperty(window, 'innerWidth', { value: 375 })\n      Object.defineProperty(window, 'innerHeight', { value: 667 })\n      \n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByTestId('mobile-layout')).toBeInTheDocument()\n      expect(screen.queryByTestId('desktop-layout')).not.toBeInTheDocument()\n    })\n\n    it('shows full layout for desktop screens', async () => {\n      // Mock desktop viewport\n      Object.defineProperty(window, 'innerWidth', { value: 1920 })\n      Object.defineProperty(window, 'innerHeight', { value: 1080 })\n      \n      renderWithProviders(<PerformanceMetrics />)\n      \n      await waitForLoadingToFinish()\n      \n      expect(screen.getByTestId('desktop-layout')).toBeInTheDocument()\n      expect(screen.queryByTestId('mobile-layout')).not.toBeInTheDocument()\n    })\n  })\n})"],"names":["describe","beforeEach","mockHandlerUtils","resetMocks","it","renderWithProviders","PerformanceMetrics","isLoading","expect","screen","getAllByText","selector","toHaveLength","any","Number","skeletonCards","document","querySelectorAll","length","toBeGreaterThan","getByText","toBeInTheDocument","mockMetrics","period_start","period_end","total_data_points","average_price","median_price","min_price","max_price","price_range","standard_deviation","price_quartiles","q1","q2","q3","competitors","name","price_points_count","price_rank","position","trends","trend","weekly_averages","price_change","price_change_percent","anomalies","metrics","server","use","rest","get","req","res","ctx","status","json","error","waitFor","getByRole","renderWithIndustry","waitForLoadingToFinish","renderWithSubscription","queryByText","not","user","userEvent","setup","refreshButton","click","getByTestId","periodSelector","selectOptions","exportButton","csvOption","setMockFeatureFlags","message","set","String","Date","now","charts","getAllByRole","focus","keyboard","Object","defineProperty","window","value","queryByTestId"],"mappings":"AAAA;;;;CAIC;;;;;8DAEiB;wBACc;kEACV;qBACD;wBACE;0BACU;2BAQ1B;oCAC4B;;;;;;AAEnCA,SAAS,gCAAgC;IACvCC,WAAW;QACTC,0BAAgB,CAACC,UAAU;IAC7B;IAEAH,SAAS,mBAAmB;QAC1BI,GAAG,gDAAgD;YACjDC,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;gBAACC,WAAW;;YAEnD,mCAAmC;YACnCC,OAAOC,cAAM,CAACC,YAAY,CAAC,IAAI;gBAAEC,UAAU;YAAM,IAAIC,YAAY,CAACJ,OAAOK,GAAG,CAACC;YAC7E,MAAMC,gBAAgBC,SAASC,gBAAgB,CAAC;YAChDT,OAAOO,cAAcG,MAAM,EAAEC,eAAe,CAAC;QAC/C;QAEAf,GAAG,iDAAiD;YAClDC,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvCE,OAAOC,cAAM,CAACW,SAAS,CAAC,0BAA0BC,iBAAiB;YACnEb,OAAOC,cAAM,CAACW,SAAS,CAAC,4DAA4DC,iBAAiB;QACvG;QAEAjB,GAAG,sDAAsD;YACvD,MAAMkB,cAAc;gBAClBC,cAAc;gBACdC,YAAY;gBACZC,mBAAmB;gBACnBC,eAAe;gBACfC,cAAc;gBACdC,WAAW;gBACXC,WAAW;gBACXC,aAAa;gBACbC,oBAAoB;gBACpBC,iBAAiB;oBACfC,IAAI;oBACJC,IAAI;oBACJC,IAAI;gBACN;gBACAC,aAAa;oBACX,UAAU;wBACRC,MAAM;wBACNX,eAAe;wBACfC,cAAc;wBACdC,WAAW;wBACXC,WAAW;wBACXS,oBAAoB;wBACpBP,oBAAoB;wBACpBQ,YAAY;wBACZC,UAAU;oBACZ;gBACF;gBACAC,QAAQ;oBACNC,OAAO;oBACPC,iBAAiB;wBACf,cAAc;wBACd,cAAc;oBAChB;oBACAC,cAAc;oBACdC,sBAAsB;gBACxB;gBACAC,WAAW,EAAE;YACf;YAEAzC,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;gBAACyC,SAASzB;;YAEjD,mCAAmC;YACnCd,OAAOC,cAAM,CAACW,SAAS,CAAC,eAAYC,iBAAiB,GAAG,gBAAgB;;YACxEb,OAAOC,cAAM,CAACW,SAAS,CAAC,eAAYC,iBAAiB,GAAG,eAAe;;YACvEb,OAAOC,cAAM,CAACW,SAAS,CAAC,cAAWC,iBAAiB,GAAI,YAAY;;YACpEb,OAAOC,cAAM,CAACW,SAAS,CAAC,eAAYC,iBAAiB,GAAG,YAAY;;QACtE;QAEAjB,GAAG,iCAAiC;YAClC,iBAAiB;YACjB4C,cAAM,CAACC,GAAG,CACRC,SAAI,CAACC,GAAG,CAAC,kCAAkC,CAACC,KAAKC,KAAKC;gBACpD,OAAOD,IACLC,IAAIC,MAAM,CAAC,MACXD,IAAIE,IAAI,CAAC;oBAAEC,OAAO;gBAAwB;YAE9C;YAGFpD,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMoD,IAAAA,eAAO,EAAC;gBACZlD,OAAOC,cAAM,CAACW,SAAS,CAAC,wCAAwCC,iBAAiB;YACnF;YAEAb,OAAOC,cAAM,CAACkD,SAAS,CAAC,UAAU;gBAAEtB,MAAM;YAAa,IAAIhB,iBAAiB;QAC9E;IACF;IAEArB,SAAS,mCAAmC;QAC1CI,GAAG,sDAAsD;YACvDwD,IAAAA,6BAAkB,gBAAC,qBAACtD,sCAAkB,OAAK;YAE3C,MAAMuD,IAAAA,iCAAsB;YAE5BrD,OAAOC,cAAM,CAACW,SAAS,CAAC,oBAAoBC,iBAAiB;YAC7Db,OAAOC,cAAM,CAACW,SAAS,CAAC,gCAAgCC,iBAAiB;YACzEb,OAAOC,cAAM,CAACW,SAAS,CAAC,YAAYC,iBAAiB;QACvD;QAEAjB,GAAG,wDAAwD;YACzDwD,IAAAA,6BAAkB,gBAAC,qBAACtD,sCAAkB,OAAK;YAE3C,MAAMuD,IAAAA,iCAAsB;YAE5BrD,OAAOC,cAAM,CAACW,SAAS,CAAC,kBAAkBC,iBAAiB;YAC3Db,OAAOC,cAAM,CAACW,SAAS,CAAC,4BAA4BC,iBAAiB;YACrEb,OAAOC,cAAM,CAACW,SAAS,CAAC,2BAA2BC,iBAAiB;QACtE;QAEAjB,GAAG,kDAAkD;YACnDwD,IAAAA,6BAAkB,gBAAC,qBAACtD,sCAAkB,OAAK;YAE3C,MAAMuD,IAAAA,iCAAsB;YAE5BrD,OAAOC,cAAM,CAACW,SAAS,CAAC,uBAAuBC,iBAAiB;YAChEb,OAAOC,cAAM,CAACW,SAAS,CAAC,0BAA0BC,iBAAiB;YACnEb,OAAOC,cAAM,CAACW,SAAS,CAAC,sBAAsBC,iBAAiB;QACjE;QAEAjB,GAAG,wDAAwD;YACzDwD,IAAAA,6BAAkB,gBAAC,qBAACtD,sCAAkB,OAAK;YAE3C,MAAMuD,IAAAA,iCAAsB;YAE5BrD,OAAOC,cAAM,CAACW,SAAS,CAAC,2BAA2BC,iBAAiB;YACpEb,OAAOC,cAAM,CAACW,SAAS,CAAC,wBAAwBC,iBAAiB;YACjEb,OAAOC,cAAM,CAACW,SAAS,CAAC,yBAAyBC,iBAAiB;QACpE;QAEAjB,GAAG,0DAA0D;YAC3DwD,IAAAA,6BAAkB,gBAAC,qBAACtD,sCAAkB,OAAK;YAE3C,MAAMuD,IAAAA,iCAAsB;YAE5BrD,OAAOC,cAAM,CAACW,SAAS,CAAC,6BAA6BC,iBAAiB;YACtEb,OAAOC,cAAM,CAACW,SAAS,CAAC,+BAA+BC,iBAAiB;YACxEb,OAAOC,cAAM,CAACW,SAAS,CAAC,gBAAgBC,iBAAiB;QAC3D;IACF;IAEArB,SAAS,8BAA8B;QACrCI,GAAG,8CAA8C;YAC/C0D,IAAAA,iCAAsB,gBAAC,qBAACxD,sCAAkB,OAAK;YAE/C,MAAMuD,IAAAA,iCAAsB;YAE5BrD,OAAOC,cAAM,CAACW,SAAS,CAAC,mBAAmBC,iBAAiB;YAC5Db,OAAOC,cAAM,CAACsD,WAAW,CAAC,wBAAwBC,GAAG,CAAC3C,iBAAiB;YACvEb,OAAOC,cAAM,CAACsD,WAAW,CAAC,yBAAyBC,GAAG,CAAC3C,iBAAiB;QAC1E;QAEAjB,GAAG,wDAAwD;YACzD0D,IAAAA,iCAAsB,gBAAC,qBAACxD,sCAAkB,OAAK;YAE/C,MAAMuD,IAAAA,iCAAsB;YAE5BrD,OAAOC,cAAM,CAACW,SAAS,CAAC,mBAAmBC,iBAAiB;YAC5Db,OAAOC,cAAM,CAACW,SAAS,CAAC,wBAAwBC,iBAAiB;YACjEb,OAAOC,cAAM,CAACsD,WAAW,CAAC,yBAAyBC,GAAG,CAAC3C,iBAAiB;QAC1E;QAEAjB,GAAG,iDAAiD;YAClD0D,IAAAA,iCAAsB,gBAAC,qBAACxD,sCAAkB,OAAK;YAE/C,MAAMuD,IAAAA,iCAAsB;YAE5BrD,OAAOC,cAAM,CAACW,SAAS,CAAC,mBAAmBC,iBAAiB;YAC5Db,OAAOC,cAAM,CAACW,SAAS,CAAC,wBAAwBC,iBAAiB;YACjEb,OAAOC,cAAM,CAACW,SAAS,CAAC,yBAAyBC,iBAAiB;YAClEb,OAAOC,cAAM,CAACW,SAAS,CAAC,sBAAsBC,iBAAiB;QACjE;IACF;IAEArB,SAAS,qBAAqB;QAC5BI,GAAG,mCAAmC;YACpC,MAAM6D,OAAOC,kBAAS,CAACC,KAAK;YAC5B9D,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMuD,IAAAA,iCAAsB;YAE5B,MAAMO,gBAAgB3D,cAAM,CAACkD,SAAS,CAAC,UAAU;gBAAEtB,MAAM;YAAW;YACpE,MAAM4B,KAAKI,KAAK,CAACD;YAEjB5D,OAAOC,cAAM,CAAC6D,WAAW,CAAC,oBAAoBjD,iBAAiB;YAE/D,MAAMwC,IAAAA,iCAAsB;YAC5BrD,OAAOC,cAAM,CAACW,SAAS,CAAC,wBAAwBC,iBAAiB;QACnE;QAEAjB,GAAG,sCAAsC;YACvC,MAAM6D,OAAOC,kBAAS,CAACC,KAAK;YAC5B9D,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMuD,IAAAA,iCAAsB;YAE5B,MAAMU,iBAAiB9D,cAAM,CAACkD,SAAS,CAAC,YAAY;gBAAEtB,MAAM;YAAe;YAC3E,MAAM4B,KAAKO,aAAa,CAACD,gBAAgB;YAEzC,MAAMb,IAAAA,eAAO,EAAC;gBACZlD,OAAOC,cAAM,CAACW,SAAS,CAAC,kBAAkBC,iBAAiB;YAC7D;QACF;QAEAjB,GAAG,+BAA+B;YAChC,MAAM6D,OAAOC,kBAAS,CAACC,KAAK;YAC5B9D,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMuD,IAAAA,iCAAsB;YAE5B,MAAMY,eAAehE,cAAM,CAACkD,SAAS,CAAC,UAAU;gBAAEtB,MAAM;YAAU;YAClE,MAAM4B,KAAKI,KAAK,CAACI;YAEjBjE,OAAOC,cAAM,CAACW,SAAS,CAAC,oBAAoBC,iBAAiB;YAE7D,MAAMqD,YAAYjE,cAAM,CAACkD,SAAS,CAAC,UAAU;gBAAEtB,MAAM;YAAiB;YACtE,MAAM4B,KAAKI,KAAK,CAACK;YAEjB,sFAAsF;YACtF,MAAMhB,IAAAA,eAAO,EAAC;gBACZlD,OAAOC,cAAM,CAACW,SAAS,CAAC,sBAAsBC,iBAAiB;YACjE;QACF;IACF;IAEArB,SAAS,4BAA4B;QACnCI,GAAG,2DAA2D;YAC5DF,0BAAgB,CAACyE,mBAAmB,CAAC;gBACnC,uBAAuB;gBACvB,wBAAwB;gBACxB,wBAAwB;YAC1B;YAEAtE,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMuD,IAAAA,iCAAsB;YAE5BrD,OAAOC,cAAM,CAACW,SAAS,CAAC,wBAAwBC,iBAAiB;YACjEb,OAAOC,cAAM,CAACsD,WAAW,CAAC,0BAA0BC,GAAG,CAAC3C,iBAAiB;YACzEb,OAAOC,cAAM,CAACsD,WAAW,CAAC,0BAA0BC,GAAG,CAAC3C,iBAAiB;QAC3E;QAEAjB,GAAG,qDAAqD;YACtDF,0BAAgB,CAACyE,mBAAmB,CAAC;gBACnC,uBAAuB;gBACvB,wBAAwB;gBACxB,wBAAwB;YAC1B;YAEAtE,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMuD,IAAAA,iCAAsB;YAE5BrD,OAAOC,cAAM,CAACW,SAAS,CAAC,wBAAwBC,iBAAiB;YACjEb,OAAOC,cAAM,CAACW,SAAS,CAAC,0BAA0BC,iBAAiB;YACnEb,OAAOC,cAAM,CAACW,SAAS,CAAC,0BAA0BC,iBAAiB;QACrE;IACF;IAEArB,SAAS,6BAA6B;QACpCI,GAAG,2CAA2C;YAC5C4C,cAAM,CAACC,GAAG,CACRC,SAAI,CAACC,GAAG,CAAC,kCAAkC,CAACC,KAAKC,KAAKC;gBACpD,OAAOD,IACLC,IAAIC,MAAM,CAAC,MACXD,IAAIE,IAAI,CAAC;oBACPC,OAAO;oBACPmB,SAAS;gBACX,IACAtB,IAAIuB,GAAG,CAAC,qBAAqB,SAC7BvB,IAAIuB,GAAG,CAAC,yBAAyB,MACjCvB,IAAIuB,GAAG,CAAC,qBAAqBC,OAAOC,KAAKC,GAAG,KAAK;YAErD;YAGF3E,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMoD,IAAAA,eAAO,EAAC;gBACZlD,OAAOC,cAAM,CAACW,SAAS,CAAC,yBAAyBC,iBAAiB;gBAClEb,OAAOC,cAAM,CAACW,SAAS,CAAC,4BAA4BC,iBAAiB;YACvE;YAEAb,OAAOC,cAAM,CAACkD,SAAS,CAAC,UAAU;gBAAEtB,MAAM;YAAa,IAAIhB,iBAAiB;QAC9E;IACF;IAEArB,SAAS,iBAAiB;QACxBI,GAAG,oCAAoC;YACrCC,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMuD,IAAAA,iCAAsB;YAE5BrD,OAAOC,cAAM,CAACkD,SAAS,CAAC,UAAU;gBAAEtB,MAAM;YAAuB,IAAIhB,iBAAiB;YACtFb,OAAOC,cAAM,CAACkD,SAAS,CAAC,UAAU;gBAAEtB,MAAM;YAAmB,IAAIhB,iBAAiB;YAElF,MAAM4D,SAASxE,cAAM,CAACyE,YAAY,CAAC,OAAO;gBAAE7C,MAAM;YAAqB;YACvE7B,OAAOyE,OAAO/D,MAAM,EAAEC,eAAe,CAAC;QACxC;QAEAf,GAAG,gCAAgC;YACjC,MAAM6D,OAAOC,kBAAS,CAACC,KAAK;YAC5B9D,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMuD,IAAAA,iCAAsB;YAE5B,MAAMO,gBAAgB3D,cAAM,CAACkD,SAAS,CAAC,UAAU;gBAAEtB,MAAM;YAAW;YACpE+B,cAAce,KAAK;YAEnB,MAAMlB,KAAKmB,QAAQ,CAAC;YACpB5E,OAAOC,cAAM,CAAC6D,WAAW,CAAC,oBAAoBjD,iBAAiB;QACjE;IACF;IAEArB,SAAS,qBAAqB;QAC5BI,GAAG,oCAAoC;YACrC,uBAAuB;YACvBiF,OAAOC,cAAc,CAACC,QAAQ,cAAc;gBAAEC,OAAO;YAAI;YACzDH,OAAOC,cAAc,CAACC,QAAQ,eAAe;gBAAEC,OAAO;YAAI;YAE1DnF,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMuD,IAAAA,iCAAsB;YAE5BrD,OAAOC,cAAM,CAAC6D,WAAW,CAAC,kBAAkBjD,iBAAiB;YAC7Db,OAAOC,cAAM,CAACgF,aAAa,CAAC,mBAAmBzB,GAAG,CAAC3C,iBAAiB;QACtE;QAEAjB,GAAG,yCAAyC;YAC1C,wBAAwB;YACxBiF,OAAOC,cAAc,CAACC,QAAQ,cAAc;gBAAEC,OAAO;YAAK;YAC1DH,OAAOC,cAAc,CAACC,QAAQ,eAAe;gBAAEC,OAAO;YAAK;YAE3DnF,IAAAA,8BAAmB,gBAAC,qBAACC,sCAAkB;YAEvC,MAAMuD,IAAAA,iCAAsB;YAE5BrD,OAAOC,cAAM,CAAC6D,WAAW,CAAC,mBAAmBjD,iBAAiB;YAC9Db,OAAOC,cAAM,CAACgF,aAAa,CAAC,kBAAkBzB,GAAG,CAAC3C,iBAAiB;QACrE;IACF;AACF"}