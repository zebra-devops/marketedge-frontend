{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/__tests__/mocks/handlers.ts"],"sourcesContent":["/**\n * MSW (Mock Service Worker) handlers for API mocking in tests\n * \n * This file defines mock API responses for all platform endpoints,\n * supporting different tenant scenarios and user contexts.\n */\n\nimport { rest } from 'msw'\nimport { MockUser, MockOrganization, createMockUser, createMockOrganization, createMockFeatureFlags } from '../utils/test-utils'\n\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8000'\n\n// Store for dynamic mock data\nlet mockUsers: Record<string, MockUser> = {}\nlet mockOrganizations: Record<string, MockOrganization> = {}\nlet mockFeatureFlags: Record<string, boolean> = createMockFeatureFlags()\n\n// Helper to get or create mock user\nconst getOrCreateMockUser = (userId: string = 'user-123'): MockUser => {\n  if (!mockUsers[userId]) {\n    mockUsers[userId] = createMockUser({ id: userId })\n  }\n  return mockUsers[userId]\n}\n\n// Helper to get or create mock organization\nconst getOrCreateMockOrganization = (orgId: string = 'org-123'): MockOrganization => {\n  if (!mockOrganizations[orgId]) {\n    mockOrganizations[orgId] = createMockOrganization({ id: orgId })\n  }\n  return mockOrganizations[orgId]\n}\n\nexport const handlers = [\n  // Authentication endpoints\n  rest.get(`${API_BASE_URL}/api/v1/auth/me`, (req, res, ctx) => {\n    const user = getOrCreateMockUser()\n    return res(ctx.status(200), ctx.json(user))\n  }),\n\n  rest.post(`${API_BASE_URL}/api/v1/auth/login`, (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        access_token: 'mock-access-token',\n        refresh_token: 'mock-refresh-token',\n        token_type: 'Bearer',\n        expires_in: 3600,\n      })\n    )\n  }),\n\n  rest.post(`${API_BASE_URL}/api/v1/auth/logout`, (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({ message: 'Logged out successfully' }))\n  }),\n\n  // User endpoints\n  rest.get(`${API_BASE_URL}/api/v1/users/me`, (req, res, ctx) => {\n    const user = getOrCreateMockUser()\n    return res(ctx.status(200), ctx.json(user))\n  }),\n\n  rest.get(`${API_BASE_URL}/api/v1/users`, (req, res, ctx) => {\n    const users = Object.values(mockUsers)\n    return res(ctx.status(200), ctx.json({ users, total: users.length }))\n  }),\n\n  // Organization endpoints\n  rest.get(`${API_BASE_URL}/api/v1/organisations/me`, (req, res, ctx) => {\n    const organization = getOrCreateMockOrganization()\n    return res(ctx.status(200), ctx.json(organization))\n  }),\n\n  rest.get(`${API_BASE_URL}/api/v1/organisations`, (req, res, ctx) => {\n    const organizations = Object.values(mockOrganizations)\n    return res(ctx.status(200), ctx.json({ organizations, total: organizations.length }))\n  }),\n\n  rest.get(`${API_BASE_URL}/api/v1/organisations/:orgId`, (req, res, ctx) => {\n    const { orgId } = req.params\n    const organization = getOrCreateMockOrganization(orgId as string)\n    return res(ctx.status(200), ctx.json(organization))\n  }),\n\n  // Feature flags endpoints\n  rest.get(`${API_BASE_URL}/api/v1/features/flags`, (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({ flags: mockFeatureFlags }))\n  }),\n\n  rest.get(`${API_BASE_URL}/api/v1/features/flags/:flagKey`, (req, res, ctx) => {\n    const { flagKey } = req.params\n    const isEnabled = mockFeatureFlags[flagKey as string] || false\n    return res(ctx.status(200), ctx.json({ \n      flag_key: flagKey,\n      enabled: isEnabled,\n      rollout_percentage: isEnabled ? 100 : 0\n    }))\n  }),\n\n  // Market Edge endpoints\n  rest.get(`${API_BASE_URL}/api/v1/market-edge/dashboard`, (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({\n      competitors: [\n        {\n          id: 'comp-1',\n          name: 'Competitor A',\n          market_share: 25.5,\n          pricing_trend: 'increasing',\n          last_updated: '2025-01-08T10:00:00Z'\n        },\n        {\n          id: 'comp-2',\n          name: 'Competitor B',\n          market_share: 18.3,\n          pricing_trend: 'stable',\n          last_updated: '2025-01-08T10:00:00Z'\n        }\n      ],\n      market_metrics: {\n        total_market_size: 1250000,\n        growth_rate: 8.5,\n        competitive_intensity: 'high'\n      },\n      alerts: [\n        {\n          id: 'alert-1',\n          type: 'price_change',\n          message: 'Competitor A increased prices by 5%',\n          severity: 'medium',\n          timestamp: '2025-01-08T09:30:00Z'\n        }\n      ]\n    }))\n  }),\n\n  rest.get(`${API_BASE_URL}/api/v1/market-edge/competitors`, (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({\n      competitors: [\n        {\n          id: 'comp-1',\n          name: 'Competitor A',\n          website: 'https://competitor-a.com',\n          industry: 'hotel',\n          market_share: 25.5,\n          revenue_estimate: 15000000,\n          employee_count: 150,\n          pricing_strategy: 'premium',\n          key_products: ['Product A1', 'Product A2'],\n          strengths: ['Brand recognition', 'Market presence'],\n          weaknesses: ['Higher prices', 'Limited innovation'],\n          last_analyzed: '2025-01-08T10:00:00Z'\n        }\n      ]\n    }))\n  }),\n\n  rest.get(`${API_BASE_URL}/api/v1/market-edge/pricing`, (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({\n      pricing_data: [\n        {\n          competitor: 'Competitor A',\n          product: 'Standard Room',\n          current_price: 150.00,\n          price_change: 5.0,\n          price_trend: 'increasing',\n          last_updated: '2025-01-08T10:00:00Z'\n        },\n        {\n          competitor: 'Competitor B',\n          product: 'Standard Room',\n          current_price: 145.00,\n          price_change: 0.0,\n          price_trend: 'stable',\n          last_updated: '2025-01-08T10:00:00Z'\n        }\n      ],\n      recommendations: [\n        {\n          type: 'price_optimization',\n          message: 'Consider increasing room rates by 3-7% to maintain competitiveness',\n          confidence: 85,\n          expected_impact: 'Increase revenue by 5-8%'\n        }\n      ]\n    }))\n  }),\n\n  // Admin endpoints\n  rest.get(`${API_BASE_URL}/api/v1/admin/dashboard/stats`, (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({\n      feature_flags: {\n        total: 15,\n        enabled: 12,\n        disabled: 3\n      },\n      modules: {\n        total: 8,\n        active: 6,\n        enabled_for_organisations: 25\n      },\n      activity: {\n        recent_actions_24h: 142\n      },\n      system: {\n        supported_sectors: 12\n      }\n    }))\n  }),\n\n  rest.get(`${API_BASE_URL}/api/v1/admin/rate-limits`, (req, res, ctx) => {\n    const rateLimits = Object.values(mockOrganizations).map(org => ({\n      organization_id: org.id,\n      organization_name: org.name,\n      subscription_plan: org.subscription_plan,\n      rate_limit_per_hour: org.rate_limit_per_hour,\n      burst_limit: org.burst_limit,\n      rate_limit_enabled: org.rate_limit_enabled,\n      industry: org.industry,\n      sic_code: org.sic_code\n    }))\n    \n    return res(ctx.status(200), ctx.json({ rate_limits: rateLimits }))\n  }),\n\n  rest.put(`${API_BASE_URL}/api/v1/admin/rate-limits/:orgId`, (req, res, ctx) => {\n    const { orgId } = req.params\n    const organization = getOrCreateMockOrganization(orgId as string)\n    \n    return res(ctx.status(200), ctx.json({\n      message: 'Rate limits updated successfully',\n      organization: {\n        organization_id: organization.id,\n        organization_name: organization.name,\n        subscription_plan: organization.subscription_plan,\n        rate_limit_per_hour: organization.rate_limit_per_hour,\n        burst_limit: organization.burst_limit,\n        rate_limit_enabled: organization.rate_limit_enabled\n      }\n    }))\n  }),\n\n  rest.get(`${API_BASE_URL}/api/v1/admin/rate-limits/violations`, (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({\n      violations: [\n        {\n          timestamp: 1704715200, // 2025-01-08T10:00:00Z\n          client_id: 'org:org-123:user:user-123',\n          org_id: 'org-123',\n          path: '/api/v1/market-edge/dashboard',\n          rate_limit_info: {\n            limit: 5000,\n            remaining: 0,\n            reset: 1704718800\n          }\n        }\n      ],\n      total: 1\n    }))\n  }),\n\n  // New rate limiting management endpoints\n  rest.get(`${API_BASE_URL}/api/v1/admin/rate-limits`, (req, res, ctx) => {\n    const rateLimits = Object.values(mockOrganizations).map(org => ({\n      id: `rate-limit-${org.id}`,\n      tenant_id: org.id,\n      tenant_name: org.name,\n      tier: org.subscription_plan === 'basic' ? 'standard' : \n            org.subscription_plan === 'professional' ? 'premium' : 'enterprise',\n      requests_per_hour: org.rate_limit_per_hour,\n      burst_size: org.burst_limit,\n      enabled: org.rate_limit_enabled,\n      emergency_bypass: false,\n      created_at: '2025-01-08T10:00:00Z',\n      updated_at: '2025-01-08T10:00:00Z'\n    }))\n    \n    return res(ctx.status(200), ctx.json(rateLimits))\n  }),\n\n  rest.post(`${API_BASE_URL}/api/v1/admin/rate-limits`, (req, res, ctx) => {\n    return res(ctx.status(201), ctx.json({\n      id: 'rate-limit-new',\n      tenant_id: 'org-new',\n      tenant_name: 'New Organization',\n      tier: 'standard',\n      requests_per_hour: 1000,\n      burst_size: 100,\n      enabled: true,\n      emergency_bypass: false,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    }))\n  }),\n\n  rest.put(`${API_BASE_URL}/api/v1/admin/rate-limits/:tenantId`, (req, res, ctx) => {\n    const { tenantId } = req.params\n    const org = getOrCreateMockOrganization(tenantId as string)\n    \n    return res(ctx.status(200), ctx.json({\n      id: `rate-limit-${tenantId}`,\n      tenant_id: tenantId,\n      tenant_name: org.name,\n      tier: 'premium',\n      requests_per_hour: 5000,\n      burst_size: 250,\n      enabled: true,\n      emergency_bypass: false,\n      created_at: '2025-01-08T10:00:00Z',\n      updated_at: new Date().toISOString()\n    }))\n  }),\n\n  rest.post(`${API_BASE_URL}/api/v1/admin/rate-limits/:tenantId/emergency-bypass`, (req, res, ctx) => {\n    const { tenantId } = req.params\n    const org = getOrCreateMockOrganization(tenantId as string)\n    \n    return res(ctx.status(200), ctx.json({\n      id: `rate-limit-${tenantId}`,\n      tenant_id: tenantId,\n      tenant_name: org.name,\n      tier: 'standard',\n      requests_per_hour: org.rate_limit_per_hour,\n      burst_size: org.burst_limit,\n      enabled: true,\n      emergency_bypass: true,\n      bypass_reason: 'Emergency bypass requested for testing',\n      bypass_until: new Date(Date.now() + 3600000).toISOString(), // 1 hour from now\n      created_at: '2025-01-08T10:00:00Z',\n      updated_at: new Date().toISOString()\n    }))\n  }),\n\n  rest.delete(`${API_BASE_URL}/api/v1/admin/rate-limits/:tenantId/emergency-bypass`, (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({\n      message: 'Emergency bypass removed successfully'\n    }))\n  }),\n\n  rest.post(`${API_BASE_URL}/api/v1/admin/rate-limits/:tenantId/reset`, (req, res, ctx) => {\n    const { tenantId } = req.params\n    const { user_id } = req.url.searchParams\n    \n    const message = user_id \n      ? `Rate limit reset for user ${user_id} in tenant ${tenantId}`\n      : `Rate limit reset for all users in tenant ${tenantId}`\n      \n    return res(ctx.status(200), ctx.json({ message }))\n  }),\n\n  // Rate limiting observability endpoints\n  rest.get(`${API_BASE_URL}/api/v1/observability/rate-limits/health`, (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({\n      overall_status: 'healthy',\n      total_tenants: 10,\n      healthy_tenants: 8,\n      warning_tenants: 2,\n      critical_tenants: 0,\n      system_performance: {\n        avg_processing_time_ms: 2.1,\n        p95_processing_time_ms: 4.2,\n        p99_processing_time_ms: 4.8,\n        overhead_percentage: 0.8,\n        redis_connection_health: true,\n        error_rate: 0.01\n      },\n      top_violations: [\n        {\n          tenant_id: 'org-123',\n          tenant_name: 'Test Organization',\n          violation_count: 25,\n          unique_users: 3\n        }\n      ],\n      alerts: []\n    }))\n  }),\n\n  rest.get(`${API_BASE_URL}/api/v1/observability/rate-limits/dashboard`, (req, res, ctx) => {\n    const { time_range } = req.url.searchParams\n    \n    return res(ctx.status(200), ctx.json({\n      time_range: time_range || '24h',\n      total_requests: 125000,\n      blocked_requests: 847,\n      block_rate: 0.68,\n      unique_tenants: 10,\n      unique_users: 156,\n      performance_metrics: {\n        avg_processing_time_ms: 2.3,\n        p95_processing_time_ms: 4.5,\n        p99_processing_time_ms: 4.9,\n        overhead_percentage: 0.9,\n        redis_connection_health: true,\n        error_rate: 0.005\n      },\n      violation_trends: [\n        { timestamp: '2025-01-08T10:00:00Z', value: 12, label: '12 violations' },\n        { timestamp: '2025-01-08T11:00:00Z', value: 8, label: '8 violations' },\n        { timestamp: '2025-01-08T12:00:00Z', value: 15, label: '15 violations' }\n      ],\n      tenant_usage: [\n        {\n          tenant_id: 'org-123',\n          tenant_name: 'Test Organization',\n          total_requests: 15000,\n          blocked_requests: 250,\n          block_rate: 1.67\n        }\n      ],\n      top_endpoints: [\n        {\n          endpoint: '/api/v1/market-edge/dashboard',\n          method: 'GET',\n          violation_count: 45,\n          unique_tenants: 8\n        }\n      ]\n    }))\n  }),\n\n  rest.get(`${API_BASE_URL}/api/v1/observability/rate-limits/tenant/:tenantId/health`, (req, res, ctx) => {\n    const { tenantId } = req.params\n    const org = getOrCreateMockOrganization(tenantId as string)\n    \n    return res(ctx.status(200), ctx.json({\n      tenant_id: tenantId,\n      tenant_name: org.name,\n      status: 'healthy',\n      current_rate_limit: org.rate_limit_per_hour,\n      current_usage: 450,\n      usage_percentage: 9.0,\n      recent_violations: 12,\n      last_violation_time: '2025-01-08T09:30:00Z'\n    }))\n  }),\n\n  rest.get(`${API_BASE_URL}/api/v1/observability/rate-limits/performance`, (req, res, ctx) => {\n    const { hours_back } = req.url.searchParams\n    const hoursBack = parseInt(hours_back as string) || 24\n    \n    const metrics = []\n    for (let i = 0; i < hoursBack; i++) {\n      const hour = new Date(Date.now() - i * 3600000)\n      metrics.push({\n        timestamp: hour.toISOString(),\n        avg_processing_time_ms: 2.1 + (Math.random() * 0.5),\n        p95_processing_time_ms: 4.2 + (Math.random() * 0.8),\n        p99_processing_time_ms: 4.8 + (Math.random() * 0.6),\n        requests_processed: 15000 - (i * 100),\n        redis_operations: 45000 - (i * 300),\n        redis_errors: Math.floor(Math.random() * 5),\n        memory_usage_mb: 128 + (i % 10),\n        cpu_usage_percent: 15.5 + (i % 5)\n      })\n    }\n    \n    return res(ctx.status(200), ctx.json({\n      metrics: metrics.reverse(),\n      summary: {\n        avg_processing_time_ms: 2.3,\n        sla_compliance: 99.8,\n        error_rate: 0.01,\n        uptime_percentage: 99.99\n      }\n    }))\n  }),\n\n  rest.get(`${API_BASE_URL}/api/v1/observability/rate-limits/alerts`, (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({\n      alerts: [\n        {\n          id: 'rate_limit_org-123_violations',\n          severity: 'high',\n          type: 'rate_limit_violations',\n          title: 'High rate limit violations for Test Organization',\n          description: 'Tenant has 125 violations in the last hour',\n          tenant_id: 'org-123',\n          tenant_name: 'Test Organization',\n          violation_count: 125,\n          created_at: new Date(Date.now() - 1800000).toISOString(), // 30 minutes ago\n          acknowledged: false,\n          actions: [\n            { type: 'investigate', label: 'Investigate tenant' },\n            { type: 'emergency_bypass', label: 'Emergency bypass' },\n            { type: 'contact_tenant', label: 'Contact tenant' }\n          ]\n        }\n      ],\n      summary: {\n        total: 1,\n        critical: 0,\n        high: 1,\n        warning: 0,\n        unacknowledged: 1\n      }\n    }))\n  }),\n\n  // Error scenarios for testing\n  rest.get(`${API_BASE_URL}/api/v1/error/500`, (req, res, ctx) => {\n    return res(\n      ctx.status(500),\n      ctx.json({ error: 'Internal Server Error', message: 'Something went wrong' })\n    )\n  }),\n\n  rest.get(`${API_BASE_URL}/api/v1/error/404`, (req, res, ctx) => {\n    return res(\n      ctx.status(404),\n      ctx.json({ error: 'Not Found', message: 'Resource not found' })\n    )\n  }),\n\n  rest.get(`${API_BASE_URL}/api/v1/error/rate-limit`, (req, res, ctx) => {\n    return res(\n      ctx.status(429),\n      ctx.json({\n        error: 'Rate limit exceeded',\n        message: 'Too many requests. Please try again later.',\n        rate_limit: {\n          limit: 5000,\n          remaining: 0,\n          reset: Math.floor(Date.now() / 1000) + 3600\n        }\n      }),\n      ctx.set('X-RateLimit-Limit', '5000'),\n      ctx.set('X-RateLimit-Remaining', '0'),\n      ctx.set('X-RateLimit-Reset', String(Math.floor(Date.now() / 1000) + 3600))\n    )\n  }),\n\n  // Health check\n  rest.get(`${API_BASE_URL}/health`, (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({ status: 'healthy', version: '1.0.0' }))\n  }),\n]\n\n// Utility functions for dynamic mock manipulation in tests\nexport const mockHandlerUtils = {\n  setMockUser: (userId: string, user: MockUser) => {\n    mockUsers[userId] = user\n  },\n\n  setMockOrganization: (orgId: string, org: MockOrganization) => {\n    mockOrganizations[orgId] = org\n  },\n\n  setMockFeatureFlags: (flags: Record<string, boolean>) => {\n    mockFeatureFlags = { ...mockFeatureFlags, ...flags }\n  },\n\n  resetMocks: () => {\n    mockUsers = {}\n    mockOrganizations = {}\n    mockFeatureFlags = createMockFeatureFlags()\n  },\n\n  simulateNetworkError: () => {\n    return rest.all('*', (req, res, ctx) => {\n      return res.networkError('Network error')\n    })\n  },\n\n  simulateSlowNetwork: (delay: number = 2000) => {\n    return rest.all('*', (req, res, ctx) => {\n      return res(ctx.delay(delay))\n    })\n  }\n}"],"names":["handlers","mockHandlerUtils","API_BASE_URL","process","env","NEXT_PUBLIC_API_BASE_URL","mockUsers","mockOrganizations","mockFeatureFlags","createMockFeatureFlags","getOrCreateMockUser","userId","createMockUser","id","getOrCreateMockOrganization","orgId","createMockOrganization","rest","get","req","res","ctx","user","status","json","post","access_token","refresh_token","token_type","expires_in","message","users","Object","values","total","length","organization","organizations","params","flags","flagKey","isEnabled","flag_key","enabled","rollout_percentage","competitors","name","market_share","pricing_trend","last_updated","market_metrics","total_market_size","growth_rate","competitive_intensity","alerts","type","severity","timestamp","website","industry","revenue_estimate","employee_count","pricing_strategy","key_products","strengths","weaknesses","last_analyzed","pricing_data","competitor","product","current_price","price_change","price_trend","recommendations","confidence","expected_impact","feature_flags","disabled","modules","active","enabled_for_organisations","activity","recent_actions_24h","system","supported_sectors","rateLimits","map","org","organization_id","organization_name","subscription_plan","rate_limit_per_hour","burst_limit","rate_limit_enabled","sic_code","rate_limits","put","violations","client_id","org_id","path","rate_limit_info","limit","remaining","reset","tenant_id","tenant_name","tier","requests_per_hour","burst_size","emergency_bypass","created_at","updated_at","Date","toISOString","tenantId","bypass_reason","bypass_until","now","delete","user_id","url","searchParams","overall_status","total_tenants","healthy_tenants","warning_tenants","critical_tenants","system_performance","avg_processing_time_ms","p95_processing_time_ms","p99_processing_time_ms","overhead_percentage","redis_connection_health","error_rate","top_violations","violation_count","unique_users","time_range","total_requests","blocked_requests","block_rate","unique_tenants","performance_metrics","violation_trends","value","label","tenant_usage","top_endpoints","endpoint","method","current_rate_limit","current_usage","usage_percentage","recent_violations","last_violation_time","hours_back","hoursBack","parseInt","metrics","i","hour","push","Math","random","requests_processed","redis_operations","redis_errors","floor","memory_usage_mb","cpu_usage_percent","reverse","summary","sla_compliance","uptime_percentage","title","description","acknowledged","actions","critical","high","warning","unacknowledged","error","rate_limit","set","String","version","setMockUser","setMockOrganization","setMockFeatureFlags","resetMocks","simulateNetworkError","all","networkError","simulateSlowNetwork","delay"],"mappings":"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"}