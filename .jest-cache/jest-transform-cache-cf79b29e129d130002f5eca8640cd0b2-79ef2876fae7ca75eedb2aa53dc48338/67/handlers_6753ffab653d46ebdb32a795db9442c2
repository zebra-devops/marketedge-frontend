173d18a7da1fb8a7ffb71b64323e934f
/**
 * MSW (Mock Service Worker) handlers for API mocking in tests
 * 
 * This file defines mock API responses for all platform endpoints,
 * supporting different tenant scenarios and user contexts.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    handlers: function() {
        return handlers;
    },
    mockHandlerUtils: function() {
        return mockHandlerUtils;
    }
});
const _msw = require("msw");
const _testutils = require("../utils/test-utils");
const API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || "http://localhost:8000";
// Store for dynamic mock data
let mockUsers = {};
let mockOrganizations = {};
let mockFeatureFlags = (0, _testutils.createMockFeatureFlags)();
// Helper to get or create mock user
const getOrCreateMockUser = (userId = "user-123")=>{
    if (!mockUsers[userId]) {
        mockUsers[userId] = (0, _testutils.createMockUser)({
            id: userId
        });
    }
    return mockUsers[userId];
};
// Helper to get or create mock organization
const getOrCreateMockOrganization = (orgId = "org-123")=>{
    if (!mockOrganizations[orgId]) {
        mockOrganizations[orgId] = (0, _testutils.createMockOrganization)({
            id: orgId
        });
    }
    return mockOrganizations[orgId];
};
const handlers = [
    // Authentication endpoints
    _msw.rest.get(`${API_BASE_URL}/api/v1/auth/me`, (req, res, ctx)=>{
        const user = getOrCreateMockUser();
        return res(ctx.status(200), ctx.json(user));
    }),
    _msw.rest.post(`${API_BASE_URL}/api/v1/auth/login`, (req, res, ctx)=>{
        return res(ctx.status(200), ctx.json({
            access_token: "mock-access-token",
            refresh_token: "mock-refresh-token",
            token_type: "Bearer",
            expires_in: 3600
        }));
    }),
    _msw.rest.post(`${API_BASE_URL}/api/v1/auth/logout`, (req, res, ctx)=>{
        return res(ctx.status(200), ctx.json({
            message: "Logged out successfully"
        }));
    }),
    // User endpoints
    _msw.rest.get(`${API_BASE_URL}/api/v1/users/me`, (req, res, ctx)=>{
        const user = getOrCreateMockUser();
        return res(ctx.status(200), ctx.json(user));
    }),
    _msw.rest.get(`${API_BASE_URL}/api/v1/users`, (req, res, ctx)=>{
        const users = Object.values(mockUsers);
        return res(ctx.status(200), ctx.json({
            users,
            total: users.length
        }));
    }),
    // Organization endpoints
    _msw.rest.get(`${API_BASE_URL}/api/v1/organisations/me`, (req, res, ctx)=>{
        const organization = getOrCreateMockOrganization();
        return res(ctx.status(200), ctx.json(organization));
    }),
    _msw.rest.get(`${API_BASE_URL}/api/v1/organisations`, (req, res, ctx)=>{
        const organizations = Object.values(mockOrganizations);
        return res(ctx.status(200), ctx.json({
            organizations,
            total: organizations.length
        }));
    }),
    _msw.rest.get(`${API_BASE_URL}/api/v1/organisations/:orgId`, (req, res, ctx)=>{
        const { orgId } = req.params;
        const organization = getOrCreateMockOrganization(orgId);
        return res(ctx.status(200), ctx.json(organization));
    }),
    // Feature flags endpoints
    _msw.rest.get(`${API_BASE_URL}/api/v1/features/flags`, (req, res, ctx)=>{
        return res(ctx.status(200), ctx.json({
            flags: mockFeatureFlags
        }));
    }),
    _msw.rest.get(`${API_BASE_URL}/api/v1/features/flags/:flagKey`, (req, res, ctx)=>{
        const { flagKey } = req.params;
        const isEnabled = mockFeatureFlags[flagKey] || false;
        return res(ctx.status(200), ctx.json({
            flag_key: flagKey,
            enabled: isEnabled,
            rollout_percentage: isEnabled ? 100 : 0
        }));
    }),
    // Market Edge endpoints
    _msw.rest.get(`${API_BASE_URL}/api/v1/market-edge/dashboard`, (req, res, ctx)=>{
        return res(ctx.status(200), ctx.json({
            competitors: [
                {
                    id: "comp-1",
                    name: "Competitor A",
                    market_share: 25.5,
                    pricing_trend: "increasing",
                    last_updated: "2025-01-08T10:00:00Z"
                },
                {
                    id: "comp-2",
                    name: "Competitor B",
                    market_share: 18.3,
                    pricing_trend: "stable",
                    last_updated: "2025-01-08T10:00:00Z"
                }
            ],
            market_metrics: {
                total_market_size: 1250000,
                growth_rate: 8.5,
                competitive_intensity: "high"
            },
            alerts: [
                {
                    id: "alert-1",
                    type: "price_change",
                    message: "Competitor A increased prices by 5%",
                    severity: "medium",
                    timestamp: "2025-01-08T09:30:00Z"
                }
            ]
        }));
    }),
    _msw.rest.get(`${API_BASE_URL}/api/v1/market-edge/competitors`, (req, res, ctx)=>{
        return res(ctx.status(200), ctx.json({
            competitors: [
                {
                    id: "comp-1",
                    name: "Competitor A",
                    website: "https://competitor-a.com",
                    industry: "hotel",
                    market_share: 25.5,
                    revenue_estimate: 15000000,
                    employee_count: 150,
                    pricing_strategy: "premium",
                    key_products: [
                        "Product A1",
                        "Product A2"
                    ],
                    strengths: [
                        "Brand recognition",
                        "Market presence"
                    ],
                    weaknesses: [
                        "Higher prices",
                        "Limited innovation"
                    ],
                    last_analyzed: "2025-01-08T10:00:00Z"
                }
            ]
        }));
    }),
    _msw.rest.get(`${API_BASE_URL}/api/v1/market-edge/pricing`, (req, res, ctx)=>{
        return res(ctx.status(200), ctx.json({
            pricing_data: [
                {
                    competitor: "Competitor A",
                    product: "Standard Room",
                    current_price: 150.00,
                    price_change: 5.0,
                    price_trend: "increasing",
                    last_updated: "2025-01-08T10:00:00Z"
                },
                {
                    competitor: "Competitor B",
                    product: "Standard Room",
                    current_price: 145.00,
                    price_change: 0.0,
                    price_trend: "stable",
                    last_updated: "2025-01-08T10:00:00Z"
                }
            ],
            recommendations: [
                {
                    type: "price_optimization",
                    message: "Consider increasing room rates by 3-7% to maintain competitiveness",
                    confidence: 85,
                    expected_impact: "Increase revenue by 5-8%"
                }
            ]
        }));
    }),
    // Admin endpoints
    _msw.rest.get(`${API_BASE_URL}/api/v1/admin/dashboard/stats`, (req, res, ctx)=>{
        return res(ctx.status(200), ctx.json({
            feature_flags: {
                total: 15,
                enabled: 12,
                disabled: 3
            },
            modules: {
                total: 8,
                active: 6,
                enabled_for_organisations: 25
            },
            activity: {
                recent_actions_24h: 142
            },
            system: {
                supported_sectors: 12
            }
        }));
    }),
    _msw.rest.get(`${API_BASE_URL}/api/v1/admin/rate-limits`, (req, res, ctx)=>{
        const rateLimits = Object.values(mockOrganizations).map((org)=>({
                organization_id: org.id,
                organization_name: org.name,
                subscription_plan: org.subscription_plan,
                rate_limit_per_hour: org.rate_limit_per_hour,
                burst_limit: org.burst_limit,
                rate_limit_enabled: org.rate_limit_enabled,
                industry: org.industry,
                sic_code: org.sic_code
            }));
        return res(ctx.status(200), ctx.json({
            rate_limits: rateLimits
        }));
    }),
    _msw.rest.put(`${API_BASE_URL}/api/v1/admin/rate-limits/:orgId`, (req, res, ctx)=>{
        const { orgId } = req.params;
        const organization = getOrCreateMockOrganization(orgId);
        return res(ctx.status(200), ctx.json({
            message: "Rate limits updated successfully",
            organization: {
                organization_id: organization.id,
                organization_name: organization.name,
                subscription_plan: organization.subscription_plan,
                rate_limit_per_hour: organization.rate_limit_per_hour,
                burst_limit: organization.burst_limit,
                rate_limit_enabled: organization.rate_limit_enabled
            }
        }));
    }),
    _msw.rest.get(`${API_BASE_URL}/api/v1/admin/rate-limits/violations`, (req, res, ctx)=>{
        return res(ctx.status(200), ctx.json({
            violations: [
                {
                    timestamp: 1704715200,
                    client_id: "org:org-123:user:user-123",
                    org_id: "org-123",
                    path: "/api/v1/market-edge/dashboard",
                    rate_limit_info: {
                        limit: 5000,
                        remaining: 0,
                        reset: 1704718800
                    }
                }
            ],
            total: 1
        }));
    }),
    // New rate limiting management endpoints
    _msw.rest.get(`${API_BASE_URL}/api/v1/admin/rate-limits`, (req, res, ctx)=>{
        const rateLimits = Object.values(mockOrganizations).map((org)=>({
                id: `rate-limit-${org.id}`,
                tenant_id: org.id,
                tenant_name: org.name,
                tier: org.subscription_plan === "basic" ? "standard" : org.subscription_plan === "professional" ? "premium" : "enterprise",
                requests_per_hour: org.rate_limit_per_hour,
                burst_size: org.burst_limit,
                enabled: org.rate_limit_enabled,
                emergency_bypass: false,
                created_at: "2025-01-08T10:00:00Z",
                updated_at: "2025-01-08T10:00:00Z"
            }));
        return res(ctx.status(200), ctx.json(rateLimits));
    }),
    _msw.rest.post(`${API_BASE_URL}/api/v1/admin/rate-limits`, (req, res, ctx)=>{
        return res(ctx.status(201), ctx.json({
            id: "rate-limit-new",
            tenant_id: "org-new",
            tenant_name: "New Organization",
            tier: "standard",
            requests_per_hour: 1000,
            burst_size: 100,
            enabled: true,
            emergency_bypass: false,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
        }));
    }),
    _msw.rest.put(`${API_BASE_URL}/api/v1/admin/rate-limits/:tenantId`, (req, res, ctx)=>{
        const { tenantId } = req.params;
        const org = getOrCreateMockOrganization(tenantId);
        return res(ctx.status(200), ctx.json({
            id: `rate-limit-${tenantId}`,
            tenant_id: tenantId,
            tenant_name: org.name,
            tier: "premium",
            requests_per_hour: 5000,
            burst_size: 250,
            enabled: true,
            emergency_bypass: false,
            created_at: "2025-01-08T10:00:00Z",
            updated_at: new Date().toISOString()
        }));
    }),
    _msw.rest.post(`${API_BASE_URL}/api/v1/admin/rate-limits/:tenantId/emergency-bypass`, (req, res, ctx)=>{
        const { tenantId } = req.params;
        const org = getOrCreateMockOrganization(tenantId);
        return res(ctx.status(200), ctx.json({
            id: `rate-limit-${tenantId}`,
            tenant_id: tenantId,
            tenant_name: org.name,
            tier: "standard",
            requests_per_hour: org.rate_limit_per_hour,
            burst_size: org.burst_limit,
            enabled: true,
            emergency_bypass: true,
            bypass_reason: "Emergency bypass requested for testing",
            bypass_until: new Date(Date.now() + 3600000).toISOString(),
            created_at: "2025-01-08T10:00:00Z",
            updated_at: new Date().toISOString()
        }));
    }),
    _msw.rest.delete(`${API_BASE_URL}/api/v1/admin/rate-limits/:tenantId/emergency-bypass`, (req, res, ctx)=>{
        return res(ctx.status(200), ctx.json({
            message: "Emergency bypass removed successfully"
        }));
    }),
    _msw.rest.post(`${API_BASE_URL}/api/v1/admin/rate-limits/:tenantId/reset`, (req, res, ctx)=>{
        const { tenantId } = req.params;
        const { user_id } = req.url.searchParams;
        const message = user_id ? `Rate limit reset for user ${user_id} in tenant ${tenantId}` : `Rate limit reset for all users in tenant ${tenantId}`;
        return res(ctx.status(200), ctx.json({
            message
        }));
    }),
    // Rate limiting observability endpoints
    _msw.rest.get(`${API_BASE_URL}/api/v1/observability/rate-limits/health`, (req, res, ctx)=>{
        return res(ctx.status(200), ctx.json({
            overall_status: "healthy",
            total_tenants: 10,
            healthy_tenants: 8,
            warning_tenants: 2,
            critical_tenants: 0,
            system_performance: {
                avg_processing_time_ms: 2.1,
                p95_processing_time_ms: 4.2,
                p99_processing_time_ms: 4.8,
                overhead_percentage: 0.8,
                redis_connection_health: true,
                error_rate: 0.01
            },
            top_violations: [
                {
                    tenant_id: "org-123",
                    tenant_name: "Test Organization",
                    violation_count: 25,
                    unique_users: 3
                }
            ],
            alerts: []
        }));
    }),
    _msw.rest.get(`${API_BASE_URL}/api/v1/observability/rate-limits/dashboard`, (req, res, ctx)=>{
        const { time_range } = req.url.searchParams;
        return res(ctx.status(200), ctx.json({
            time_range: time_range || "24h",
            total_requests: 125000,
            blocked_requests: 847,
            block_rate: 0.68,
            unique_tenants: 10,
            unique_users: 156,
            performance_metrics: {
                avg_processing_time_ms: 2.3,
                p95_processing_time_ms: 4.5,
                p99_processing_time_ms: 4.9,
                overhead_percentage: 0.9,
                redis_connection_health: true,
                error_rate: 0.005
            },
            violation_trends: [
                {
                    timestamp: "2025-01-08T10:00:00Z",
                    value: 12,
                    label: "12 violations"
                },
                {
                    timestamp: "2025-01-08T11:00:00Z",
                    value: 8,
                    label: "8 violations"
                },
                {
                    timestamp: "2025-01-08T12:00:00Z",
                    value: 15,
                    label: "15 violations"
                }
            ],
            tenant_usage: [
                {
                    tenant_id: "org-123",
                    tenant_name: "Test Organization",
                    total_requests: 15000,
                    blocked_requests: 250,
                    block_rate: 1.67
                }
            ],
            top_endpoints: [
                {
                    endpoint: "/api/v1/market-edge/dashboard",
                    method: "GET",
                    violation_count: 45,
                    unique_tenants: 8
                }
            ]
        }));
    }),
    _msw.rest.get(`${API_BASE_URL}/api/v1/observability/rate-limits/tenant/:tenantId/health`, (req, res, ctx)=>{
        const { tenantId } = req.params;
        const org = getOrCreateMockOrganization(tenantId);
        return res(ctx.status(200), ctx.json({
            tenant_id: tenantId,
            tenant_name: org.name,
            status: "healthy",
            current_rate_limit: org.rate_limit_per_hour,
            current_usage: 450,
            usage_percentage: 9.0,
            recent_violations: 12,
            last_violation_time: "2025-01-08T09:30:00Z"
        }));
    }),
    _msw.rest.get(`${API_BASE_URL}/api/v1/observability/rate-limits/performance`, (req, res, ctx)=>{
        const { hours_back } = req.url.searchParams;
        const hoursBack = parseInt(hours_back) || 24;
        const metrics = [];
        for(let i = 0; i < hoursBack; i++){
            const hour = new Date(Date.now() - i * 3600000);
            metrics.push({
                timestamp: hour.toISOString(),
                avg_processing_time_ms: 2.1 + Math.random() * 0.5,
                p95_processing_time_ms: 4.2 + Math.random() * 0.8,
                p99_processing_time_ms: 4.8 + Math.random() * 0.6,
                requests_processed: 15000 - i * 100,
                redis_operations: 45000 - i * 300,
                redis_errors: Math.floor(Math.random() * 5),
                memory_usage_mb: 128 + i % 10,
                cpu_usage_percent: 15.5 + i % 5
            });
        }
        return res(ctx.status(200), ctx.json({
            metrics: metrics.reverse(),
            summary: {
                avg_processing_time_ms: 2.3,
                sla_compliance: 99.8,
                error_rate: 0.01,
                uptime_percentage: 99.99
            }
        }));
    }),
    _msw.rest.get(`${API_BASE_URL}/api/v1/observability/rate-limits/alerts`, (req, res, ctx)=>{
        return res(ctx.status(200), ctx.json({
            alerts: [
                {
                    id: "rate_limit_org-123_violations",
                    severity: "high",
                    type: "rate_limit_violations",
                    title: "High rate limit violations for Test Organization",
                    description: "Tenant has 125 violations in the last hour",
                    tenant_id: "org-123",
                    tenant_name: "Test Organization",
                    violation_count: 125,
                    created_at: new Date(Date.now() - 1800000).toISOString(),
                    acknowledged: false,
                    actions: [
                        {
                            type: "investigate",
                            label: "Investigate tenant"
                        },
                        {
                            type: "emergency_bypass",
                            label: "Emergency bypass"
                        },
                        {
                            type: "contact_tenant",
                            label: "Contact tenant"
                        }
                    ]
                }
            ],
            summary: {
                total: 1,
                critical: 0,
                high: 1,
                warning: 0,
                unacknowledged: 1
            }
        }));
    }),
    // Error scenarios for testing
    _msw.rest.get(`${API_BASE_URL}/api/v1/error/500`, (req, res, ctx)=>{
        return res(ctx.status(500), ctx.json({
            error: "Internal Server Error",
            message: "Something went wrong"
        }));
    }),
    _msw.rest.get(`${API_BASE_URL}/api/v1/error/404`, (req, res, ctx)=>{
        return res(ctx.status(404), ctx.json({
            error: "Not Found",
            message: "Resource not found"
        }));
    }),
    _msw.rest.get(`${API_BASE_URL}/api/v1/error/rate-limit`, (req, res, ctx)=>{
        return res(ctx.status(429), ctx.json({
            error: "Rate limit exceeded",
            message: "Too many requests. Please try again later.",
            rate_limit: {
                limit: 5000,
                remaining: 0,
                reset: Math.floor(Date.now() / 1000) + 3600
            }
        }), ctx.set("X-RateLimit-Limit", "5000"), ctx.set("X-RateLimit-Remaining", "0"), ctx.set("X-RateLimit-Reset", String(Math.floor(Date.now() / 1000) + 3600)));
    }),
    // Health check
    _msw.rest.get(`${API_BASE_URL}/health`, (req, res, ctx)=>{
        return res(ctx.status(200), ctx.json({
            status: "healthy",
            version: "1.0.0"
        }));
    })
];
const mockHandlerUtils = {
    setMockUser: (userId, user)=>{
        mockUsers[userId] = user;
    },
    setMockOrganization: (orgId, org)=>{
        mockOrganizations[orgId] = org;
    },
    setMockFeatureFlags: (flags)=>{
        mockFeatureFlags = {
            ...mockFeatureFlags,
            ...flags
        };
    },
    resetMocks: ()=>{
        mockUsers = {};
        mockOrganizations = {};
        mockFeatureFlags = (0, _testutils.createMockFeatureFlags)();
    },
    simulateNetworkError: ()=>{
        return _msw.rest.all("*", (req, res, ctx)=>{
            return res.networkError("Network error");
        });
    },
    simulateSlowNetwork: (delay = 2000)=>{
        return _msw.rest.all("*", (req, res, ctx)=>{
            return res(ctx.delay(delay));
        });
    }
};

//# sourceMappingURL=data:application/json;base64,