{"version":3,"names":["PricingChart","data","chartType","cov_1ufhi7jcnl","b","title","height","showLegend","className","f","chartData","competitorColors","s","_react","useMemo","market_trend","weeks","Object","keys","sort","colors","competitors","competitor_trends","competitorColorMap","reduce","acc","comp","index","length","map","week","dataPoint","replace","market","Math","round","entries","forEach","competitorId","competitorData","weeklyData","weekly_averages","name","id","competitor","substring","fullName","averagePrice","average_price","minPrice","min_price","maxPrice","max_price","marketShare","market_share_estimate","dataPoints","data_points","a","formatCurrency","value","toFixed","formatPercent","CustomTooltip","active","payload","label","_jsxruntime","jsxs","jsx","entry","style","color","dataKey","CompetitorTooltip","renderChart","Chart","_recharts","AreaChart","LineChart","Element","Area","Line","ResponsiveContainer","width","CartesianGrid","strokeDasharray","stroke","XAxis","tick","fontSize","YAxis","tickFormatter","Tooltip","content","Legend","type","strokeWidth","fill","connectNulls","fillOpacity","BarChart","margin","bottom","angle","textAnchor","Bar","radius","onClick"],"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/market-edge/PricingChart.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Area,\n  AreaChart\n} from 'recharts';\nimport { MarketTrends, CompetitorComparison } from '@/types/market-edge';\n\ninterface PricingChartProps {\n  data: MarketTrends | CompetitorComparison | any;\n  chartType?: 'line' | 'bar' | 'area';\n  title?: string;\n  height?: number;\n  showLegend?: boolean;\n  className?: string;\n}\n\nexport const PricingChart: React.FC<PricingChartProps> = ({\n  data,\n  chartType = 'line',\n  title,\n  height = 400,\n  showLegend = true,\n  className = ''\n}) => {\n  const { chartData, competitorColors } = useMemo(() => {\n    if (!data) return { chartData: [], competitorColors: {} };\n\n    // Handle MarketTrends data\n    if ('market_trend' in data && data.market_trend) {\n      const weeks = Object.keys(data.market_trend).sort();\n      const colors = ['#3B82F6', '#EF4444', '#10B981', '#F59E0B', '#8B5CF6', '#EC4899'];\n      const competitors = Object.keys(data.competitor_trends || {});\n      \n      const competitorColorMap = competitors.reduce((acc, comp, index) => {\n        acc[comp] = colors[index % colors.length];\n        return acc;\n      }, {} as Record<string, string>);\n\n      const chartData = weeks.map(week => {\n        const dataPoint: any = {\n          week: week.replace('2024-W', 'W'),\n          market: Math.round(data.market_trend[week] * 100) / 100\n        };\n\n        // Add competitor data\n        if (data.competitor_trends) {\n          Object.entries(data.competitor_trends).forEach(([competitorId, competitorData]) => {\n            const weeklyData = competitorData.weekly_averages[week];\n            if (weeklyData) {\n              dataPoint[competitorData.name] = Math.round(weeklyData * 100) / 100;\n            }\n          });\n        }\n\n        return dataPoint;\n      });\n\n      return { chartData, competitorColors: competitorColorMap };\n    }\n\n    // Handle CompetitorComparison data\n    if ('competitors' in data) {\n      const chartData = Object.entries(data.competitors).map(([id, competitor]) => ({\n        name: competitor.name.length > 15 ? competitor.name.substring(0, 15) + '...' : competitor.name,\n        fullName: competitor.name,\n        averagePrice: Math.round(competitor.average_price * 100) / 100,\n        minPrice: competitor.min_price,\n        maxPrice: competitor.max_price,\n        marketShare: competitor.market_share_estimate || 0,\n        dataPoints: competitor.data_points\n      }));\n\n      return { \n        chartData: chartData.sort((a, b) => a.averagePrice - b.averagePrice),\n        competitorColors: {}\n      };\n    }\n\n    // Handle generic data\n    return { chartData: data, competitorColors: {} };\n  }, [data]);\n\n  const formatCurrency = (value: number) => {\n    return `Â£${value.toFixed(2)}`;\n  };\n\n  const formatPercent = (value: number) => {\n    return `${value.toFixed(1)}%`;\n  };\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\">\n          <p className=\"font-medium text-gray-900 mb-2\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {`${entry.dataKey === 'market' ? 'Market Average' : entry.dataKey}: ${formatCurrency(entry.value)}`}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const CompetitorTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <div className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\">\n          <p className=\"font-medium text-gray-900 mb-2\">{data.fullName}</p>\n          <p className=\"text-sm text-gray-600\">Average Price: {formatCurrency(data.averagePrice)}</p>\n          <p className=\"text-sm text-gray-600\">Price Range: {formatCurrency(data.minPrice)} - {formatCurrency(data.maxPrice)}</p>\n          {data.marketShare > 0 && (\n            <p className=\"text-sm text-gray-600\">Market Share: {formatPercent(data.marketShare)}</p>\n          )}\n          <p className=\"text-sm text-gray-600\">Data Points: {data.dataPoints}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  if (!chartData || chartData.length === 0) {\n    return (\n      <div className={`bg-white rounded-lg border border-gray-200 p-6 ${className}`}>\n        {title && (\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">{title}</h3>\n        )}\n        <div className=\"flex items-center justify-center h-64 text-gray-500\">\n          <div className=\"text-center\">\n            <div className=\"text-sm\">No pricing data available</div>\n            <div className=\"text-xs mt-1\">Data will appear here once pricing information is collected</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const renderChart = () => {\n    // For trends data (line/area chart)\n    if ('market_trend' in data) {\n      const Chart = chartType === 'area' ? AreaChart : LineChart;\n      const Element = chartType === 'area' ? Area : Line;\n\n      return (\n        <ResponsiveContainer width=\"100%\" height={height}>\n          <Chart data={chartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n            <XAxis \n              dataKey=\"week\" \n              tick={{ fontSize: 12 }}\n              stroke=\"#6b7280\"\n            />\n            <YAxis \n              tick={{ fontSize: 12 }}\n              tickFormatter={formatCurrency}\n              stroke=\"#6b7280\"\n            />\n            <Tooltip content={<CustomTooltip />} />\n            {showLegend && <Legend />}\n            \n            {/* Market trend line */}\n            <Element\n              type=\"monotone\"\n              dataKey=\"market\"\n              stroke=\"#1f2937\"\n              strokeWidth={3}\n              strokeDasharray=\"5 5\"\n              name=\"Market Average\"\n              {...(chartType === 'area' && { fill: '#1f293740' })}\n            />\n            \n            {/* Competitor lines */}\n            {data.competitor_trends && Object.entries(data.competitor_trends).map(([competitorId, competitorData]) => (\n              <Element\n                key={competitorId}\n                type=\"monotone\"\n                dataKey={competitorData.name}\n                stroke={competitorColors[competitorId] || '#6b7280'}\n                strokeWidth={2}\n                name={competitorData.name}\n                connectNulls={false}\n                {...(chartType === 'area' && { \n                  fill: `${competitorColors[competitorId] || '#6b7280'}20`,\n                  fillOpacity: 0.3\n                })}\n              />\n            ))}\n          </Chart>\n        </ResponsiveContainer>\n      );\n    }\n\n    // For competitor comparison (bar chart)\n    return (\n      <ResponsiveContainer width=\"100%\" height={height}>\n        <BarChart data={chartData} margin={{ bottom: 60 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n          <XAxis \n            dataKey=\"name\" \n            tick={{ fontSize: 11 }}\n            angle={-45}\n            textAnchor=\"end\"\n            height={80}\n            stroke=\"#6b7280\"\n          />\n          <YAxis \n            tick={{ fontSize: 12 }}\n            tickFormatter={formatCurrency}\n            stroke=\"#6b7280\"\n          />\n          <Tooltip content={<CompetitorTooltip />} />\n          {showLegend && <Legend />}\n          <Bar \n            dataKey=\"averagePrice\" \n            name=\"Average Price\"\n            fill=\"#3B82F6\"\n            radius={[4, 4, 0, 0]}\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  return (\n    <div className={`bg-white rounded-lg border border-gray-200 p-6 ${className}`}>\n      {title && (\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-medium text-gray-900\">{title}</h3>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"text-sm text-gray-500\">\n              {chartData.length} data points\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"w-full\">\n        {renderChart()}\n      </div>\n\n      {/* Chart type selector */}\n      <div className=\"mt-4 flex justify-center space-x-2\">\n        <button\n          onClick={() => {/* This would be handled by parent component */}}\n          className={`px-3 py-1 text-xs rounded-md transition-colors ${\n            chartType === 'line' \n              ? 'bg-blue-100 text-blue-700' \n              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n          }`}\n        >\n          Line\n        </button>\n        <button\n          onClick={() => {/* This would be handled by parent component */}}\n          className={`px-3 py-1 text-xs rounded-md transition-colors ${\n            chartType === 'area' \n              ? 'bg-blue-100 text-blue-700' \n              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n          }`}\n        >\n          Area\n        </button>\n        <button\n          onClick={() => {/* This would be handled by parent component */}}\n          className={`px-3 py-1 text-xs rounded-md transition-colors ${\n            chartType === 'bar' \n              ? 'bg-blue-100 text-blue-700' \n              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n          }`}\n        >\n          Bar\n        </button>\n      </div>\n    </div>\n  );\n};"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}