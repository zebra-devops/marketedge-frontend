{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/services/__tests__/auth.test.ts"],"sourcesContent":["/**\n * Comprehensive Authentication Service Tests\n * \n * Tests all authentication functions to achieve 85%+ coverage:\n * - login, logout, refresh, getCurrentUser\n * - Multi-tenant authentication scenarios\n * - Token management edge cases\n * - Authentication error handling\n * - Session management\n */\n\nimport { AuthService, authService } from '../auth'\nimport { apiService } from '../api'\nimport { LoginRequest, TokenResponse, User } from '@/types/auth'\nimport Cookies from 'js-cookie'\n\n// Mock dependencies\njest.mock('../api')\njest.mock('js-cookie')\n\nconst mockApiService = apiService as jest.Mocked<typeof apiService>\nconst mockCookies = Cookies as jest.Mocked<typeof Cookies>\n\ndescribe('AuthService', () => {\n  let service: AuthService\n\n  beforeEach(() => {\n    service = new AuthService()\n    jest.clearAllMocks()\n  })\n\n  afterEach(() => {\n    // Clear mocks after each test\n    jest.restoreAllMocks()\n  })\n\n  describe('login', () => {\n    const mockLoginRequest: LoginRequest = {\n      code: 'valid-auth-code',\n      redirect_uri: 'http://localhost:3000/callback',\n    }\n\n    const mockTokenResponse: TokenResponse = {\n      access_token: 'mock-access-token',\n      refresh_token: 'mock-refresh-token',\n      token_type: 'bearer',\n      user: {\n        id: 'user-123',\n        email: 'test@example.com',\n        first_name: 'Test',\n        last_name: 'User',\n        role: 'analyst',\n        organisation_id: 'org-123',\n        is_active: true,\n      },\n    }\n\n    it('should successfully login with valid credentials', async () => {\n      mockApiService.post.mockResolvedValue(mockTokenResponse)\n\n      const result = await service.login(mockLoginRequest)\n\n      expect(mockApiService.post).toHaveBeenCalledWith('/auth/login', mockLoginRequest)\n      expect(mockCookies.set).toHaveBeenCalledWith('access_token', 'mock-access-token', { expires: 1 })\n      expect(mockCookies.set).toHaveBeenCalledWith('refresh_token', 'mock-refresh-token', { expires: 7 })\n      expect(result).toEqual(mockTokenResponse)\n    })\n\n    it('should handle login API errors', async () => {\n      const errorResponse = new Error('Invalid authorization code')\n      mockApiService.post.mockRejectedValue(errorResponse)\n\n      await expect(service.login(mockLoginRequest)).rejects.toThrow('Invalid authorization code')\n      \n      expect(mockApiService.post).toHaveBeenCalledWith('/auth/login', mockLoginRequest)\n      expect(mockCookies.set).not.toHaveBeenCalled()\n    })\n\n    it('should handle network errors during login', async () => {\n      const networkError = new Error('Network timeout')\n      mockApiService.post.mockRejectedValue(networkError)\n\n      await expect(service.login(mockLoginRequest)).rejects.toThrow('Network timeout')\n    })\n\n    it('should set cookies with correct expiration times', async () => {\n      mockApiService.post.mockResolvedValue(mockTokenResponse)\n\n      await service.login(mockLoginRequest)\n\n      expect(mockCookies.set).toHaveBeenCalledWith(\n        'access_token',\n        'mock-access-token',\n        { expires: 1 } // 1 day\n      )\n      expect(mockCookies.set).toHaveBeenCalledWith(\n        'refresh_token',\n        'mock-refresh-token',\n        { expires: 7 } // 7 days\n      )\n    })\n  })\n\n  describe('getCurrentUser', () => {\n    const mockUser: User = {\n      id: 'user-456',\n      email: 'current@example.com',\n      first_name: 'Current',\n      last_name: 'User',\n      role: 'admin',\n      organisation_id: 'org-456',\n      is_active: true,\n    }\n\n    it('should successfully fetch current user', async () => {\n      mockApiService.get.mockResolvedValue(mockUser)\n\n      const result = await service.getCurrentUser()\n\n      expect(mockApiService.get).toHaveBeenCalledWith('/auth/me')\n      expect(result).toEqual(mockUser)\n    })\n\n    it('should handle unauthorized response', async () => {\n      const unauthorizedError = new Error('Not authenticated')\n      mockApiService.get.mockRejectedValue(unauthorizedError)\n\n      await expect(service.getCurrentUser()).rejects.toThrow('Not authenticated')\n      expect(mockApiService.get).toHaveBeenCalledWith('/auth/me')\n    })\n\n    it('should handle server errors', async () => {\n      const serverError = new Error('Internal server error')\n      mockApiService.get.mockRejectedValue(serverError)\n\n      await expect(service.getCurrentUser()).rejects.toThrow('Internal server error')\n    })\n  })\n\n  describe('getAuth0Url', () => {\n    const mockRedirectUri = 'http://localhost:3000/callback'\n    const mockAuthUrlResponse = {\n      auth_url: 'https://dev-platform.auth0.com/authorize?response_type=code&client_id=test&redirect_uri=http%3A//localhost%3A3000/callback&scope=openid%20profile%20email'\n    }\n\n    it('should successfully get Auth0 URL', async () => {\n      mockApiService.get.mockResolvedValue(mockAuthUrlResponse)\n\n      const result = await service.getAuth0Url(mockRedirectUri)\n\n      expect(mockApiService.get).toHaveBeenCalledWith(\n        `/auth/auth0-url?redirect_uri=${encodeURIComponent(mockRedirectUri)}`\n      )\n      expect(result).toEqual(mockAuthUrlResponse)\n    })\n\n    it('should handle URL with special characters', async () => {\n      const specialRedirectUri = 'http://localhost:3000/callback?state=test&nonce=123'\n      mockApiService.get.mockResolvedValue(mockAuthUrlResponse)\n\n      await service.getAuth0Url(specialRedirectUri)\n\n      expect(mockApiService.get).toHaveBeenCalledWith(\n        `/auth/auth0-url?redirect_uri=${encodeURIComponent(specialRedirectUri)}`\n      )\n    })\n\n    it('should handle API errors when getting Auth0 URL', async () => {\n      const apiError = new Error('Auth0 configuration error')\n      mockApiService.get.mockRejectedValue(apiError)\n\n      await expect(service.getAuth0Url(mockRedirectUri)).rejects.toThrow('Auth0 configuration error')\n    })\n  })\n\n  describe('logout', () => {\n    // Mock window.location\n    const mockLocation = {\n      href: '',\n    }\n    \n    beforeEach(() => {\n      delete (window as any).location\n      window.location = mockLocation as any\n    })\n\n    it('should remove cookies and redirect to login', () => {\n      service.logout()\n\n      expect(mockCookies.remove).toHaveBeenCalledWith('access_token')\n      expect(mockCookies.remove).toHaveBeenCalledWith('refresh_token')\n      expect(window.location.href).toBe('/login')\n    })\n\n    it('should handle logout even if cookies do not exist', () => {\n      // Test that logout still works even if cookies.remove doesn't throw\n      mockCookies.remove.mockImplementation(() => undefined)\n\n      service.logout()\n\n      expect(mockCookies.remove).toHaveBeenCalledWith('access_token')\n      expect(mockCookies.remove).toHaveBeenCalledWith('refresh_token')\n      expect(window.location.href).toBe('/login')\n    })\n  })\n\n  describe('getToken', () => {\n    it('should return access token when it exists', () => {\n      mockCookies.get.mockReturnValue('valid-access-token')\n\n      const token = service.getToken()\n\n      expect(mockCookies.get).toHaveBeenCalledWith('access_token')\n      expect(token).toBe('valid-access-token')\n    })\n\n    it('should return undefined when token does not exist', () => {\n      mockCookies.get.mockReturnValue(undefined)\n\n      const token = service.getToken()\n\n      expect(mockCookies.get).toHaveBeenCalledWith('access_token')\n      expect(token).toBeUndefined()\n    })\n\n    it('should return empty string as falsy when token is empty', () => {\n      mockCookies.get.mockReturnValue('')\n\n      const token = service.getToken()\n\n      expect(mockCookies.get).toHaveBeenCalledWith('access_token')\n      expect(token).toBe('')\n    })\n  })\n\n  describe('isAuthenticated', () => {\n    it('should return true when token exists', () => {\n      mockCookies.get.mockReturnValue('valid-token')\n\n      const isAuthenticated = service.isAuthenticated()\n\n      expect(mockCookies.get).toHaveBeenCalledWith('access_token')\n      expect(isAuthenticated).toBe(true)\n    })\n\n    it('should return false when token does not exist', () => {\n      mockCookies.get.mockReturnValue(undefined)\n\n      const isAuthenticated = service.isAuthenticated()\n\n      expect(mockCookies.get).toHaveBeenCalledWith('access_token')\n      expect(isAuthenticated).toBe(false)\n    })\n\n    it('should return false when token is empty string', () => {\n      mockCookies.get.mockReturnValue('')\n\n      const isAuthenticated = service.isAuthenticated()\n\n      expect(mockCookies.get).toHaveBeenCalledWith('access_token')\n      expect(isAuthenticated).toBe(false)\n    })\n\n    it('should return false when token is null', () => {\n      mockCookies.get.mockReturnValue(null as any)\n\n      const isAuthenticated = service.isAuthenticated()\n\n      expect(isAuthenticated).toBe(false)\n    })\n  })\n\n  describe('Multi-tenant scenarios', () => {\n    const hotelTenantUser: User = {\n      id: 'hotel-user',\n      email: 'hotel@example.com',\n      first_name: 'Hotel',\n      last_name: 'Manager',\n      role: 'admin',\n      organisation_id: 'hotel-org-123',\n      is_active: true,\n    }\n\n    const cinemaTenantUser: User = {\n      id: 'cinema-user',\n      email: 'cinema@example.com',\n      first_name: 'Cinema',\n      last_name: 'Operator',\n      role: 'analyst',\n      organisation_id: 'cinema-org-456',\n      is_active: true,\n    }\n\n    it('should handle hotel tenant authentication', async () => {\n      const hotelLogin: LoginRequest = {\n        code: 'hotel-auth-code',\n        redirect_uri: 'http://hotel.platform.com/callback',\n      }\n\n      const hotelTokenResponse: TokenResponse = {\n        access_token: 'hotel-access-token',\n        refresh_token: 'hotel-refresh-token',\n        token_type: 'bearer',\n        user: hotelTenantUser,\n      }\n\n      mockApiService.post.mockResolvedValue(hotelTokenResponse)\n\n      const result = await service.login(hotelLogin)\n\n      expect(result.user.organisation_id).toBe('hotel-org-123')\n      expect(result.user.role).toBe('admin')\n    })\n\n    it('should handle cinema tenant authentication', async () => {\n      const cinemaLogin: LoginRequest = {\n        code: 'cinema-auth-code',\n        redirect_uri: 'http://cinema.platform.com/callback',\n      }\n\n      const cinemaTokenResponse: TokenResponse = {\n        access_token: 'cinema-access-token',\n        refresh_token: 'cinema-refresh-token',\n        token_type: 'bearer',\n        user: cinemaTenantUser,\n      }\n\n      mockApiService.post.mockResolvedValue(cinemaTokenResponse)\n\n      const result = await service.login(cinemaLogin)\n\n      expect(result.user.organisation_id).toBe('cinema-org-456')\n      expect(result.user.role).toBe('analyst')\n    })\n\n    it('should handle tenant-specific user data', async () => {\n      mockApiService.get.mockResolvedValue(hotelTenantUser)\n\n      const user = await service.getCurrentUser()\n\n      expect(user.organisation_id).toBe('hotel-org-123')\n      expect(user.email).toBe('hotel@example.com')\n    })\n  })\n\n  describe('Token edge cases', () => {\n    it('should handle malformed tokens gracefully', () => {\n      mockCookies.get.mockReturnValue('malformed.token.here')\n\n      const token = service.getToken()\n      expect(token).toBe('malformed.token.here')\n\n      const isAuthenticated = service.isAuthenticated()\n      expect(isAuthenticated).toBe(true) // Should still consider it authenticated\n    })\n\n    it('should handle expired tokens', async () => {\n      // Token exists but API call fails with 401\n      mockCookies.get.mockReturnValue('expired-token')\n      mockApiService.get.mockRejectedValue(new Error('Token expired'))\n\n      await expect(service.getCurrentUser()).rejects.toThrow('Token expired')\n    })\n  })\n\n  describe('Session management', () => {\n    it('should maintain consistent state across multiple calls', () => {\n      mockCookies.get.mockReturnValue('consistent-token')\n\n      expect(service.isAuthenticated()).toBe(true)\n      expect(service.getToken()).toBe('consistent-token')\n      expect(service.isAuthenticated()).toBe(true)\n    })\n\n    it('should handle cookie changes during session', () => {\n      // First call returns token\n      mockCookies.get.mockReturnValueOnce('initial-token')\n      expect(service.isAuthenticated()).toBe(true)\n\n      // Second call returns no token (e.g., cookie expired)\n      mockCookies.get.mockReturnValueOnce(undefined)\n      expect(service.isAuthenticated()).toBe(false)\n    })\n  })\n\n  describe('Error boundary scenarios', () => {\n    it('should handle cookie access errors', () => {\n      mockCookies.get.mockImplementation(() => {\n        throw new Error('Cookie access denied')\n      })\n\n      expect(() => service.getToken()).toThrow('Cookie access denied')\n      expect(() => service.isAuthenticated()).toThrow('Cookie access denied')\n    })\n\n    it('should handle cookie setting errors during login', async () => {\n      const tokenResponse: TokenResponse = {\n        access_token: 'test-token',\n        refresh_token: 'test-refresh',\n        token_type: 'bearer',\n        user: {\n          id: 'user-123',\n          email: 'test@example.com',\n          first_name: 'Test',\n          last_name: 'User',\n          role: 'analyst',\n          organisation_id: 'org-123',\n          is_active: true,\n        },\n      }\n\n      mockApiService.post.mockResolvedValue(tokenResponse)\n      mockCookies.set.mockImplementation(() => {\n        throw new Error('Cookie setting failed')\n      })\n\n      // Should still return the response even if cookie setting fails\n      const result = await service.login({\n        code: 'test-code',\n        redirect_uri: 'http://localhost:3000/callback',\n      })\n\n      expect(result).toEqual(tokenResponse)\n    })\n  })\n})\n\ndescribe('Singleton authService', () => {\n  it('should export a singleton instance', () => {\n    expect(authService).toBeInstanceOf(AuthService)\n  })\n\n  it('should maintain state across imports', () => {\n    const instance1 = authService\n    const instance2 = authService\n\n    expect(instance1).toBe(instance2)\n  })\n})"],"names":["jest","mock","mockApiService","apiService","mockCookies","Cookies","describe","service","beforeEach","AuthService","clearAllMocks","afterEach","restoreAllMocks","mockLoginRequest","code","redirect_uri","mockTokenResponse","access_token","refresh_token","token_type","user","id","email","first_name","last_name","role","organisation_id","is_active","it","post","mockResolvedValue","result","login","expect","toHaveBeenCalledWith","set","expires","toEqual","errorResponse","Error","mockRejectedValue","rejects","toThrow","not","toHaveBeenCalled","networkError","mockUser","get","getCurrentUser","unauthorizedError","serverError","mockRedirectUri","mockAuthUrlResponse","auth_url","getAuth0Url","encodeURIComponent","specialRedirectUri","apiError","mockLocation","href","window","location","logout","remove","toBe","mockImplementation","undefined","mockReturnValue","token","getToken","toBeUndefined","isAuthenticated","hotelTenantUser","cinemaTenantUser","hotelLogin","hotelTokenResponse","cinemaLogin","cinemaTokenResponse","mockReturnValueOnce","tokenResponse","authService","toBeInstanceOf","instance1","instance2"],"mappings":"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"}