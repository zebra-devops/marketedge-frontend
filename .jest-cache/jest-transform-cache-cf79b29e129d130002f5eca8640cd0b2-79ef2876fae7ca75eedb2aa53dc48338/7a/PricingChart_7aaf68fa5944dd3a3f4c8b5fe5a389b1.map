{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/market-edge/PricingChart.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Area,\n  AreaChart\n} from 'recharts';\nimport { MarketTrends, CompetitorComparison } from '@/types/market-edge';\n\ninterface PricingChartProps {\n  data: MarketTrends | CompetitorComparison | any;\n  chartType?: 'line' | 'bar' | 'area';\n  title?: string;\n  height?: number;\n  showLegend?: boolean;\n  className?: string;\n}\n\nexport const PricingChart: React.FC<PricingChartProps> = ({\n  data,\n  chartType = 'line',\n  title,\n  height = 400,\n  showLegend = true,\n  className = ''\n}) => {\n  const { chartData, competitorColors } = useMemo((): { chartData: any[]; competitorColors: Record<string, string> } => {\n    if (!data) return { chartData: [], competitorColors: {} as Record<string, string> };\n\n    // Handle MarketTrends data\n    if ('market_trend' in data && data.market_trend) {\n      const weeks = Object.keys(data.market_trend).sort();\n      const colors = ['#3B82F6', '#EF4444', '#10B981', '#F59E0B', '#8B5CF6', '#EC4899'];\n      const competitors = Object.keys(data.competitor_trends || {});\n      \n      const competitorColorMap = competitors.reduce((acc, comp, index) => {\n        acc[comp] = colors[index % colors.length];\n        return acc;\n      }, {} as Record<string, string>);\n\n      const chartData = weeks.map(week => {\n        const dataPoint: any = {\n          week: week.replace('2024-W', 'W'),\n          market: Math.round(data.market_trend[week] * 100) / 100\n        };\n\n        // Add competitor data\n        if (data.competitor_trends) {\n          Object.entries(data.competitor_trends).forEach(([competitorId, competitorData]) => {\n            const typedCompetitorData = competitorData as { name: string; weekly_averages: Record<string, number>; };\n            const weeklyData = typedCompetitorData.weekly_averages[week];\n            if (weeklyData) {\n              dataPoint[typedCompetitorData.name] = Math.round(weeklyData * 100) / 100;\n            }\n          });\n        }\n\n        return dataPoint;\n      });\n\n      return { chartData, competitorColors: competitorColorMap };\n    }\n\n    // Handle CompetitorComparison data\n    if ('competitors' in data) {\n      const chartData = Object.entries(data.competitors).map(([id, competitor]) => {\n        const typedCompetitor = competitor as {\n          name: string;\n          average_price: number;\n          min_price: number;\n          max_price: number;\n          market_share_estimate?: number;\n          data_points: number;\n        };\n        return {\n          name: typedCompetitor.name.length > 15 ? typedCompetitor.name.substring(0, 15) + '...' : typedCompetitor.name,\n          fullName: typedCompetitor.name,\n          averagePrice: Math.round(typedCompetitor.average_price * 100) / 100,\n          minPrice: typedCompetitor.min_price,\n          maxPrice: typedCompetitor.max_price,\n          marketShare: typedCompetitor.market_share_estimate || 0,\n          dataPoints: typedCompetitor.data_points\n        };\n      });\n\n      return { \n        chartData: chartData.sort((a, b) => a.averagePrice - b.averagePrice),\n        competitorColors: {} as Record<string, string>\n      };\n    }\n\n    // Handle generic data\n    return { chartData: data, competitorColors: {} as Record<string, string> };\n  }, [data]);\n\n  const formatCurrency = (value: number) => {\n    return `Â£${value.toFixed(2)}`;\n  };\n\n  const formatPercent = (value: number) => {\n    return `${value.toFixed(1)}%`;\n  };\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\">\n          <p className=\"font-medium text-gray-900 mb-2\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {`${entry.dataKey === 'market' ? 'Market Average' : entry.dataKey}: ${formatCurrency(entry.value)}`}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const CompetitorTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <div className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\">\n          <p className=\"font-medium text-gray-900 mb-2\">{data.fullName}</p>\n          <p className=\"text-sm text-gray-600\">Average Price: {formatCurrency(data.averagePrice)}</p>\n          <p className=\"text-sm text-gray-600\">Price Range: {formatCurrency(data.minPrice)} - {formatCurrency(data.maxPrice)}</p>\n          {data.marketShare > 0 && (\n            <p className=\"text-sm text-gray-600\">Market Share: {formatPercent(data.marketShare)}</p>\n          )}\n          <p className=\"text-sm text-gray-600\">Data Points: {data.dataPoints}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  if (!chartData || chartData.length === 0) {\n    return (\n      <div className={`bg-white rounded-lg border border-gray-200 p-6 ${className}`}>\n        {title && (\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">{title}</h3>\n        )}\n        <div className=\"flex items-center justify-center h-64 text-gray-500\">\n          <div className=\"text-center\">\n            <div className=\"text-sm\">No pricing data available</div>\n            <div className=\"text-xs mt-1\">Data will appear here once pricing information is collected</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const renderChart = () => {\n    // For trends data (line/area chart)\n    if ('market_trend' in data) {\n      if (chartType === 'area') {\n        return (\n          <ResponsiveContainer width=\"100%\" height={height}>\n            <AreaChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n              <XAxis \n                dataKey=\"week\" \n                tick={{ fontSize: 12 }}\n                stroke=\"#6b7280\"\n              />\n              <YAxis \n                tick={{ fontSize: 12 }}\n                tickFormatter={formatCurrency}\n                stroke=\"#6b7280\"\n              />\n              <Tooltip content={<CustomTooltip />} />\n              {showLegend && <Legend />}\n              \n              {/* Market trend area */}\n              <Area\n                type=\"monotone\"\n                dataKey=\"market\"\n                stroke=\"#1f2937\"\n                strokeWidth={3}\n                strokeDasharray=\"5 5\"\n                name=\"Market Average\"\n                fill=\"#1f293740\"\n              />\n              \n              {/* Competitor areas */}\n              {data.competitor_trends && Object.entries(data.competitor_trends).map(([competitorId, competitorData]) => {\n                const typedCompetitorData = competitorData as { name: string; weekly_averages: Record<string, number>; };\n                return (\n                  <Area\n                    key={competitorId}\n                    type=\"monotone\"\n                    dataKey={typedCompetitorData.name}\n                    stroke={competitorColors[competitorId] || '#6b7280'}\n                    strokeWidth={2}\n                    name={typedCompetitorData.name}\n                    connectNulls={false}\n                    fill={`${competitorColors[competitorId] || '#6b7280'}20`}\n                    fillOpacity={0.3}\n                  />\n                );\n              })}\n            </AreaChart>\n          </ResponsiveContainer>\n        );\n      } else {\n        return (\n          <ResponsiveContainer width=\"100%\" height={height}>\n            <LineChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n              <XAxis \n                dataKey=\"week\" \n                tick={{ fontSize: 12 }}\n                stroke=\"#6b7280\"\n              />\n              <YAxis \n                tick={{ fontSize: 12 }}\n                tickFormatter={formatCurrency}\n                stroke=\"#6b7280\"\n              />\n              <Tooltip content={<CustomTooltip />} />\n              {showLegend && <Legend />}\n              \n              {/* Market trend line */}\n              <Line\n                type=\"monotone\"\n                dataKey=\"market\"\n                stroke=\"#1f2937\"\n                strokeWidth={3}\n                strokeDasharray=\"5 5\"\n                name=\"Market Average\"\n              />\n              \n              {/* Competitor lines */}\n              {data.competitor_trends && Object.entries(data.competitor_trends).map(([competitorId, competitorData]) => {\n                const typedCompetitorData = competitorData as { name: string; weekly_averages: Record<string, number>; };\n                return (\n                  <Line\n                    key={competitorId}\n                    type=\"monotone\"\n                    dataKey={typedCompetitorData.name}\n                    stroke={competitorColors[competitorId] || '#6b7280'}\n                    strokeWidth={2}\n                    name={typedCompetitorData.name}\n                    connectNulls={false}\n                  />\n                );\n              })}\n            </LineChart>\n          </ResponsiveContainer>\n        );\n      }\n    }\n\n    // For competitor comparison (bar chart)\n    return (\n      <ResponsiveContainer width=\"100%\" height={height}>\n        <BarChart data={chartData} margin={{ bottom: 60 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n          <XAxis \n            dataKey=\"name\" \n            tick={{ fontSize: 11 }}\n            angle={-45}\n            textAnchor=\"end\"\n            height={80}\n            stroke=\"#6b7280\"\n          />\n          <YAxis \n            tick={{ fontSize: 12 }}\n            tickFormatter={formatCurrency}\n            stroke=\"#6b7280\"\n          />\n          <Tooltip content={<CompetitorTooltip />} />\n          {showLegend && <Legend />}\n          <Bar \n            dataKey=\"averagePrice\" \n            name=\"Average Price\"\n            fill=\"#3B82F6\"\n            radius={[4, 4, 0, 0]}\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  return (\n    <div className={`bg-white rounded-lg border border-gray-200 p-6 ${className}`}>\n      {title && (\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-medium text-gray-900\">{title}</h3>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"text-sm text-gray-500\">\n              {chartData.length} data points\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"w-full\">\n        {renderChart()}\n      </div>\n\n      {/* Chart type selector */}\n      <div className=\"mt-4 flex justify-center space-x-2\">\n        <button\n          onClick={() => {/* This would be handled by parent component */}}\n          className={`px-3 py-1 text-xs rounded-md transition-colors ${\n            chartType === 'line' \n              ? 'bg-blue-100 text-blue-700' \n              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n          }`}\n        >\n          Line\n        </button>\n        <button\n          onClick={() => {/* This would be handled by parent component */}}\n          className={`px-3 py-1 text-xs rounded-md transition-colors ${\n            chartType === 'area' \n              ? 'bg-blue-100 text-blue-700' \n              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n          }`}\n        >\n          Area\n        </button>\n        <button\n          onClick={() => {/* This would be handled by parent component */}}\n          className={`px-3 py-1 text-xs rounded-md transition-colors ${\n            chartType === 'bar' \n              ? 'bg-blue-100 text-blue-700' \n              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n          }`}\n        >\n          Bar\n        </button>\n      </div>\n    </div>\n  );\n};"],"names":["PricingChart","data","chartType","title","height","showLegend","className","chartData","competitorColors","useMemo","market_trend","weeks","Object","keys","sort","colors","competitors","competitor_trends","competitorColorMap","reduce","acc","comp","index","length","map","week","dataPoint","replace","market","Math","round","entries","forEach","competitorId","competitorData","typedCompetitorData","weeklyData","weekly_averages","name","id","competitor","typedCompetitor","substring","fullName","averagePrice","average_price","minPrice","min_price","maxPrice","max_price","marketShare","market_share_estimate","dataPoints","data_points","a","b","formatCurrency","value","toFixed","formatPercent","CustomTooltip","active","payload","label","div","p","entry","style","color","dataKey","CompetitorTooltip","h3","renderChart","ResponsiveContainer","width","AreaChart","CartesianGrid","strokeDasharray","stroke","XAxis","tick","fontSize","YAxis","tickFormatter","Tooltip","content","Legend","Area","type","strokeWidth","fill","connectNulls","fillOpacity","LineChart","Line","BarChart","margin","bottom","angle","textAnchor","Bar","radius","button","onClick"],"mappings":"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"}