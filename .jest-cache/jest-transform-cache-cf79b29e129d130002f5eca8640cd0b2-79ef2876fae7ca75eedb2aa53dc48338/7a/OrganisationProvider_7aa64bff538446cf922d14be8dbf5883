591b8e55c39f2fd08705ca8ec67b9142
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    OrganisationProvider: function() {
        return OrganisationProvider;
    },
    useOrganisationContext: function() {
        return useOrganisationContext;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _api = require("../../services/api");
const _useAuth = require("../../hooks/useAuth");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const OrganisationContext = /*#__PURE__*/ (0, _react.createContext)(undefined);
const useOrganisationContext = ()=>{
    const context = (0, _react.useContext)(OrganisationContext);
    if (!context) {
        throw new Error("useOrganisationContext must be used within an OrganisationProvider");
    }
    return context;
};
const OrganisationProvider = ({ children })=>{
    const { user, isAuthenticated, hasRole } = (0, _useAuth.useAuthContext)();
    const [currentOrganisation, setCurrentOrganisation] = (0, _react.useState)(null);
    const [allOrganisations, setAllOrganisations] = (0, _react.useState)([]);
    const [availableIndustries, setAvailableIndustries] = (0, _react.useState)([]);
    const [accessibleOrganisations, setAccessibleOrganisations] = (0, _react.useState)([]);
    const [isLoadingCurrent, setIsLoadingCurrent] = (0, _react.useState)(false);
    const [isLoadingAll, setIsLoadingAll] = (0, _react.useState)(false);
    const [isLoadingIndustries, setIsLoadingIndustries] = (0, _react.useState)(false);
    const [isLoadingAccessible, setIsLoadingAccessible] = (0, _react.useState)(false);
    const [isSwitching, setIsSwitching] = (0, _react.useState)(false);
    const isSuperAdmin = hasRole("admin") // In this system, admin role can create organisations
    ;
    const canManageOrganisations = isSuperAdmin;
    // Load selected organization from localStorage on mount
    (0, _react.useEffect)(()=>{
        if (typeof window !== "undefined") {
            const savedOrgId = localStorage.getItem("selectedOrganisationId");
            if (savedOrgId && currentOrganisation?.id !== savedOrgId) {
            // Will be loaded when organizations are fetched
            }
        }
    }, []);
    (0, _react.useEffect)(()=>{
        if (isAuthenticated && user) {
            // Always load industries
            loadAvailableIndustries();
            // Load accessible organizations for all users
            refreshAccessibleOrganisations();
            // Load current organisation for regular users
            if (!isSuperAdmin) {
                refreshCurrentOrganisation();
            }
            // Load all organisations for super admins
            if (isSuperAdmin) {
                refreshAllOrganisations();
            }
        }
    }, [
        isAuthenticated,
        user,
        isSuperAdmin
    ]);
    const loadAvailableIndustries = async ()=>{
        try {
            setIsLoadingIndustries(true);
            const industries = await _api.apiService.getAvailableIndustries();
            setAvailableIndustries(industries);
        } catch (error) {
            console.error("Failed to load industries:", error);
        } finally{
            setIsLoadingIndustries(false);
        }
    };
    const refreshCurrentOrganisation = async ()=>{
        if (!isAuthenticated) return;
        try {
            setIsLoadingCurrent(true);
            const organisation = await _api.apiService.getCurrentOrganisation();
            setCurrentOrganisation(organisation);
        } catch (error) {
            console.error("Failed to load current organisation:", error);
            setCurrentOrganisation(null);
        } finally{
            setIsLoadingCurrent(false);
        }
    };
    const refreshAllOrganisations = async ()=>{
        if (!isSuperAdmin || !isAuthenticated) return;
        try {
            setIsLoadingAll(true);
            const organisations = await _api.apiService.getAllOrganisations();
            setAllOrganisations(organisations);
        } catch (error) {
            console.error("Failed to load all organisations:", error);
            setAllOrganisations([]);
        } finally{
            setIsLoadingAll(false);
        }
    };
    const createOrganisation = async (data)=>{
        if (!isSuperAdmin) {
            throw new Error("Only Super Admins can create organisations");
        }
        try {
            const newOrganisation = await _api.apiService.createOrganisation(data);
            // Refresh the list after creation
            await refreshAllOrganisations();
            await refreshAccessibleOrganisations();
            return newOrganisation;
        } catch (error) {
            console.error("Failed to create organisation:", error);
            throw error;
        }
    };
    const refreshAccessibleOrganisations = async ()=>{
        if (!isAuthenticated) return;
        try {
            setIsLoadingAccessible(true);
            // For Super Admin, accessible orgs are all orgs
            if (isSuperAdmin) {
                const organisations = await _api.apiService.getAllOrganisations();
                setAccessibleOrganisations(organisations);
            } else {
                // For regular users, get organizations they have access to
                const organisations = await _api.apiService.getUserAccessibleOrganisations();
                setAccessibleOrganisations(organisations);
            }
        } catch (error) {
            console.error("Failed to load accessible organisations:", error);
            setAccessibleOrganisations([]);
        } finally{
            setIsLoadingAccessible(false);
        }
    };
    const switchOrganisation = async (orgId)=>{
        if (!isAuthenticated) return;
        try {
            setIsSwitching(true);
            // Validate user has access to this organization
            const hasAccess = accessibleOrganisations.some((org)=>org.id === orgId);
            if (!hasAccess) {
                throw new Error("You do not have access to this organization");
            }
            // Clear any cached data from previous organization context
            if (typeof window !== "undefined") {
                // Clear any organization-specific cache keys
                const keysToRemove = [];
                for(let i = 0; i < localStorage.length; i++){
                    const key = localStorage.key(i);
                    if (key && (key.includes("org_") || key.includes("tenant_"))) {
                        keysToRemove.push(key);
                    }
                }
                keysToRemove.forEach((key)=>localStorage.removeItem(key));
            }
            // Set the new organization context
            const targetOrg = accessibleOrganisations.find((org)=>org.id === orgId);
            if (targetOrg) {
                setCurrentOrganisation(targetOrg);
                // Persist selection
                if (typeof window !== "undefined") {
                    localStorage.setItem("selectedOrganisationId", orgId);
                }
                // Update API service organization context
                _api.apiService.setOrganizationContext(orgId);
                // Audit log the organization switch
                try {
                    await _api.apiService.logOrganizationSwitch(orgId);
                } catch (auditError) {
                    console.warn("Failed to log organization switch:", auditError);
                // Don't fail the switch if audit logging fails
                }
                // Trigger data refresh for current page
                window.dispatchEvent(new CustomEvent("organizationChanged", {
                    detail: {
                        organizationId: orgId,
                        organization: targetOrg
                    }
                }));
            }
        } catch (error) {
            console.error("Failed to switch organisation:", error);
            throw error;
        } finally{
            setIsSwitching(false);
        }
    };
    const contextValue = {
        currentOrganisation,
        allOrganisations,
        availableIndustries,
        accessibleOrganisations,
        isLoadingCurrent,
        isLoadingAll,
        isLoadingIndustries,
        isLoadingAccessible,
        isSwitching,
        refreshCurrentOrganisation,
        refreshAllOrganisations,
        createOrganisation,
        switchOrganisation,
        refreshAccessibleOrganisations,
        canManageOrganisations,
        isSuperAdmin
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(OrganisationContext.Provider, {
        value: contextValue,
        children: children
    });
};

//# sourceMappingURL=data:application/json;base64,