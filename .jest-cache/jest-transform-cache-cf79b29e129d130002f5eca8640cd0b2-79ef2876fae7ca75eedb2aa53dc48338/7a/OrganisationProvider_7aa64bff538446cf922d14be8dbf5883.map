{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/providers/OrganisationProvider.tsx"],"sourcesContent":["'use client'\n\nimport React, { createContext, useContext, useState, useEffect } from 'react'\nimport { Organisation, IndustryOption } from '@/types/api'\nimport { apiService } from '@/services/api'\nimport { useAuthContext } from '@/hooks/useAuth'\n\ninterface OrganisationContextType {\n  // Current user's organisation\n  currentOrganisation: Organisation | null\n  \n  // All organisations (Super Admin only)\n  allOrganisations: Organisation[]\n  \n  // Available industries\n  availableIndustries: IndustryOption[]\n  \n  // Organizations user has access to\n  accessibleOrganisations: Organisation[]\n  \n  // Loading states\n  isLoadingCurrent: boolean\n  isLoadingAll: boolean\n  isLoadingIndustries: boolean\n  isLoadingAccessible: boolean\n  isSwitching: boolean\n  \n  // Actions\n  refreshCurrentOrganisation: () => Promise<void>\n  refreshAllOrganisations: () => Promise<void>\n  createOrganisation: (data: any) => Promise<Organisation>\n  switchOrganisation: (orgId: string) => Promise<void>\n  refreshAccessibleOrganisations: () => Promise<void>\n  \n  // Utilities\n  canManageOrganisations: boolean\n  isSuperAdmin: boolean\n}\n\nconst OrganisationContext = createContext<OrganisationContextType | undefined>(undefined)\n\nexport const useOrganisationContext = (): OrganisationContextType => {\n  const context = useContext(OrganisationContext)\n  if (!context) {\n    throw new Error('useOrganisationContext must be used within an OrganisationProvider')\n  }\n  return context\n}\n\ninterface OrganisationProviderProps {\n  children: React.ReactNode\n}\n\nexport const OrganisationProvider: React.FC<OrganisationProviderProps> = ({ children }) => {\n  const { user, isAuthenticated, hasRole } = useAuthContext()\n  \n  const [currentOrganisation, setCurrentOrganisation] = useState<Organisation | null>(null)\n  const [allOrganisations, setAllOrganisations] = useState<Organisation[]>([])\n  const [availableIndustries, setAvailableIndustries] = useState<IndustryOption[]>([])\n  const [accessibleOrganisations, setAccessibleOrganisations] = useState<Organisation[]>([])\n  \n  const [isLoadingCurrent, setIsLoadingCurrent] = useState(false)\n  const [isLoadingAll, setIsLoadingAll] = useState(false)\n  const [isLoadingIndustries, setIsLoadingIndustries] = useState(false)\n  const [isLoadingAccessible, setIsLoadingAccessible] = useState(false)\n  const [isSwitching, setIsSwitching] = useState(false)\n\n  const isSuperAdmin = hasRole('admin') // In this system, admin role can create organisations\n  const canManageOrganisations = isSuperAdmin\n\n  // Load selected organization from localStorage on mount\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      const savedOrgId = localStorage.getItem('selectedOrganisationId')\n      if (savedOrgId && currentOrganisation?.id !== savedOrgId) {\n        // Will be loaded when organizations are fetched\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    if (isAuthenticated && user) {\n      // Always load industries\n      loadAvailableIndustries()\n      \n      // Load accessible organizations for all users\n      refreshAccessibleOrganisations()\n      \n      // Load current organisation for regular users\n      if (!isSuperAdmin) {\n        refreshCurrentOrganisation()\n      }\n      \n      // Load all organisations for super admins\n      if (isSuperAdmin) {\n        refreshAllOrganisations()\n      }\n    }\n  }, [isAuthenticated, user, isSuperAdmin])\n\n  const loadAvailableIndustries = async () => {\n    try {\n      setIsLoadingIndustries(true)\n      const industries = await apiService.getAvailableIndustries()\n      setAvailableIndustries(industries)\n    } catch (error) {\n      console.error('Failed to load industries:', error)\n    } finally {\n      setIsLoadingIndustries(false)\n    }\n  }\n\n  const refreshCurrentOrganisation = async () => {\n    if (!isAuthenticated) return\n\n    try {\n      setIsLoadingCurrent(true)\n      const organisation = await apiService.getCurrentOrganisation()\n      setCurrentOrganisation(organisation)\n    } catch (error) {\n      console.error('Failed to load current organisation:', error)\n      setCurrentOrganisation(null)\n    } finally {\n      setIsLoadingCurrent(false)\n    }\n  }\n\n  const refreshAllOrganisations = async () => {\n    if (!isSuperAdmin || !isAuthenticated) return\n\n    try {\n      setIsLoadingAll(true)\n      const organisations = await apiService.getAllOrganisations()\n      setAllOrganisations(organisations)\n    } catch (error) {\n      console.error('Failed to load all organisations:', error)\n      setAllOrganisations([])\n    } finally {\n      setIsLoadingAll(false)\n    }\n  }\n\n  const createOrganisation = async (data: any): Promise<Organisation> => {\n    if (!isSuperAdmin) {\n      throw new Error('Only Super Admins can create organisations')\n    }\n\n    try {\n      const newOrganisation = await apiService.createOrganisation(data)\n      \n      // Refresh the list after creation\n      await refreshAllOrganisations()\n      await refreshAccessibleOrganisations()\n      \n      return newOrganisation\n    } catch (error) {\n      console.error('Failed to create organisation:', error)\n      throw error\n    }\n  }\n\n  const refreshAccessibleOrganisations = async () => {\n    if (!isAuthenticated) return\n\n    try {\n      setIsLoadingAccessible(true)\n      \n      // For Super Admin, accessible orgs are all orgs\n      if (isSuperAdmin) {\n        const organisations = await apiService.getAllOrganisations()\n        setAccessibleOrganisations(organisations)\n      } else {\n        // For regular users, get organizations they have access to\n        const organisations = await apiService.getUserAccessibleOrganisations()\n        setAccessibleOrganisations(organisations)\n      }\n    } catch (error) {\n      console.error('Failed to load accessible organisations:', error)\n      setAccessibleOrganisations([])\n    } finally {\n      setIsLoadingAccessible(false)\n    }\n  }\n\n  const switchOrganisation = async (orgId: string) => {\n    if (!isAuthenticated) return\n\n    try {\n      setIsSwitching(true)\n      \n      // Validate user has access to this organization\n      const hasAccess = accessibleOrganisations.some(org => org.id === orgId)\n      if (!hasAccess) {\n        throw new Error('You do not have access to this organization')\n      }\n\n      // Clear any cached data from previous organization context\n      if (typeof window !== 'undefined') {\n        // Clear any organization-specific cache keys\n        const keysToRemove = []\n        for (let i = 0; i < localStorage.length; i++) {\n          const key = localStorage.key(i)\n          if (key && (key.includes('org_') || key.includes('tenant_'))) {\n            keysToRemove.push(key)\n          }\n        }\n        keysToRemove.forEach(key => localStorage.removeItem(key))\n      }\n\n      // Set the new organization context\n      const targetOrg = accessibleOrganisations.find(org => org.id === orgId)\n      if (targetOrg) {\n        setCurrentOrganisation(targetOrg)\n        \n        // Persist selection\n        if (typeof window !== 'undefined') {\n          localStorage.setItem('selectedOrganisationId', orgId)\n        }\n\n        // Update API service organization context\n        apiService.setOrganizationContext(orgId)\n\n        // Audit log the organization switch\n        try {\n          await apiService.logOrganizationSwitch(orgId)\n        } catch (auditError) {\n          console.warn('Failed to log organization switch:', auditError)\n          // Don't fail the switch if audit logging fails\n        }\n\n        // Trigger data refresh for current page\n        window.dispatchEvent(new CustomEvent('organizationChanged', { \n          detail: { organizationId: orgId, organization: targetOrg } \n        }))\n      }\n    } catch (error) {\n      console.error('Failed to switch organisation:', error)\n      throw error\n    } finally {\n      setIsSwitching(false)\n    }\n  }\n\n  const contextValue: OrganisationContextType = {\n    currentOrganisation,\n    allOrganisations,\n    availableIndustries,\n    accessibleOrganisations,\n    isLoadingCurrent,\n    isLoadingAll,\n    isLoadingIndustries,\n    isLoadingAccessible,\n    isSwitching,\n    refreshCurrentOrganisation,\n    refreshAllOrganisations,\n    createOrganisation,\n    switchOrganisation,\n    refreshAccessibleOrganisations,\n    canManageOrganisations,\n    isSuperAdmin\n  }\n\n  return (\n    <OrganisationContext.Provider value={contextValue}>\n      {children}\n    </OrganisationContext.Provider>\n  )\n}"],"names":["OrganisationProvider","useOrganisationContext","OrganisationContext","createContext","undefined","context","useContext","Error","children","user","isAuthenticated","hasRole","useAuthContext","currentOrganisation","setCurrentOrganisation","useState","allOrganisations","setAllOrganisations","availableIndustries","setAvailableIndustries","accessibleOrganisations","setAccessibleOrganisations","isLoadingCurrent","setIsLoadingCurrent","isLoadingAll","setIsLoadingAll","isLoadingIndustries","setIsLoadingIndustries","isLoadingAccessible","setIsLoadingAccessible","isSwitching","setIsSwitching","isSuperAdmin","canManageOrganisations","useEffect","window","savedOrgId","localStorage","getItem","id","loadAvailableIndustries","refreshAccessibleOrganisations","refreshCurrentOrganisation","refreshAllOrganisations","industries","apiService","getAvailableIndustries","error","console","organisation","getCurrentOrganisation","organisations","getAllOrganisations","createOrganisation","data","newOrganisation","getUserAccessibleOrganisations","switchOrganisation","orgId","hasAccess","some","org","keysToRemove","i","length","key","includes","push","forEach","removeItem","targetOrg","find","setItem","setOrganizationContext","logOrganizationSwitch","auditError","warn","dispatchEvent","CustomEvent","detail","organizationId","organization","contextValue","Provider","value"],"mappings":"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"}