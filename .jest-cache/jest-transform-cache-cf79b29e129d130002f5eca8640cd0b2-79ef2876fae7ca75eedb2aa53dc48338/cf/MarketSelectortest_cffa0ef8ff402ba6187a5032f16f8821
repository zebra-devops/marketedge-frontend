60f03dcf882d8566ecbe3393518bf720
/**
 * Test file for MarketSelector component
 * 
 * Demonstrates multi-tenant testing patterns with industry-specific scenarios
 */ "use strict";
// Mock the MarketSelector component for testing
jest.mock("../MarketSelector", ()=>({
        MarketSelector: ({ onMarketChange, currentMarket, industry })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "market-selector",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("select", {
                        value: currentMarket || "",
                        onChange: (e)=>onMarketChange?.(e.target.value),
                        "data-testid": "market-select",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                value: "",
                                children: "Select Market"
                            }),
                            industry === "cinema" && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "cinema-downtown",
                                        children: "Downtown Cinema"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "cinema-mall",
                                        children: "Mall Cinema"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "cinema-suburban",
                                        children: "Suburban Cinema"
                                    })
                                ]
                            }),
                            industry === "hotel" && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "hotel-luxury",
                                        children: "Luxury Hotels"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "hotel-business",
                                        children: "Business Hotels"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "hotel-budget",
                                        children: "Budget Hotels"
                                    })
                                ]
                            }),
                            industry === "gym" && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "gym-premium",
                                        children: "Premium Fitness"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "gym-community",
                                        children: "Community Gyms"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "gym-24h",
                                        children: "24/7 Gyms"
                                    })
                                ]
                            }),
                            (!industry || industry === "general") && /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                                children: [
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "general-local",
                                        children: "Local Market"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "general-regional",
                                        children: "Regional Market"
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("option", {
                                        value: "general-national",
                                        children: "National Market"
                                    })
                                ]
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "market-info",
                        children: [
                            "Current Industry: ",
                            industry || "general"
                        ]
                    })
                ]
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _testutils = require("../../../utils/test-utils");
const _MarketSelector = require("../MarketSelector");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("MarketSelector Component", ()=>{
    describe("Basic functionality", ()=>{
        it("renders with default props", ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {}));
            expect(_react1.screen.getByTestId("market-selector")).toBeInTheDocument();
            expect(_react1.screen.getByTestId("market-select")).toBeInTheDocument();
        });
        it("displays current market selection", ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {
                currentMarket: "general-local"
            }));
            const select = _react1.screen.getByTestId("market-select");
            expect(select.value).toBe("general-local");
        });
        it("calls onMarketChange when selection changes", async ()=>{
            const onMarketChange = jest.fn();
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {
                onMarketChange: onMarketChange
            }));
            const select = _react1.screen.getByTestId("market-select");
            await user.selectOptions(select, "general-regional");
            expect(onMarketChange).toHaveBeenCalledWith("general-regional");
        });
    });
    describe("Industry-specific behavior", ()=>{
        it("shows cinema-specific markets for cinema industry", ()=>{
            (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {}), "cinema");
            expect(_react1.screen.getByText("Downtown Cinema")).toBeInTheDocument();
            expect(_react1.screen.getByText("Mall Cinema")).toBeInTheDocument();
            expect(_react1.screen.getByText("Suburban Cinema")).toBeInTheDocument();
            expect(_react1.screen.getByText("Current Industry: cinema")).toBeInTheDocument();
        });
        it("shows hotel-specific markets for hotel industry", ()=>{
            (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {}), "hotel");
            expect(_react1.screen.getByText("Luxury Hotels")).toBeInTheDocument();
            expect(_react1.screen.getByText("Business Hotels")).toBeInTheDocument();
            expect(_react1.screen.getByText("Budget Hotels")).toBeInTheDocument();
            expect(_react1.screen.getByText("Current Industry: hotel")).toBeInTheDocument();
        });
        it("shows gym-specific markets for gym industry", ()=>{
            (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {}), "gym");
            expect(_react1.screen.getByText("Premium Fitness")).toBeInTheDocument();
            expect(_react1.screen.getByText("Community Gyms")).toBeInTheDocument();
            expect(_react1.screen.getByText("24/7 Gyms")).toBeInTheDocument();
            expect(_react1.screen.getByText("Current Industry: gym")).toBeInTheDocument();
        });
        it("shows general markets for unknown industry", ()=>{
            (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {}), "general");
            expect(_react1.screen.getByText("Local Market")).toBeInTheDocument();
            expect(_react1.screen.getByText("Regional Market")).toBeInTheDocument();
            expect(_react1.screen.getByText("National Market")).toBeInTheDocument();
            expect(_react1.screen.getByText("Current Industry: general")).toBeInTheDocument();
        });
    });
    describe("Multi-tenant isolation", ()=>{
        it("preserves market selection across tenant switches", async ()=>{
            const onMarketChange = jest.fn();
            // Render for cinema tenant
            const { rerender, user } = (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {
                onMarketChange: onMarketChange
            }), "cinema");
            // Select cinema market
            const select = _react1.screen.getByTestId("market-select");
            await user.selectOptions(select, "cinema-downtown");
            expect(onMarketChange).toHaveBeenCalledWith("cinema-downtown");
            // Switch to hotel tenant
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {
                onMarketChange: onMarketChange,
                currentMarket: "hotel-luxury"
            }), {
                industryType: "hotel"
            });
            // Should show hotel options now
            expect(_react1.screen.getByText("Luxury Hotels")).toBeInTheDocument();
            expect(_react1.screen.getByText("Current Industry: hotel")).toBeInTheDocument();
        });
    });
    describe("Accessibility", ()=>{
        it("has no accessibility violations", async ()=>{
            const { container } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {
                currentMarket: "general-local"
            }));
            await (0, _testutils.testAccessibility)(container);
        });
        it("supports keyboard navigation", async ()=>{
            const onMarketChange = jest.fn();
            const { user } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {
                onMarketChange: onMarketChange
            }));
            const select = _react1.screen.getByTestId("market-select");
            // Focus and navigate with keyboard
            select.focus();
            await user.keyboard("{ArrowDown}");
            await user.keyboard("{Enter}");
            expect(onMarketChange).toHaveBeenCalled();
        });
        it("has proper ARIA labels and descriptions", ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {}));
            const select = _react1.screen.getByTestId("market-select");
            expect(select).toBeInTheDocument();
            // Should have accessible name
            expect(select).toBeVisible();
        });
    });
    describe("Loading states", ()=>{
        it("handles loading state gracefully", async ()=>{
            // Mock API delay
            _testutils.mockApiEndpoints.mockMarketEdge();
            const { container } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {}));
            await (0, _testutils.waitForLoadingToFinish)(container);
            expect(_react1.screen.getByTestId("market-selector")).toBeInTheDocument();
        });
    });
    describe("Error handling", ()=>{
        it("displays error state when API fails", async ()=>{
            // Mock API failure
            _testutils.mockApiEndpoints.mockMarketEdge();
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {}));
            // Component should still render with fallback options
            expect(_react1.screen.getByTestId("market-selector")).toBeInTheDocument();
        });
    });
    describe("Performance", ()=>{
        it("renders efficiently with many market options", async ()=>{
            const manyMarkets = _testutils.generateTestData.competitors(50);
            const startTime = performance.now();
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {}));
            const endTime = performance.now();
            const renderTime = endTime - startTime;
            // Should render in reasonable time (< 100ms)
            expect(renderTime).toBeLessThan(100);
        });
    });
    describe("Integration scenarios", ()=>{
        describe("Cinema industry", ()=>{
            beforeEach(()=>{
                _testutils.industryTestScenarios.cinema.ticketingSystem();
            });
            it("integrates with cinema ticketing data", async ()=>{
                const onMarketChange = jest.fn();
                const { user } = (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {
                    onMarketChange: onMarketChange
                }), "cinema");
                // Select cinema market
                const select = _react1.screen.getByTestId("market-select");
                await user.selectOptions(select, "cinema-downtown");
                expect(onMarketChange).toHaveBeenCalledWith("cinema-downtown");
                // Should trigger integration with ticketing system
                await (0, _react1.waitFor)(()=>{
                    expect(_react1.screen.getByText("Current Industry: cinema")).toBeInTheDocument();
                });
            });
        });
        describe("Hotel industry", ()=>{
            beforeEach(()=>{
                _testutils.industryTestScenarios.hotel.realTimePricing();
            });
            it("integrates with real-time pricing data", async ()=>{
                const onMarketChange = jest.fn();
                const { user } = (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {
                    onMarketChange: onMarketChange
                }), "hotel");
                const select = _react1.screen.getByTestId("market-select");
                await user.selectOptions(select, "hotel-luxury");
                expect(onMarketChange).toHaveBeenCalledWith("hotel-luxury");
            });
        });
        describe("Gym industry", ()=>{
            beforeEach(()=>{
                _testutils.industryTestScenarios.gym.membershipTracking();
            });
            it("integrates with membership tracking", async ()=>{
                const onMarketChange = jest.fn();
                const { user } = (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {
                    onMarketChange: onMarketChange
                }), "gym");
                const select = _react1.screen.getByTestId("market-select");
                await user.selectOptions(select, "gym-premium");
                expect(onMarketChange).toHaveBeenCalledWith("gym-premium");
            });
        });
    });
    describe("Snapshot tests", ()=>{
        it("matches snapshot for general industry", ()=>{
            const { container } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {}));
            expect(container.firstChild).toMatchSnapshot();
        });
        it("matches snapshot for cinema industry", ()=>{
            const { container } = (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {}), "cinema");
            expect(container.firstChild).toMatchSnapshot();
        });
        it("matches snapshot for hotel industry", ()=>{
            const { container } = (0, _testutils.renderForIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_MarketSelector.MarketSelector, {}), "hotel");
            expect(container.firstChild).toMatchSnapshot();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,