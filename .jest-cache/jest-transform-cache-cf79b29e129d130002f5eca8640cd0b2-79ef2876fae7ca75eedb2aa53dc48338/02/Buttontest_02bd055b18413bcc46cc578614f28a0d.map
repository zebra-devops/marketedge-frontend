{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/ui/__tests__/Button.test.tsx"],"sourcesContent":["/**\n * Tests for Button Component\n * \n * Comprehensive test suite covering:\n * - Basic rendering and functionality\n * - Different variants and sizes\n * - Accessibility features\n * - User interactions\n * - Loading and disabled states\n */\n\nimport { render, screen, fireEvent } from '@test-utils'\nimport { axe } from 'jest-axe'\nimport { Button } from '../Button'\n\ndescribe('Button Component', () => {\n  describe('Basic Rendering', () => {\n    it('renders button with text content', () => {\n      render(<Button>Click me</Button>)\n      \n      const button = screen.getByRole('button', { name: /click me/i })\n      expect(button).toBeInTheDocument()\n      expect(button).toHaveTextContent('Click me')\n    })\n\n    it('renders button with custom className', () => {\n      render(<Button className=\"custom-class\">Test</Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('custom-class')\n    })\n\n    it('forwards ref correctly', () => {\n      const ref = { current: null } as React.RefObject<HTMLButtonElement>\n      \n      render(<Button ref={ref}>Test</Button>)\n      \n      expect(ref.current).toBeInstanceOf(HTMLButtonElement)\n    })\n  })\n\n  describe('Button Variants', () => {\n    it('renders primary variant by default', () => {\n      render(<Button>Primary</Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('bg-blue-600') // Assuming Tailwind classes\n    })\n\n    it('renders secondary variant when specified', () => {\n      render(<Button variant=\"secondary\">Secondary</Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('bg-gray-600')\n    })\n\n    it('renders destructive variant when specified', () => {\n      render(<Button variant=\"destructive\">Delete</Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('bg-red-600')\n    })\n\n    it('renders outline variant when specified', () => {\n      render(<Button variant=\"outline\">Outline</Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('border')\n      expect(button).not.toHaveClass('bg-blue-600')\n    })\n\n    it('renders ghost variant when specified', () => {\n      render(<Button variant=\"ghost\">Ghost</Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('hover:bg-gray-100')\n    })\n  })\n\n  describe('Button Sizes', () => {\n    it('renders default size when not specified', () => {\n      render(<Button>Default</Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('h-10')\n    })\n\n    it('renders small size when specified', () => {\n      render(<Button size=\"sm\">Small</Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('h-9')\n    })\n\n    it('renders large size when specified', () => {\n      render(<Button size=\"lg\">Large</Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('h-11')\n    })\n\n    it('renders icon size when specified', () => {\n      render(<Button size=\"icon\">🔍</Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toHaveClass('h-10', 'w-10')\n    })\n  })\n\n  describe('Interactive States', () => {\n    it('handles click events', () => {\n      const handleClick = jest.fn()\n      render(<Button onClick={handleClick}>Click me</Button>)\n      \n      const button = screen.getByRole('button')\n      fireEvent.click(button)\n      \n      expect(handleClick).toHaveBeenCalledTimes(1)\n    })\n\n    it('does not trigger onClick when disabled', () => {\n      const handleClick = jest.fn()\n      render(<Button disabled onClick={handleClick}>Disabled</Button>)\n      \n      const button = screen.getByRole('button')\n      fireEvent.click(button)\n      \n      expect(handleClick).not.toHaveBeenCalled()\n      expect(button).toBeDisabled()\n    })\n\n    it('shows loading state correctly', () => {\n      render(<Button loading>Loading</Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toBeDisabled()\n      expect(screen.getByTestId('loading-spinner')).toBeInTheDocument()\n    })\n\n    it('prevents click events during loading', () => {\n      const handleClick = jest.fn()\n      render(<Button loading onClick={handleClick}>Loading</Button>)\n      \n      const button = screen.getByRole('button')\n      fireEvent.click(button)\n      \n      expect(handleClick).not.toHaveBeenCalled()\n    })\n  })\n\n  describe('Accessibility', () => {\n    it('has no accessibility violations', async () => {\n      const { container } = render(<Button>Accessible Button</Button>)\n      const results = await axe(container)\n      \n      expect(results).toHaveNoViolations()\n    })\n\n    it('supports custom ARIA labels', () => {\n      render(<Button aria-label=\"Custom label\">Icon only</Button>)\n      \n      const button = screen.getByRole('button', { name: /custom label/i })\n      expect(button).toBeInTheDocument()\n    })\n\n    it('supports ARIA describedby', () => {\n      render(\n        <>\n          <Button aria-describedby=\"help-text\">Submit</Button>\n          <div id=\"help-text\">This will submit the form</div>\n        </>\n      )\n      \n      const button = screen.getByRole('button')\n      expect(button).toHaveAttribute('aria-describedby', 'help-text')\n    })\n\n    it('has correct role and type attributes', () => {\n      render(<Button type=\"submit\">Submit</Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toHaveAttribute('type', 'submit')\n    })\n  })\n\n  describe('Form Integration', () => {\n    it('can be used as form submission button', () => {\n      const handleSubmit = jest.fn(e => e.preventDefault())\n      \n      render(\n        <form onSubmit={handleSubmit}>\n          <Button type=\"submit\">Submit Form</Button>\n        </form>\n      )\n      \n      const button = screen.getByRole('button')\n      fireEvent.click(button)\n      \n      expect(handleSubmit).toHaveBeenCalledTimes(1)\n    })\n\n    it('can be used as form reset button', () => {\n      render(\n        <form>\n          <input defaultValue=\"test\" />\n          <Button type=\"reset\">Reset Form</Button>\n        </form>\n      )\n      \n      const input = screen.getByRole('textbox')\n      const resetButton = screen.getByRole('button')\n      \n      // Change input value\n      fireEvent.change(input, { target: { value: 'changed' } })\n      expect(input).toHaveValue('changed')\n      \n      // Reset form\n      fireEvent.click(resetButton)\n      expect(input).toHaveValue('test')\n    })\n  })\n\n  describe('Multi-tenant Context', () => {\n    it('renders correctly in cinema tenant context', () => {\n      render(<Button>Book Tickets</Button>, {\n        tenant: { industry: 'cinema', organizationName: 'CineMax' },\n      })\n      \n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n      expect(button).toHaveTextContent('Book Tickets')\n    })\n\n    it('renders correctly in hotel tenant context', () => {\n      render(<Button>Make Reservation</Button>, {\n        tenant: { industry: 'hotel', organizationName: 'Grand Hotel' },\n      })\n      \n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n      expect(button).toHaveTextContent('Make Reservation')\n    })\n\n    it('applies tenant-specific styling if implemented', () => {\n      // This test would be more relevant if the button component\n      // actually uses tenant context for styling\n      render(<Button>Test</Button>, {\n        tenant: { industry: 'cinema' },\n      })\n      \n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n      // Add assertions for tenant-specific styling if implemented\n    })\n  })\n\n  describe('Edge Cases', () => {\n    it('handles very long button text', () => {\n      const longText = 'This is a very long button text that should be handled gracefully'\n      \n      render(<Button>{longText}</Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toHaveTextContent(longText)\n      expect(button).toBeInTheDocument()\n    })\n\n    it('handles empty content gracefully', () => {\n      render(<Button></Button>)\n      \n      const button = screen.getByRole('button')\n      expect(button).toBeInTheDocument()\n      expect(button).toHaveTextContent('')\n    })\n\n    it('handles rapid clicks', () => {\n      const handleClick = jest.fn()\n      render(<Button onClick={handleClick}>Rapid Click</Button>)\n      \n      const button = screen.getByRole('button')\n      \n      // Simulate rapid clicks\n      for (let i = 0; i < 5; i++) {\n        fireEvent.click(button)\n      }\n      \n      expect(handleClick).toHaveBeenCalledTimes(5)\n    })\n\n    it('maintains focus when not disabled', () => {\n      render(<Button>Focus Test</Button>)\n      \n      const button = screen.getByRole('button')\n      button.focus()\n      \n      expect(button).toHaveFocus()\n    })\n\n    it('cannot receive focus when disabled', () => {\n      render(<Button disabled>Disabled Focus</Button>)\n      \n      const button = screen.getByRole('button')\n      button.focus()\n      \n      expect(button).not.toHaveFocus()\n    })\n  })\n\n  describe('Performance', () => {\n    it('does not re-render unnecessarily', () => {\n      const renderSpy = jest.fn()\n      \n      const TestButton = (props: any) => {\n        renderSpy()\n        return <Button {...props} />\n      }\n      \n      const { rerender } = render(<TestButton>Test</TestButton>)\n      \n      expect(renderSpy).toHaveBeenCalledTimes(1)\n      \n      // Re-render with same props\n      rerender(<TestButton>Test</TestButton>)\n      \n      // Should not cause additional renders if properly memoized\n      expect(renderSpy).toHaveBeenCalledTimes(2)\n    })\n  })\n})"],"names":["describe","it","render","Button","button","screen","getByRole","name","expect","toBeInTheDocument","toHaveTextContent","className","toHaveClass","ref","current","toBeInstanceOf","HTMLButtonElement","variant","not","size","handleClick","jest","fn","onClick","fireEvent","click","toHaveBeenCalledTimes","disabled","toHaveBeenCalled","toBeDisabled","loading","getByTestId","container","results","axe","toHaveNoViolations","aria-label","aria-describedby","div","id","toHaveAttribute","type","handleSubmit","e","preventDefault","form","onSubmit","input","defaultValue","resetButton","change","target","value","toHaveValue","tenant","industry","organizationName","longText","i","focus","toHaveFocus","renderSpy","TestButton","props","rerender"],"mappings":"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"}