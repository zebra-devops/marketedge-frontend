{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/test-utils/multi-tenant-test-helpers.ts"],"sourcesContent":["/**\n * Multi-Tenant Testing Helpers\n * \n * Advanced utilities for testing multi-tenant scenarios including:\n * - Rate limiting behavior\n * - Feature flag variations\n * - Industry-specific behavior\n * - Subscription plan differences\n * - Cross-tenant isolation testing\n */\n\nimport { http, HttpResponse } from 'msw'\nimport { MockUser, MockOrganization, createMockUser, createMockOrganization } from './index'\n\n// Extended tenant configurations for comprehensive testing\nexport interface TenantTestScenario {\n  name: string\n  description: string\n  user: MockUser\n  expectedFeatures: string[]\n  expectedRateLimits: {\n    requestsPerMinute: number\n    burstLimit: number\n  }\n  mockApiResponses?: Array<{\n    endpoint: string\n    response: any\n    status?: number\n  }>\n}\n\n/**\n * Pre-configured tenant scenarios for common testing patterns\n */\nexport const TENANT_SCENARIOS: Record<string, TenantTestScenario> = {\n  // Hotel industry scenarios\n  hotel_basic: {\n    name: 'Hotel - Basic Plan',\n    description: 'Basic hotel with limited features and rate limits',\n    user: createMockUser({\n      organisation: createMockOrganization({\n        name: 'Budget Inn',\n        industry: 'hotel',\n        sic_code: '7011',\n        subscription_plan: 'basic',\n        rate_limit_per_hour: 1000,\n        burst_limit: 100\n      })\n    }),\n    expectedFeatures: [\n      'market_edge_enabled',\n      'competitive_analysis',\n      'basic_pricing'\n    ],\n    expectedRateLimits: {\n      requestsPerMinute: 30,\n      burstLimit: 60\n    }\n  },\n\n  hotel_professional: {\n    name: 'Hotel - Professional Plan',\n    description: 'Professional hotel with advanced features',\n    user: createMockUser({\n      organisation: createMockOrganization({\n        name: 'Grand Hotel',\n        industry: 'hotel',\n        sic_code: '7011',\n        subscription_plan: 'professional',\n        rate_limit_per_hour: 5000,\n        burst_limit: 250\n      })\n    }),\n    expectedFeatures: [\n      'market_edge_enabled',\n      'competitive_analysis',\n      'advanced_pricing',\n      'real_time_booking_data',\n      'occupancy_optimization'\n    ],\n    expectedRateLimits: {\n      requestsPerMinute: 100,\n      burstLimit: 200\n    }\n  },\n\n  hotel_enterprise: {\n    name: 'Hotel - Enterprise Plan',\n    description: 'Enterprise hotel chain with full feature access',\n    user: createMockUser({\n      organisation: createMockOrganization({\n        name: 'Luxury Hotel Chain',\n        industry: 'hotel',\n        sic_code: '7011',\n        subscription_plan: 'enterprise',\n        rate_limit_per_hour: 10000,\n        burst_limit: 500\n      })\n    }),\n    expectedFeatures: [\n      'market_edge_enabled',\n      'causal_edge_enabled',\n      'value_edge_enabled',\n      'competitive_analysis',\n      'advanced_pricing',\n      'real_time_booking_data',\n      'occupancy_optimization',\n      'revenue_management',\n      'predictive_analytics'\n    ],\n    expectedRateLimits: {\n      requestsPerMinute: 300,\n      burstLimit: 600\n    }\n  },\n\n  // Cinema industry scenarios\n  cinema_basic: {\n    name: 'Cinema - Basic Plan',\n    description: 'Small cinema with basic features',\n    user: createMockUser({\n      organisation: createMockOrganization({\n        name: 'Local Cinema',\n        industry: 'cinema',\n        sic_code: '7832',\n        subscription_plan: 'basic',\n        rate_limit_per_hour: 800,\n        burst_limit: 80\n      })\n    }),\n    expectedFeatures: [\n      'market_edge_enabled',\n      'show_time_optimization',\n      'basic_competitor_tracking'\n    ],\n    expectedRateLimits: {\n      requestsPerMinute: 25,\n      burstLimit: 50\n    }\n  },\n\n  cinema_professional: {\n    name: 'Cinema - Professional Plan',\n    description: 'Cinema chain with advanced scheduling',\n    user: createMockUser({\n      organisation: createMockOrganization({\n        name: 'Mega Cinema',\n        industry: 'cinema',\n        sic_code: '7832',\n        subscription_plan: 'professional',\n        rate_limit_per_hour: 4000,\n        burst_limit: 200\n      })\n    }),\n    expectedFeatures: [\n      'market_edge_enabled',\n      'show_time_optimization',\n      'advanced_competitor_tracking',\n      'dynamic_pricing',\n      'audience_analytics'\n    ],\n    expectedRateLimits: {\n      requestsPerMinute: 80,\n      burstLimit: 160\n    }\n  },\n\n  // Gym industry scenarios\n  gym_professional: {\n    name: 'Gym - Professional Plan',\n    description: 'Fitness center with member optimization',\n    user: createMockUser({\n      organisation: createMockOrganization({\n        name: 'FitLife Gym',\n        industry: 'gym',\n        sic_code: '7991',\n        subscription_plan: 'professional',\n        rate_limit_per_hour: 3000,\n        burst_limit: 150\n      })\n    }),\n    expectedFeatures: [\n      'market_edge_enabled',\n      'member_optimization',\n      'capacity_management',\n      'competitor_tracking'\n    ],\n    expectedRateLimits: {\n      requestsPerMinute: 60,\n      burstLimit: 120\n    }\n  },\n\n  // Cross-tenant isolation test scenario\n  isolated_tenant: {\n    name: 'Isolated Tenant Test',\n    description: 'Tenant for testing data isolation',\n    user: createMockUser({\n      id: 'isolated-user',\n      email: 'isolated@test.com',\n      organisation: createMockOrganization({\n        id: 'isolated-org',\n        name: 'Isolated Organization',\n        industry: 'retail',\n        sic_code: '5399',\n        subscription_plan: 'basic'\n      })\n    }),\n    expectedFeatures: [\n      'market_edge_enabled',\n      'basic_analytics'\n    ],\n    expectedRateLimits: {\n      requestsPerMinute: 30,\n      burstLimit: 60\n    }\n  }\n}\n\n/**\n * Create MSW handlers for a specific tenant scenario\n */\nexport function createTenantHandlers(scenario: TenantTestScenario) {\n  const handlers = [\n    // Auth endpoints\n    http.get('/api/v1/auth/me', () => {\n      return HttpResponse.json(scenario.user)\n    }),\n\n    http.get('/api/v1/organisations/current', () => {\n      return HttpResponse.json(scenario.user.organisation)\n    }),\n\n    // Feature flags endpoint\n    http.get('/api/v1/features', () => {\n      const flags = scenario.expectedFeatures.reduce((acc, feature) => {\n        acc[feature] = true\n        return acc\n      }, {} as Record<string, boolean>)\n\n      return HttpResponse.json({ flags })\n    }),\n\n    // Rate limiting info endpoint\n    http.get('/api/v1/admin/rate-limiting/current-usage/:tenantId', ({ params }) => {\n      if (params.tenantId === scenario.user.organisation.id) {\n        return HttpResponse.json({\n          tenant_id: scenario.user.organisation.id,\n          current_usage: {\n            [`rate_limit:org:${scenario.user.organisation.id}:general`]: 5\n          },\n          active_rules: ['Professional plan limits'],\n          next_reset_times: {}\n        })\n      }\n      return new HttpResponse(null, { status: 403 })\n    }),\n\n    // Market Edge endpoints\n    http.get('/api/v1/market-edge/competitors', () => {\n      return HttpResponse.json({\n        competitors: [\n          {\n            id: 'comp-1',\n            name: `${scenario.user.organisation.industry} Competitor 1`,\n            business_type: scenario.user.organisation.industry,\n            market_share_estimate: 15.5,\n            tracking_priority: 3\n          }\n        ]\n      })\n    })\n  ]\n\n  // Add custom API responses if provided\n  if (scenario.mockApiResponses) {\n    scenario.mockApiResponses.forEach(({ endpoint, response, status = 200 }) => {\n      handlers.push(\n        http.get(endpoint, () => {\n          return HttpResponse.json(response, { status })\n        })\n      )\n    })\n  }\n\n  return handlers\n}\n\n/**\n * Test helper for rate limiting scenarios\n */\nexport class RateLimitTestHelper {\n  private scenario: TenantTestScenario\n\n  constructor(scenario: TenantTestScenario) {\n    this.scenario = scenario\n  }\n\n  /**\n   * Create handlers for rate limit testing\n   */\n  createRateLimitHandlers() {\n    let requestCount = 0\n    const { requestsPerMinute, burstLimit } = this.scenario.expectedRateLimits\n\n    return [\n      http.get('/api/v1/test-rate-limit', () => {\n        requestCount++\n        \n        if (requestCount > requestsPerMinute) {\n          return new HttpResponse(\n            JSON.stringify({\n              error: 'Rate limit exceeded',\n              current_usage: requestCount,\n              limit: requestsPerMinute,\n              retry_after: 60\n            }),\n            {\n              status: 429,\n              headers: {\n                'X-RateLimit-Limit': requestsPerMinute.toString(),\n                'X-RateLimit-Remaining': '0',\n                'X-RateLimit-Reset': (Date.now() + 60000).toString(),\n                'Retry-After': '60'\n              }\n            }\n          )\n        }\n\n        return HttpResponse.json({ \n          success: true,\n          request_number: requestCount,\n          remaining: requestsPerMinute - requestCount\n        }, {\n          headers: {\n            'X-RateLimit-Limit': requestsPerMinute.toString(),\n            'X-RateLimit-Remaining': (requestsPerMinute - requestCount).toString(),\n            'X-RateLimit-Reset': (Date.now() + 60000).toString()\n          }\n        })\n      })\n    ]\n  }\n\n  /**\n   * Reset request counter\n   */\n  resetRequestCount() {\n    // This would reset the internal counter\n    // Implementation depends on how the rate limiting is mocked\n  }\n}\n\n/**\n * Cross-tenant isolation test helpers\n */\nexport class TenantIsolationTestHelper {\n  /**\n   * Create handlers that enforce tenant isolation\n   */\n  static createIsolationHandlers(allowedTenantId: string) {\n    return [\n      // Data endpoints that should be tenant-isolated\n      http.get('/api/v1/market-edge/competitors', ({ request }) => {\n        const tenantHeader = request.headers.get('X-Tenant-ID')\n        \n        if (tenantHeader !== allowedTenantId) {\n          return new HttpResponse(null, { status: 403 })\n        }\n\n        return HttpResponse.json({\n          competitors: [\n            {\n              id: `comp-${allowedTenantId}`,\n              name: `Competitor for ${allowedTenantId}`,\n              tenant_specific: true\n            }\n          ]\n        })\n      }),\n\n      http.get('/api/v1/organisations/:id/data', ({ params }) => {\n        if (params.id !== allowedTenantId) {\n          return new HttpResponse(null, { status: 403 })\n        }\n\n        return HttpResponse.json({\n          tenant_id: allowedTenantId,\n          sensitive_data: 'This should only be accessible to the correct tenant'\n        })\n      })\n    ]\n  }\n\n  /**\n   * Test that requests from different tenants are properly isolated\n   */\n  static createCrossTenantAccessTest(tenantA: string, tenantB: string) {\n    return [\n      http.get('/api/v1/cross-tenant-test', ({ request }) => {\n        const tenantHeader = request.headers.get('X-Tenant-ID')\n        \n        return HttpResponse.json({\n          requesting_tenant: tenantHeader,\n          accessible_data: tenantHeader === tenantA ? 'Data for A' : 'Data for B',\n          cross_tenant_blocked: true\n        })\n      })\n    ]\n  }\n}\n\n/**\n * Feature flag testing helpers\n */\nexport class FeatureFlagTestHelper {\n  /**\n   * Create handlers for feature flag testing with different configurations\n   */\n  static createFeatureFlagHandlers(flagConfigs: Record<string, Record<string, boolean>>) {\n    return [\n      http.get('/api/v1/features', ({ request }) => {\n        const tenantId = request.headers.get('X-Tenant-ID') || 'default'\n        const flags = flagConfigs[tenantId] || {}\n\n        return HttpResponse.json({ flags })\n      }),\n\n      // Endpoint that behaves differently based on feature flags\n      http.get('/api/v1/conditional-feature', ({ request }) => {\n        const tenantId = request.headers.get('X-Tenant-ID') || 'default'\n        const flags = flagConfigs[tenantId] || {}\n\n        if (flags.advanced_features) {\n          return HttpResponse.json({\n            feature_level: 'advanced',\n            additional_data: 'Only available with advanced features flag'\n          })\n        }\n\n        return HttpResponse.json({\n          feature_level: 'basic',\n          message: 'Upgrade to access advanced features'\n        })\n      })\n    ]\n  }\n}\n\n/**\n * Industry-specific test data generators\n */\nexport class IndustryTestDataGenerator {\n  static generateHotelData(orgId: string) {\n    return {\n      competitors: [\n        { id: '1', name: 'Marriott', business_type: 'hotel', market_share: 25 },\n        { id: '2', name: 'Hilton', business_type: 'hotel', market_share: 20 },\n        { id: '3', name: 'Hyatt', business_type: 'hotel', market_share: 15 }\n      ],\n      pricing_data: {\n        average_room_rate: 150,\n        occupancy_rate: 75,\n        revenue_per_room: 112.5\n      },\n      booking_channels: ['Direct', 'Booking.com', 'Expedia', 'Airbnb']\n    }\n  }\n\n  static generateCinemaData(orgId: string) {\n    return {\n      competitors: [\n        { id: '1', name: 'AMC', business_type: 'cinema', market_share: 30 },\n        { id: '2', name: 'Regal', business_type: 'cinema', market_share: 25 },\n        { id: '3', name: 'Cinemark', business_type: 'cinema', market_share: 20 }\n      ],\n      show_data: {\n        average_ticket_price: 12,\n        average_occupancy: 45,\n        concession_revenue_per_visitor: 8\n      },\n      popular_movies: ['Action Movie', 'Comedy Film', 'Drama Series']\n    }\n  }\n\n  static generateGymData(orgId: string) {\n    return {\n      competitors: [\n        { id: '1', name: 'Planet Fitness', business_type: 'gym', market_share: 35 },\n        { id: '2', name: 'LA Fitness', business_type: 'gym', market_share: 20 },\n        { id: '3', name: 'Gold\\'s Gym', business_type: 'gym', market_share: 15 }\n      ],\n      membership_data: {\n        average_monthly_fee: 35,\n        member_retention_rate: 68,\n        peak_hours: ['6-9 AM', '5-8 PM']\n      },\n      equipment_utilization: {\n        cardio: 85,\n        weights: 70,\n        classes: 60\n      }\n    }\n  }\n}\n\n/**\n * Performance testing helpers for multi-tenant scenarios\n */\nexport class PerformanceTestHelper {\n  /**\n   * Create handlers that simulate different performance characteristics by tenant\n   */\n  static createPerformanceHandlers(performanceProfiles: Record<string, number>) {\n    return [\n      http.get('/api/v1/performance-test', async ({ request }) => {\n        const tenantId = request.headers.get('X-Tenant-ID') || 'default'\n        const delay = performanceProfiles[tenantId] || 100\n\n        // Simulate processing delay\n        await new Promise(resolve => setTimeout(resolve, delay))\n\n        return HttpResponse.json({\n          tenant_id: tenantId,\n          response_time_ms: delay,\n          data: 'Performance test response'\n        })\n      })\n    ]\n  }\n}\n\n// Export default scenarios for easy importing\nexport default TENANT_SCENARIOS"],"names":["FeatureFlagTestHelper","IndustryTestDataGenerator","PerformanceTestHelper","RateLimitTestHelper","TENANT_SCENARIOS","TenantIsolationTestHelper","createTenantHandlers","hotel_basic","name","description","user","createMockUser","organisation","createMockOrganization","industry","sic_code","subscription_plan","rate_limit_per_hour","burst_limit","expectedFeatures","expectedRateLimits","requestsPerMinute","burstLimit","hotel_professional","hotel_enterprise","cinema_basic","cinema_professional","gym_professional","isolated_tenant","id","email","scenario","handlers","http","get","HttpResponse","json","flags","reduce","acc","feature","params","tenantId","tenant_id","current_usage","active_rules","next_reset_times","status","competitors","business_type","market_share_estimate","tracking_priority","mockApiResponses","forEach","endpoint","response","push","constructor","createRateLimitHandlers","requestCount","JSON","stringify","error","limit","retry_after","headers","toString","Date","now","success","request_number","remaining","resetRequestCount","createIsolationHandlers","allowedTenantId","request","tenantHeader","tenant_specific","sensitive_data","createCrossTenantAccessTest","tenantA","tenantB","requesting_tenant","accessible_data","cross_tenant_blocked","createFeatureFlagHandlers","flagConfigs","advanced_features","feature_level","additional_data","message","generateHotelData","orgId","market_share","pricing_data","average_room_rate","occupancy_rate","revenue_per_room","booking_channels","generateCinemaData","show_data","average_ticket_price","average_occupancy","concession_revenue_per_visitor","popular_movies","generateGymData","membership_data","average_monthly_fee","member_retention_rate","peak_hours","equipment_utilization","cardio","weights","classes","createPerformanceHandlers","performanceProfiles","delay","Promise","resolve","setTimeout","response_time_ms","data"],"mappings":"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"}