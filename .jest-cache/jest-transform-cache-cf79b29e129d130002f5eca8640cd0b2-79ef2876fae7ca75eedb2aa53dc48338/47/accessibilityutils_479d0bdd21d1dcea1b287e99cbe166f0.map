{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/__tests__/utils/accessibility-utils.ts"],"sourcesContent":["/**\n * Accessibility testing utilities\n * \n * Provides utilities for automated accessibility testing across the platform\n */\n\nimport { render, RenderResult } from '@testing-library/react'\nimport { axe, AxeResults, toHaveNoViolations } from 'jest-axe'\nimport { ReactElement } from 'react'\n\n// Extend Jest matchers\nexpect.extend(toHaveNoViolations)\n\n/**\n * WCAG 2.1 AA compliance configuration for axe-core\n */\nexport const wcagConfig = {\n  rules: {\n    // Color contrast rules\n    'color-contrast': { enabled: true },\n    'color-contrast-enhanced': { enabled: true },\n    \n    // Keyboard accessibility\n    'keyboard': { enabled: true },\n    'focus-order-semantics': { enabled: true },\n    'tabindex': { enabled: true },\n    \n    // Screen reader compatibility\n    'aria-allowed-attr': { enabled: true },\n    'aria-command-name': { enabled: true },\n    'aria-hidden-body': { enabled: true },\n    'aria-hidden-focus': { enabled: true },\n    'aria-input-field-name': { enabled: true },\n    'aria-label': { enabled: true },\n    'aria-labelledby': { enabled: true },\n    'aria-required-attr': { enabled: true },\n    'aria-required-children': { enabled: true },\n    'aria-required-parent': { enabled: true },\n    'aria-roles': { enabled: true },\n    'aria-valid-attr': { enabled: true },\n    'aria-valid-attr-value': { enabled: true },\n    \n    // Form accessibility\n    'form-field-multiple-labels': { enabled: true },\n    'label': { enabled: true },\n    'label-content-name-mismatch': { enabled: true },\n    'label-title-only': { enabled: true },\n    \n    // Image accessibility\n    'image-alt': { enabled: true },\n    'image-redundant-alt': { enabled: true },\n    \n    // Link accessibility\n    'link-name': { enabled: true },\n    'link-in-text-block': { enabled: true },\n    \n    // Button accessibility\n    'button-name': { enabled: true },\n    \n    // Table accessibility\n    'table-duplicate-name': { enabled: true },\n    'table-fake-caption': { enabled: true },\n    'td-headers-attr': { enabled: true },\n    'th-has-data-cells': { enabled: true },\n    \n    // Landmark and structure\n    'landmark-one-main': { enabled: true },\n    'landmark-complementary-is-top-level': { enabled: true },\n    'landmark-contentinfo-is-top-level': { enabled: true },\n    'landmark-main-is-top-level': { enabled: true },\n    'landmark-no-duplicate-banner': { enabled: true },\n    'landmark-no-duplicate-contentinfo': { enabled: true },\n    'landmark-no-duplicate-main': { enabled: true },\n    'page-has-heading-one': { enabled: true },\n    'region': { enabled: true },\n    \n    // Document structure\n    'document-title': { enabled: true },\n    'html-has-lang': { enabled: true },\n    'html-lang-valid': { enabled: true },\n    'html-xml-lang-mismatch': { enabled: true },\n    \n    // Focus management\n    'focus-order-semantics': { enabled: true },\n    'focusable-content': { enabled: true },\n    'no-focusable-content': { enabled: true },\n    \n    // Skip navigation\n    'skip-link': { enabled: true },\n  },\n  tags: ['wcag2a', 'wcag2aa', 'wcag21aa', 'section508']\n}\n\n/**\n * Test a component for accessibility violations\n */\nexport async function testAccessibility(\n  component: ReactElement,\n  options: {\n    config?: any;\n    renderOptions?: any;\n    skipRules?: string[];\n  } = {}\n): Promise<AxeResults> {\n  const { config = wcagConfig, renderOptions = {}, skipRules = [] } = options\n  \n  const { container } = render(component, renderOptions)\n  \n  // Apply rule exclusions\n  const finalConfig = { ...config }\n  if (skipRules.length > 0) {\n    finalConfig.rules = { ...config.rules }\n    skipRules.forEach(rule => {\n      if (finalConfig.rules[rule]) {\n        finalConfig.rules[rule] = { enabled: false }\n      }\n    })\n  }\n  \n  const results = await axe(container, finalConfig)\n  return results\n}\n\n/**\n * Assert that a component has no accessibility violations\n */\nexport async function expectNoAccessibilityViolations(\n  component: ReactElement,\n  options: {\n    config?: any;\n    renderOptions?: any;\n    skipRules?: string[];\n  } = {}\n): Promise<void> {\n  const results = await testAccessibility(component, options)\n  expect(results).toHaveNoViolations()\n}\n\n/**\n * Test keyboard navigation for a component\n */\nexport async function testKeyboardNavigation(\n  component: ReactElement,\n  testScenarios: {\n    description: string;\n    keys: string[];\n    expectedFocus?: string;\n    expectedAction?: () => void;\n  }[]\n): Promise<void> {\n  const { render, screen } = await import('@testing-library/react')\n  const userEvent = (await import('@testing-library/user-event')).default\n  \n  render(component)\n  const user = userEvent.setup()\n  \n  for (const scenario of testScenarios) {\n    for (const key of scenario.keys) {\n      await user.keyboard(key)\n    }\n    \n    if (scenario.expectedFocus) {\n      const focusedElement = screen.getByRole(scenario.expectedFocus)\n      expect(focusedElement).toHaveFocus()\n    }\n    \n    if (scenario.expectedAction) {\n      scenario.expectedAction()\n    }\n  }\n}\n\n/**\n * Test screen reader compatibility\n */\nexport async function testScreenReaderCompatibility(\n  component: ReactElement\n): Promise<{\n  landmarks: string[];\n  headings: string[];\n  labels: string[];\n  descriptions: string[];\n}> {\n  const { render, screen } = await import('@testing-library/react')\n  \n  render(component)\n  \n  // Find all landmarks\n  const landmarks = screen.queryAllByRole('region')\n    .concat(screen.queryAllByRole('main'))\n    .concat(screen.queryAllByRole('navigation'))\n    .concat(screen.queryAllByRole('banner'))\n    .concat(screen.queryAllByRole('contentinfo'))\n    .concat(screen.queryAllByRole('complementary'))\n    .map(el => el.getAttribute('aria-label') || el.textContent?.slice(0, 50) || 'Unlabeled landmark')\n  \n  // Find all headings\n  const headings = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6']\n    .flatMap(tag => Array.from(document.querySelectorAll(tag)))\n    .map(el => el.textContent || 'Empty heading')\n  \n  // Find all form labels\n  const labels = Array.from(document.querySelectorAll('label'))\n    .map(el => el.textContent || 'Empty label')\n  \n  // Find all descriptions (aria-describedby)\n  const descriptions = Array.from(document.querySelectorAll('[aria-describedby]'))\n    .map(el => {\n      const describedBy = el.getAttribute('aria-describedby')\n      const descElement = document.getElementById(describedBy || '')\n      return descElement?.textContent || 'Missing description'\n    })\n  \n  return {\n    landmarks,\n    headings,\n    labels,\n    descriptions\n  }\n}\n\n/**\n * Test color contrast compliance\n */\nexport async function testColorContrast(\n  component: ReactElement,\n  options: {\n    skipElements?: string[];\n    minimumRatio?: number;\n  } = {}\n): Promise<AxeResults> {\n  const { skipElements = [], minimumRatio = 4.5 } = options\n  \n  const contrastConfig = {\n    rules: {\n      'color-contrast': { \n        enabled: true,\n        options: {\n          noScroll: true,\n          ignoreUseReady: true,\n          ...(minimumRatio !== 4.5 && { \n            contrastRatio: { normal: { aa: minimumRatio } }\n          })\n        }\n      }\n    },\n    tags: ['wcag2aa'],\n    ...(skipElements.length > 0 && {\n      exclude: skipElements\n    })\n  }\n  \n  return testAccessibility(component, { config: contrastConfig })\n}\n\n/**\n * Test form accessibility\n */\nexport async function testFormAccessibility(\n  component: ReactElement\n): Promise<{\n  violations: AxeResults;\n  formElements: {\n    inputs: number;\n    labels: number;\n    fieldsets: number;\n    legends: number;\n    errors: number;\n    required: number;\n  };\n}> {\n  const { render } = await import('@testing-library/react')\n  \n  const { container } = render(component)\n  \n  // Count form elements\n  const formElements = {\n    inputs: container.querySelectorAll('input, textarea, select').length,\n    labels: container.querySelectorAll('label').length,\n    fieldsets: container.querySelectorAll('fieldset').length,\n    legends: container.querySelectorAll('legend').length,\n    errors: container.querySelectorAll('[aria-invalid=\"true\"], [role=\"alert\"]').length,\n    required: container.querySelectorAll('[required], [aria-required=\"true\"]').length,\n  }\n  \n  // Test form-specific accessibility\n  const formConfig = {\n    rules: {\n      'label': { enabled: true },\n      'label-title-only': { enabled: true },\n      'label-content-name-mismatch': { enabled: true },\n      'form-field-multiple-labels': { enabled: true },\n      'aria-input-field-name': { enabled: true },\n      'aria-required-attr': { enabled: true },\n      'aria-required-children': { enabled: true },\n    },\n    tags: ['wcag2a', 'wcag2aa']\n  }\n  \n  const violations = await axe(container, formConfig)\n  \n  return {\n    violations,\n    formElements\n  }\n}\n\n/**\n * Generate accessibility report\n */\nexport function generateAccessibilityReport(\n  results: AxeResults,\n  componentName: string\n): string {\n  const { violations, passes, incomplete } = results\n  \n  let report = `\\n=== Accessibility Report for ${componentName} ===\\n`\n  report += `✅ Passed: ${passes.length} rules\\n`\n  report += `❌ Violations: ${violations.length} rules\\n`\n  report += `⚠️  Incomplete: ${incomplete.length} rules\\n\\n`\n  \n  if (violations.length > 0) {\n    report += `VIOLATIONS:\\n`\n    violations.forEach((violation, index) => {\n      report += `${index + 1}. ${violation.id} (${violation.impact})\\n`\n      report += `   ${violation.description}\\n`\n      report += `   Help: ${violation.helpUrl}\\n`\n      report += `   Elements: ${violation.nodes.length}\\n\\n`\n    })\n  }\n  \n  if (incomplete.length > 0) {\n    report += `INCOMPLETE (Manual Review Needed):\\n`\n    incomplete.forEach((item, index) => {\n      report += `${index + 1}. ${item.id}\\n`\n      report += `   ${item.description}\\n`\n      report += `   Elements: ${item.nodes.length}\\n\\n`\n    })\n  }\n  \n  return report\n}\n\n/**\n * Common accessibility test suite for components\n */\nexport function createAccessibilityTestSuite(\n  componentName: string,\n  component: ReactElement,\n  options: {\n    skipRules?: string[];\n    testKeyboard?: boolean;\n    testScreenReader?: boolean;\n    testColorContrast?: boolean;\n    testForms?: boolean;\n  } = {}\n) {\n  const {\n    skipRules = [],\n    testKeyboard = true,\n    testScreenReader = true,\n    testColorContrast = true,\n    testForms = false\n  } = options\n\n  describe(`${componentName} Accessibility`, () => {\n    it('has no WCAG 2.1 AA violations', async () => {\n      await expectNoAccessibilityViolations(component, { skipRules })\n    })\n\n    if (testColorContrast) {\n      it('meets color contrast requirements', async () => {\n        const results = await testColorContrast(component)\n        expect(results).toHaveNoViolations()\n      })\n    }\n\n    if (testScreenReader) {\n      it('provides proper screen reader support', async () => {\n        const srInfo = await testScreenReaderCompatibility(component)\n        \n        // Basic assertions - adjust based on component needs\n        expect(srInfo.headings.length).toBeGreaterThan(0)\n        expect(srInfo.landmarks.length).toBeGreaterThan(0)\n      })\n    }\n\n    if (testForms) {\n      it('has accessible form elements', async () => {\n        const { violations, formElements } = await testFormAccessibility(component)\n        \n        expect(violations).toHaveNoViolations()\n        expect(formElements.inputs).toBeGreaterThan(0)\n        expect(formElements.labels).toBe(formElements.inputs) // All inputs should have labels\n      })\n    }\n  })\n}"],"names":["createAccessibilityTestSuite","expectNoAccessibilityViolations","generateAccessibilityReport","testAccessibility","testColorContrast","testFormAccessibility","testKeyboardNavigation","testScreenReaderCompatibility","wcagConfig","expect","extend","toHaveNoViolations","rules","enabled","tags","component","options","config","renderOptions","skipRules","container","render","finalConfig","length","forEach","rule","results","axe","testScenarios","screen","userEvent","default","user","setup","scenario","key","keys","keyboard","expectedFocus","focusedElement","getByRole","toHaveFocus","expectedAction","landmarks","queryAllByRole","concat","map","el","getAttribute","textContent","slice","headings","flatMap","tag","Array","from","document","querySelectorAll","labels","descriptions","describedBy","descElement","getElementById","skipElements","minimumRatio","contrastConfig","noScroll","ignoreUseReady","contrastRatio","normal","aa","exclude","formElements","inputs","fieldsets","legends","errors","required","formConfig","violations","componentName","passes","incomplete","report","violation","index","id","impact","description","helpUrl","nodes","item","testKeyboard","testScreenReader","testForms","describe","it","srInfo","toBeGreaterThan","toBe"],"mappings":"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"}