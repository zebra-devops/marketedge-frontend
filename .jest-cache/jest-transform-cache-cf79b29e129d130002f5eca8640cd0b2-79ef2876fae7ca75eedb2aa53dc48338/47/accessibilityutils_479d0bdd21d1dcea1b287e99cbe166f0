3bf527b0536d5becaf1f4ad13ebdde40
/**
 * Accessibility testing utilities
 * 
 * Provides utilities for automated accessibility testing across the platform
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createAccessibilityTestSuite: function() {
        return createAccessibilityTestSuite;
    },
    expectNoAccessibilityViolations: function() {
        return expectNoAccessibilityViolations;
    },
    generateAccessibilityReport: function() {
        return generateAccessibilityReport;
    },
    testAccessibility: function() {
        return testAccessibility;
    },
    testColorContrast: function() {
        return testColorContrast;
    },
    testFormAccessibility: function() {
        return testFormAccessibility;
    },
    testKeyboardNavigation: function() {
        return testKeyboardNavigation;
    },
    testScreenReaderCompatibility: function() {
        return testScreenReaderCompatibility;
    },
    wcagConfig: function() {
        return wcagConfig;
    }
});
const _react = require("@testing-library/react");
const _jestaxe = require("jest-axe");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Extend Jest matchers
expect.extend(_jestaxe.toHaveNoViolations);
const wcagConfig = {
    rules: {
        // Color contrast rules
        "color-contrast": {
            enabled: true
        },
        "color-contrast-enhanced": {
            enabled: true
        },
        // Keyboard accessibility
        "keyboard": {
            enabled: true
        },
        "focus-order-semantics": {
            enabled: true
        },
        "tabindex": {
            enabled: true
        },
        // Screen reader compatibility
        "aria-allowed-attr": {
            enabled: true
        },
        "aria-command-name": {
            enabled: true
        },
        "aria-hidden-body": {
            enabled: true
        },
        "aria-hidden-focus": {
            enabled: true
        },
        "aria-input-field-name": {
            enabled: true
        },
        "aria-label": {
            enabled: true
        },
        "aria-labelledby": {
            enabled: true
        },
        "aria-required-attr": {
            enabled: true
        },
        "aria-required-children": {
            enabled: true
        },
        "aria-required-parent": {
            enabled: true
        },
        "aria-roles": {
            enabled: true
        },
        "aria-valid-attr": {
            enabled: true
        },
        "aria-valid-attr-value": {
            enabled: true
        },
        // Form accessibility
        "form-field-multiple-labels": {
            enabled: true
        },
        "label": {
            enabled: true
        },
        "label-content-name-mismatch": {
            enabled: true
        },
        "label-title-only": {
            enabled: true
        },
        // Image accessibility
        "image-alt": {
            enabled: true
        },
        "image-redundant-alt": {
            enabled: true
        },
        // Link accessibility
        "link-name": {
            enabled: true
        },
        "link-in-text-block": {
            enabled: true
        },
        // Button accessibility
        "button-name": {
            enabled: true
        },
        // Table accessibility
        "table-duplicate-name": {
            enabled: true
        },
        "table-fake-caption": {
            enabled: true
        },
        "td-headers-attr": {
            enabled: true
        },
        "th-has-data-cells": {
            enabled: true
        },
        // Landmark and structure
        "landmark-one-main": {
            enabled: true
        },
        "landmark-complementary-is-top-level": {
            enabled: true
        },
        "landmark-contentinfo-is-top-level": {
            enabled: true
        },
        "landmark-main-is-top-level": {
            enabled: true
        },
        "landmark-no-duplicate-banner": {
            enabled: true
        },
        "landmark-no-duplicate-contentinfo": {
            enabled: true
        },
        "landmark-no-duplicate-main": {
            enabled: true
        },
        "page-has-heading-one": {
            enabled: true
        },
        "region": {
            enabled: true
        },
        // Document structure
        "document-title": {
            enabled: true
        },
        "html-has-lang": {
            enabled: true
        },
        "html-lang-valid": {
            enabled: true
        },
        "html-xml-lang-mismatch": {
            enabled: true
        },
        // Focus management
        "focus-order-semantics": {
            enabled: true
        },
        "focusable-content": {
            enabled: true
        },
        "no-focusable-content": {
            enabled: true
        },
        // Skip navigation
        "skip-link": {
            enabled: true
        }
    },
    tags: [
        "wcag2a",
        "wcag2aa",
        "wcag21aa",
        "section508"
    ]
};
async function testAccessibility(component, options = {}) {
    const { config = wcagConfig, renderOptions = {}, skipRules = [] } = options;
    const { container } = (0, _react.render)(component, renderOptions);
    // Apply rule exclusions
    const finalConfig = {
        ...config
    };
    if (skipRules.length > 0) {
        finalConfig.rules = {
            ...config.rules
        };
        skipRules.forEach((rule)=>{
            if (finalConfig.rules[rule]) {
                finalConfig.rules[rule] = {
                    enabled: false
                };
            }
        });
    }
    const results = await (0, _jestaxe.axe)(container, finalConfig);
    return results;
}
async function expectNoAccessibilityViolations(component, options = {}) {
    const results = await testAccessibility(component, options);
    expect(results).toHaveNoViolations();
}
async function testKeyboardNavigation(component, testScenarios) {
    const { render, screen } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("@testing-library/react")));
    const userEvent = (await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("@testing-library/user-event")))).default;
    render(component);
    const user = userEvent.setup();
    for (const scenario of testScenarios){
        for (const key of scenario.keys){
            await user.keyboard(key);
        }
        if (scenario.expectedFocus) {
            const focusedElement = screen.getByRole(scenario.expectedFocus);
            expect(focusedElement).toHaveFocus();
        }
        if (scenario.expectedAction) {
            scenario.expectedAction();
        }
    }
}
async function testScreenReaderCompatibility(component) {
    const { render, screen } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("@testing-library/react")));
    render(component);
    // Find all landmarks
    const landmarks = screen.queryAllByRole("region").concat(screen.queryAllByRole("main")).concat(screen.queryAllByRole("navigation")).concat(screen.queryAllByRole("banner")).concat(screen.queryAllByRole("contentinfo")).concat(screen.queryAllByRole("complementary")).map((el)=>el.getAttribute("aria-label") || el.textContent?.slice(0, 50) || "Unlabeled landmark");
    // Find all headings
    const headings = [
        "h1",
        "h2",
        "h3",
        "h4",
        "h5",
        "h6"
    ].flatMap((tag)=>Array.from(document.querySelectorAll(tag))).map((el)=>el.textContent || "Empty heading");
    // Find all form labels
    const labels = Array.from(document.querySelectorAll("label")).map((el)=>el.textContent || "Empty label");
    // Find all descriptions (aria-describedby)
    const descriptions = Array.from(document.querySelectorAll("[aria-describedby]")).map((el)=>{
        const describedBy = el.getAttribute("aria-describedby");
        const descElement = document.getElementById(describedBy || "");
        return descElement?.textContent || "Missing description";
    });
    return {
        landmarks,
        headings,
        labels,
        descriptions
    };
}
async function testColorContrast(component, options = {}) {
    const { skipElements = [], minimumRatio = 4.5 } = options;
    const contrastConfig = {
        rules: {
            "color-contrast": {
                enabled: true,
                options: {
                    noScroll: true,
                    ignoreUseReady: true,
                    ...minimumRatio !== 4.5 && {
                        contrastRatio: {
                            normal: {
                                aa: minimumRatio
                            }
                        }
                    }
                }
            }
        },
        tags: [
            "wcag2aa"
        ],
        ...skipElements.length > 0 && {
            exclude: skipElements
        }
    };
    return testAccessibility(component, {
        config: contrastConfig
    });
}
async function testFormAccessibility(component) {
    const { render } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("@testing-library/react")));
    const { container } = render(component);
    // Count form elements
    const formElements = {
        inputs: container.querySelectorAll("input, textarea, select").length,
        labels: container.querySelectorAll("label").length,
        fieldsets: container.querySelectorAll("fieldset").length,
        legends: container.querySelectorAll("legend").length,
        errors: container.querySelectorAll('[aria-invalid="true"], [role="alert"]').length,
        required: container.querySelectorAll('[required], [aria-required="true"]').length
    };
    // Test form-specific accessibility
    const formConfig = {
        rules: {
            "label": {
                enabled: true
            },
            "label-title-only": {
                enabled: true
            },
            "label-content-name-mismatch": {
                enabled: true
            },
            "form-field-multiple-labels": {
                enabled: true
            },
            "aria-input-field-name": {
                enabled: true
            },
            "aria-required-attr": {
                enabled: true
            },
            "aria-required-children": {
                enabled: true
            }
        },
        tags: [
            "wcag2a",
            "wcag2aa"
        ]
    };
    const violations = await (0, _jestaxe.axe)(container, formConfig);
    return {
        violations,
        formElements
    };
}
function generateAccessibilityReport(results, componentName) {
    const { violations, passes, incomplete } = results;
    let report = `\n=== Accessibility Report for ${componentName} ===\n`;
    report += `✅ Passed: ${passes.length} rules\n`;
    report += `❌ Violations: ${violations.length} rules\n`;
    report += `⚠️  Incomplete: ${incomplete.length} rules\n\n`;
    if (violations.length > 0) {
        report += `VIOLATIONS:\n`;
        violations.forEach((violation, index)=>{
            report += `${index + 1}. ${violation.id} (${violation.impact})\n`;
            report += `   ${violation.description}\n`;
            report += `   Help: ${violation.helpUrl}\n`;
            report += `   Elements: ${violation.nodes.length}\n\n`;
        });
    }
    if (incomplete.length > 0) {
        report += `INCOMPLETE (Manual Review Needed):\n`;
        incomplete.forEach((item, index)=>{
            report += `${index + 1}. ${item.id}\n`;
            report += `   ${item.description}\n`;
            report += `   Elements: ${item.nodes.length}\n\n`;
        });
    }
    return report;
}
function createAccessibilityTestSuite(componentName, component, options = {}) {
    const { skipRules = [], testKeyboard = true, testScreenReader = true, testColorContrast = true, testForms = false } = options;
    describe(`${componentName} Accessibility`, ()=>{
        it("has no WCAG 2.1 AA violations", async ()=>{
            await expectNoAccessibilityViolations(component, {
                skipRules
            });
        });
        if (testColorContrast) {
            it("meets color contrast requirements", async ()=>{
                const results = await testColorContrast(component);
                expect(results).toHaveNoViolations();
            });
        }
        if (testScreenReader) {
            it("provides proper screen reader support", async ()=>{
                const srInfo = await testScreenReaderCompatibility(component);
                // Basic assertions - adjust based on component needs
                expect(srInfo.headings.length).toBeGreaterThan(0);
                expect(srInfo.landmarks.length).toBeGreaterThan(0);
            });
        }
        if (testForms) {
            it("has accessible form elements", async ()=>{
                const { violations, formElements } = await testFormAccessibility(component);
                expect(violations).toHaveNoViolations();
                expect(formElements.inputs).toBeGreaterThan(0);
                expect(formElements.labels).toBe(formElements.inputs) // All inputs should have labels
                ;
            });
        }
    });
}

//# sourceMappingURL=data:application/json;base64,