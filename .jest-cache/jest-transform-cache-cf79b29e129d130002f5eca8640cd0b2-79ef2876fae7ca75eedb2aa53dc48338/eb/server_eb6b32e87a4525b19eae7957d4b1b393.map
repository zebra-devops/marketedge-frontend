{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/test-utils/mocks/server.ts"],"sourcesContent":["/**\n * Mock Service Worker (MSW) Server Setup\n * \n * Provides API mocking for testing multi-tenant scenarios.\n * Handles authentication, tenant-specific data, and rate limiting responses.\n */\n\nimport { setupServer } from 'msw/node'\nimport { http, HttpResponse } from 'msw'\nimport { generateMockApiResponse, mockDataGenerators } from '../index'\n\n// Base API URL for mocking\nconst API_BASE_URL = 'http://localhost:8000/api/v1'\n\n// Mock handlers for different API endpoints\nconst handlers = [\n  // Authentication endpoints\n  http.post(`${API_BASE_URL}/auth/login`, async ({ request }) => {\n    const body = await request.json()\n    const { code, redirect_uri } = body as any\n    \n    // Mock successful login for specific test code\n    if (code === 'valid-auth-code' || code === 'test-auth-code') {\n      return HttpResponse.json({\n        access_token: 'mock-jwt-token',\n        refresh_token: 'mock-refresh-token',\n        token_type: 'bearer',\n        user: {\n          id: 'test-user-456',\n          email: 'test@example.com',\n          first_name: 'Test',\n          last_name: 'User',\n          role: 'analyst',\n          organisation_id: 'test-tenant-123',\n          is_active: true,\n        },\n      }, { status: 200 })\n    }\n    \n    return HttpResponse.json(\n      { detail: 'Invalid authorization code' },\n      { status: 401 }\n    )\n  }),\n\n  // Auth0 URL endpoint\n  http.get(`${API_BASE_URL}/auth/auth0-url`, ({ request }) => {\n    const url = new URL(request.url)\n    const redirectUri = url.searchParams.get('redirect_uri')\n    \n    return HttpResponse.json({\n      auth_url: `https://dev-platform.auth0.com/authorize?response_type=code&client_id=test&redirect_uri=${encodeURIComponent(redirectUri || 'http://localhost:3000/callback')}&scope=openid%20profile%20email`\n    })\n  }),\n\n  // User profile endpoint (Auth0 style)\n  http.get(`${API_BASE_URL}/auth/me`, ({ request }) => {\n    const authHeader = request.headers.get('authorization')\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return HttpResponse.json({ detail: 'Not authenticated' }, { status: 401 })\n    }\n    \n    return HttpResponse.json({\n      id: 'test-user-456',\n      email: 'test@example.com',\n      first_name: 'Test',\n      last_name: 'User',\n      role: 'analyst',\n      organisation_id: 'test-tenant-123',\n      is_active: true,\n    })\n  }),\n\n  http.post(`${API_BASE_URL}/auth/refresh`, () => {\n    return HttpResponse.json({\n      access_token: 'new-mock-jwt-token',\n      token_type: 'bearer',\n      expires_in: 3600,\n    }, { status: 200 })\n  }),\n\n  http.post(`${API_BASE_URL}/auth/logout`, () => {\n    return HttpResponse.json(\n      { message: 'Logged out successfully' },\n      { status: 200 }\n    )\n  }),\n\n  // User profile endpoints\n  http.get(`${API_BASE_URL}/users/me`, ({ request }) => {\n    const authHeader = request.headers.get('authorization')\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return HttpResponse.json({ detail: 'Not authenticated' }, { status: 401 })\n    }\n    \n    return HttpResponse.json({\n      id: 'test-user-456',\n      email: 'test@example.com',\n      name: 'Test User',\n      role: 'user',\n      organization_id: 'test-tenant-123',\n      permissions: ['read:data', 'write:data'],\n      is_active: true,\n      created_at: '2024-01-01T00:00:00Z',\n      updated_at: '2024-01-01T00:00:00Z',\n    })\n  }),\n\n  // Organization endpoints\n  http.get(`${API_BASE_URL}/organizations/me`, () => {\n    return HttpResponse.json({\n      id: 'test-tenant-123',\n      name: 'Test Organization',\n      industry: 'b2b',\n      subscription: 'premium',\n      features: ['market-edge', 'analytics', 'reporting'],\n      limits: {\n        users: 100,\n        api_calls: 10000,\n        storage: 1000,\n      },\n      settings: {\n        timezone: 'UTC',\n        currency: 'USD',\n        date_format: 'YYYY-MM-DD',\n      },\n    })\n  }),\n\n  // Market Edge API endpoints\n  http.get(`${API_BASE_URL}/market-edge/competitors`, ({ request }) => {\n    const url = new URL(request.url)\n    const industry = url.searchParams.get('industry') || 'b2b'\n    \n    // Simulate different data based on industry\n    let mockData\n    switch (industry) {\n      case 'cinema':\n        mockData = generateMockApiResponse('cinema', 'venue', 3)\n        break\n      case 'hotel':\n        mockData = generateMockApiResponse('hotel', 'property', 3)\n        break\n      case 'gym':\n        mockData = generateMockApiResponse('gym', 'facility', 3)\n        break\n      case 'retail':\n        mockData = generateMockApiResponse('retail', 'store', 3)\n        break\n      default:\n        mockData = generateMockApiResponse('b2b', 'client', 3)\n    }\n\n    return HttpResponse.json({\n      data: mockData,\n      meta: {\n        total: mockData.length,\n        page: 1,\n        per_page: 10,\n        industry,\n      },\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/market-edge/analytics`, ({ request }) => {\n    const url = new URL(request.url)\n    const timeframe = url.searchParams.get('timeframe') || '7d'\n    \n    return HttpResponse.json({\n      metrics: {\n        revenue: 125000,\n        growth: 12.5,\n        market_share: 15.2,\n        competitor_count: 8,\n      },\n      trends: {\n        daily_revenue: [\n          { date: '2024-01-08', value: 18000 },\n          { date: '2024-01-09', value: 19200 },\n          { date: '2024-01-10', value: 17800 },\n          { date: '2024-01-11', value: 20100 },\n          { date: '2024-01-12', value: 21500 },\n          { date: '2024-01-13', value: 19800 },\n          { date: '2024-01-14', value: 22000 },\n        ],\n      },\n      timeframe,\n    })\n  }),\n\n  // Feature flags endpoints\n  http.get(`${API_BASE_URL}/features`, () => {\n    return HttpResponse.json({\n      flags: {\n        'market-edge': { enabled: true, rollout: 100 },\n        'advanced-analytics': { enabled: true, rollout: 75 },\n        'real-time-data': { enabled: false, rollout: 25 },\n        'mobile-app': { enabled: true, rollout: 100 },\n      },\n    })\n  }),\n\n  // Admin endpoints (require admin role)\n  http.get(`${API_BASE_URL}/admin/users`, ({ request }) => {\n    const authHeader = request.headers.get('authorization')\n    \n    // Simulate role-based access control\n    if (!authHeader || authHeader === 'Bearer non-admin-token') {\n      return HttpResponse.json({ detail: 'Insufficient permissions' }, { status: 403 })\n    }\n    \n    return HttpResponse.json({\n      users: [\n        {\n          id: 'user-1',\n          email: 'admin@example.com',\n          name: 'Admin User',\n          role: 'admin',\n          is_active: true,\n        },\n        {\n          id: 'user-2',\n          email: 'manager@example.com',\n          name: 'Manager User',\n          role: 'manager',\n          is_active: true,\n        },\n        {\n          id: 'user-3',\n          email: 'user@example.com',\n          name: 'Regular User',\n          role: 'user',\n          is_active: true,\n        },\n      ],\n      meta: { total: 3, page: 1, per_page: 10 },\n    })\n  }),\n\n  // Rate limiting simulation\n  http.get(`${API_BASE_URL}/test/rate-limit`, () => {\n    // Simulate rate limit headers\n    return HttpResponse.json(\n      { message: 'Rate limit test successful' },\n      {\n        headers: {\n          'X-RateLimit-Limit': '100',\n          'X-RateLimit-Remaining': '95',\n          'X-RateLimit-Reset': String(Date.now() + 3600000),\n        }\n      }\n    )\n  }),\n\n  http.get(`${API_BASE_URL}/test/rate-limit-exceeded`, () => {\n    return HttpResponse.json(\n      {\n        error: 'Rate limit exceeded',\n        message: 'Too many requests. Limit: 100 per window',\n        retry_after: 60,\n      },\n      {\n        status: 429,\n        headers: {\n          'X-RateLimit-Limit': '100',\n          'X-RateLimit-Remaining': '0',\n          'X-RateLimit-Reset': String(Date.now() + 3600000),\n          'Retry-After': '60',\n        }\n      }\n    )\n  }),\n\n  // Error simulation endpoints for testing error handling\n  http.get(`${API_BASE_URL}/test/server-error`, () => {\n    return HttpResponse.json({ detail: 'Internal server error' }, { status: 500 })\n  }),\n\n  http.get(`${API_BASE_URL}/test/network-error`, () => {\n    return HttpResponse.error()\n  }),\n\n  http.get(`${API_BASE_URL}/test/timeout`, async () => {\n    // Simulate a slow response\n    await new Promise(resolve => setTimeout(resolve, 10000)) // 10 second delay\n    return HttpResponse.json({ message: 'Slow response' })\n  }),\n\n  // Fallback handler for unmatched requests\n  http.get('*', ({ request }) => {\n    console.warn(`Unhandled GET request to ${request.url}`)\n    return HttpResponse.json(\n      { detail: `Endpoint not found: ${new URL(request.url).pathname}` },\n      { status: 404 }\n    )\n  }),\n\n  http.post('*', ({ request }) => {\n    console.warn(`Unhandled POST request to ${request.url}`)\n    return HttpResponse.json(\n      { detail: `Endpoint not found: ${new URL(request.url).pathname}` },\n      { status: 404 }\n    )\n  }),\n]\n\n// Create and export the server\nexport const server = setupServer(...handlers)\n\n// Helper functions for test-specific mocking\nexport const mockApiEndpoint = {\n  // Mock successful responses\n  success: (endpoint: string, data: any, status = 200) => {\n    server.use(\n      http.get(`${API_BASE_URL}${endpoint}`, () => {\n        return HttpResponse.json(data, { status })\n      })\n    )\n  },\n\n  // Mock error responses\n  error: (endpoint: string, status = 500, message = 'Server error') => {\n    server.use(\n      http.get(`${API_BASE_URL}${endpoint}`, () => {\n        return HttpResponse.json({ detail: message }, { status })\n      })\n    )\n  },\n\n  // Mock rate limit responses\n  rateLimited: (endpoint: string) => {\n    server.use(\n      http.get(`${API_BASE_URL}${endpoint}`, () => {\n        return HttpResponse.json(\n          {\n            error: 'Rate limit exceeded',\n            message: 'Too many requests',\n            retry_after: 60,\n          },\n          {\n            status: 429,\n            headers: {\n              'X-RateLimit-Limit': '100',\n              'X-RateLimit-Remaining': '0',\n              'Retry-After': '60',\n            }\n          }\n        )\n      })\n    )\n  },\n\n  // Mock network errors\n  networkError: (endpoint: string) => {\n    server.use(\n      http.get(`${API_BASE_URL}${endpoint}`, () => {\n        return HttpResponse.error()\n      })\n    )\n  },\n\n  // Mock slow responses\n  slow: (endpoint: string, delay = 5000) => {\n    server.use(\n      http.get(`${API_BASE_URL}${endpoint}`, async () => {\n        await new Promise(resolve => setTimeout(resolve, delay))\n        return HttpResponse.json({ message: 'Delayed response' })\n      })\n    )\n  },\n}\n\n// Industry-specific mock helpers\nexport const mockIndustryData = {\n  cinema: (endpoint: string) => {\n    server.use(\n      http.get(`${API_BASE_URL}${endpoint}`, () => {\n        return HttpResponse.json({\n          venues: generateMockApiResponse('cinema', 'venue', 5),\n          movies: generateMockApiResponse('cinema', 'movie', 10),\n          bookings: generateMockApiResponse('cinema', 'booking', 20),\n        })\n      })\n    )\n  },\n\n  hotel: (endpoint: string) => {\n    server.use(\n      http.get(`${API_BASE_URL}${endpoint}`, () => {\n        return HttpResponse.json({\n          properties: generateMockApiResponse('hotel', 'property', 3),\n          rooms: generateMockApiResponse('hotel', 'room', 50),\n          reservations: generateMockApiResponse('hotel', 'reservation', 30),\n        })\n      })\n    )\n  },\n\n  gym: (endpoint: string) => {\n    server.use(\n      http.get(`${API_BASE_URL}${endpoint}`, () => {\n        return HttpResponse.json({\n          facilities: generateMockApiResponse('gym', 'facility', 2),\n          members: generateMockApiResponse('gym', 'member', 100),\n          checkins: generateMockApiResponse('gym', 'checkin', 200),\n        })\n      })\n    )\n  },\n\n  retail: (endpoint: string) => {\n    server.use(\n      http.get(`${API_BASE_URL}${endpoint}`, () => {\n        return HttpResponse.json({\n          stores: generateMockApiResponse('retail', 'store', 5),\n          products: generateMockApiResponse('retail', 'product', 500),\n          sales: generateMockApiResponse('retail', 'sale', 1000),\n        })\n      })\n    )\n  },\n\n  b2b: (endpoint: string) => {\n    server.use(\n      http.get(`${API_BASE_URL}${endpoint}`, () => {\n        return HttpResponse.json({\n          clients: generateMockApiResponse('b2b', 'client', 25),\n          projects: generateMockApiResponse('b2b', 'project', 50),\n          reports: generateMockApiResponse('b2b', 'report', 100),\n        })\n      })\n    )\n  },\n}"],"names":["mockApiEndpoint","mockIndustryData","server","API_BASE_URL","handlers","http","post","request","body","json","code","redirect_uri","HttpResponse","access_token","refresh_token","token_type","user","id","email","first_name","last_name","role","organisation_id","is_active","status","detail","get","url","URL","redirectUri","searchParams","auth_url","encodeURIComponent","authHeader","headers","startsWith","expires_in","message","name","organization_id","permissions","created_at","updated_at","industry","subscription","features","limits","users","api_calls","storage","settings","timezone","currency","date_format","mockData","generateMockApiResponse","data","meta","total","length","page","per_page","timeframe","metrics","revenue","growth","market_share","competitor_count","trends","daily_revenue","date","value","flags","enabled","rollout","String","Date","now","error","retry_after","Promise","resolve","setTimeout","console","warn","pathname","setupServer","success","endpoint","use","rateLimited","networkError","slow","delay","cinema","venues","movies","bookings","hotel","properties","rooms","reservations","gym","facilities","members","checkins","retail","stores","products","sales","b2b","clients","projects","reports"],"mappings":"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"}