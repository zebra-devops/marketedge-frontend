c4e0e44daf54bd15cba48e5a56b99dbd
/**
 * Mock Service Worker (MSW) Server Setup
 * 
 * Provides API mocking for testing multi-tenant scenarios.
 * Handles authentication, tenant-specific data, and rate limiting responses.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    mockApiEndpoint: function() {
        return mockApiEndpoint;
    },
    mockIndustryData: function() {
        return mockIndustryData;
    },
    server: function() {
        return server;
    }
});
const _node = require("msw/node");
const _msw = require("msw");
const _index = require("../index");
// Base API URL for mocking
const API_BASE_URL = "http://localhost:8000/api/v1";
// Mock handlers for different API endpoints
const handlers = [
    // Authentication endpoints
    _msw.http.post(`${API_BASE_URL}/auth/login`, async ({ request })=>{
        const body = await request.json();
        const { code, redirect_uri } = body;
        // Mock successful login for specific test code
        if (code === "valid-auth-code" || code === "test-auth-code") {
            return _msw.HttpResponse.json({
                access_token: "mock-jwt-token",
                refresh_token: "mock-refresh-token",
                token_type: "bearer",
                user: {
                    id: "test-user-456",
                    email: "test@example.com",
                    first_name: "Test",
                    last_name: "User",
                    role: "analyst",
                    organisation_id: "test-tenant-123",
                    is_active: true
                }
            }, {
                status: 200
            });
        }
        return _msw.HttpResponse.json({
            detail: "Invalid authorization code"
        }, {
            status: 401
        });
    }),
    // Auth0 URL endpoint
    _msw.http.get(`${API_BASE_URL}/auth/auth0-url`, ({ request })=>{
        const url = new URL(request.url);
        const redirectUri = url.searchParams.get("redirect_uri");
        return _msw.HttpResponse.json({
            auth_url: `https://dev-platform.auth0.com/authorize?response_type=code&client_id=test&redirect_uri=${encodeURIComponent(redirectUri || "http://localhost:3000/callback")}&scope=openid%20profile%20email`
        });
    }),
    // User profile endpoint (Auth0 style)
    _msw.http.get(`${API_BASE_URL}/auth/me`, ({ request })=>{
        const authHeader = request.headers.get("authorization");
        if (!authHeader || !authHeader.startsWith("Bearer ")) {
            return _msw.HttpResponse.json({
                detail: "Not authenticated"
            }, {
                status: 401
            });
        }
        return _msw.HttpResponse.json({
            id: "test-user-456",
            email: "test@example.com",
            first_name: "Test",
            last_name: "User",
            role: "analyst",
            organisation_id: "test-tenant-123",
            is_active: true
        });
    }),
    _msw.http.post(`${API_BASE_URL}/auth/refresh`, ()=>{
        return _msw.HttpResponse.json({
            access_token: "new-mock-jwt-token",
            token_type: "bearer",
            expires_in: 3600
        }, {
            status: 200
        });
    }),
    _msw.http.post(`${API_BASE_URL}/auth/logout`, ()=>{
        return _msw.HttpResponse.json({
            message: "Logged out successfully"
        }, {
            status: 200
        });
    }),
    // User profile endpoints
    _msw.http.get(`${API_BASE_URL}/users/me`, ({ request })=>{
        const authHeader = request.headers.get("authorization");
        if (!authHeader || !authHeader.startsWith("Bearer ")) {
            return _msw.HttpResponse.json({
                detail: "Not authenticated"
            }, {
                status: 401
            });
        }
        return _msw.HttpResponse.json({
            id: "test-user-456",
            email: "test@example.com",
            name: "Test User",
            role: "user",
            organization_id: "test-tenant-123",
            permissions: [
                "read:data",
                "write:data"
            ],
            is_active: true,
            created_at: "2024-01-01T00:00:00Z",
            updated_at: "2024-01-01T00:00:00Z"
        });
    }),
    // Organization endpoints
    _msw.http.get(`${API_BASE_URL}/organizations/me`, ()=>{
        return _msw.HttpResponse.json({
            id: "test-tenant-123",
            name: "Test Organization",
            industry: "b2b",
            subscription: "premium",
            features: [
                "market-edge",
                "analytics",
                "reporting"
            ],
            limits: {
                users: 100,
                api_calls: 10000,
                storage: 1000
            },
            settings: {
                timezone: "UTC",
                currency: "USD",
                date_format: "YYYY-MM-DD"
            }
        });
    }),
    // Market Edge API endpoints
    _msw.http.get(`${API_BASE_URL}/market-edge/competitors`, ({ request })=>{
        const url = new URL(request.url);
        const industry = url.searchParams.get("industry") || "b2b";
        // Simulate different data based on industry
        let mockData;
        switch(industry){
            case "cinema":
                mockData = (0, _index.generateMockApiResponse)("cinema", "venue", 3);
                break;
            case "hotel":
                mockData = (0, _index.generateMockApiResponse)("hotel", "property", 3);
                break;
            case "gym":
                mockData = (0, _index.generateMockApiResponse)("gym", "facility", 3);
                break;
            case "retail":
                mockData = (0, _index.generateMockApiResponse)("retail", "store", 3);
                break;
            default:
                mockData = (0, _index.generateMockApiResponse)("b2b", "client", 3);
        }
        return _msw.HttpResponse.json({
            data: mockData,
            meta: {
                total: mockData.length,
                page: 1,
                per_page: 10,
                industry
            }
        });
    }),
    _msw.http.get(`${API_BASE_URL}/market-edge/analytics`, ({ request })=>{
        const url = new URL(request.url);
        const timeframe = url.searchParams.get("timeframe") || "7d";
        return _msw.HttpResponse.json({
            metrics: {
                revenue: 125000,
                growth: 12.5,
                market_share: 15.2,
                competitor_count: 8
            },
            trends: {
                daily_revenue: [
                    {
                        date: "2024-01-08",
                        value: 18000
                    },
                    {
                        date: "2024-01-09",
                        value: 19200
                    },
                    {
                        date: "2024-01-10",
                        value: 17800
                    },
                    {
                        date: "2024-01-11",
                        value: 20100
                    },
                    {
                        date: "2024-01-12",
                        value: 21500
                    },
                    {
                        date: "2024-01-13",
                        value: 19800
                    },
                    {
                        date: "2024-01-14",
                        value: 22000
                    }
                ]
            },
            timeframe
        });
    }),
    // Feature flags endpoints
    _msw.http.get(`${API_BASE_URL}/features`, ()=>{
        return _msw.HttpResponse.json({
            flags: {
                "market-edge": {
                    enabled: true,
                    rollout: 100
                },
                "advanced-analytics": {
                    enabled: true,
                    rollout: 75
                },
                "real-time-data": {
                    enabled: false,
                    rollout: 25
                },
                "mobile-app": {
                    enabled: true,
                    rollout: 100
                }
            }
        });
    }),
    // Admin endpoints (require admin role)
    _msw.http.get(`${API_BASE_URL}/admin/users`, ({ request })=>{
        const authHeader = request.headers.get("authorization");
        // Simulate role-based access control
        if (!authHeader || authHeader === "Bearer non-admin-token") {
            return _msw.HttpResponse.json({
                detail: "Insufficient permissions"
            }, {
                status: 403
            });
        }
        return _msw.HttpResponse.json({
            users: [
                {
                    id: "user-1",
                    email: "admin@example.com",
                    name: "Admin User",
                    role: "admin",
                    is_active: true
                },
                {
                    id: "user-2",
                    email: "manager@example.com",
                    name: "Manager User",
                    role: "manager",
                    is_active: true
                },
                {
                    id: "user-3",
                    email: "user@example.com",
                    name: "Regular User",
                    role: "user",
                    is_active: true
                }
            ],
            meta: {
                total: 3,
                page: 1,
                per_page: 10
            }
        });
    }),
    // Rate limiting simulation
    _msw.http.get(`${API_BASE_URL}/test/rate-limit`, ()=>{
        // Simulate rate limit headers
        return _msw.HttpResponse.json({
            message: "Rate limit test successful"
        }, {
            headers: {
                "X-RateLimit-Limit": "100",
                "X-RateLimit-Remaining": "95",
                "X-RateLimit-Reset": String(Date.now() + 3600000)
            }
        });
    }),
    _msw.http.get(`${API_BASE_URL}/test/rate-limit-exceeded`, ()=>{
        return _msw.HttpResponse.json({
            error: "Rate limit exceeded",
            message: "Too many requests. Limit: 100 per window",
            retry_after: 60
        }, {
            status: 429,
            headers: {
                "X-RateLimit-Limit": "100",
                "X-RateLimit-Remaining": "0",
                "X-RateLimit-Reset": String(Date.now() + 3600000),
                "Retry-After": "60"
            }
        });
    }),
    // Error simulation endpoints for testing error handling
    _msw.http.get(`${API_BASE_URL}/test/server-error`, ()=>{
        return _msw.HttpResponse.json({
            detail: "Internal server error"
        }, {
            status: 500
        });
    }),
    _msw.http.get(`${API_BASE_URL}/test/network-error`, ()=>{
        return _msw.HttpResponse.error();
    }),
    _msw.http.get(`${API_BASE_URL}/test/timeout`, async ()=>{
        // Simulate a slow response
        await new Promise((resolve)=>setTimeout(resolve, 10000)) // 10 second delay
        ;
        return _msw.HttpResponse.json({
            message: "Slow response"
        });
    }),
    // Fallback handler for unmatched requests
    _msw.http.get("*", ({ request })=>{
        console.warn(`Unhandled GET request to ${request.url}`);
        return _msw.HttpResponse.json({
            detail: `Endpoint not found: ${new URL(request.url).pathname}`
        }, {
            status: 404
        });
    }),
    _msw.http.post("*", ({ request })=>{
        console.warn(`Unhandled POST request to ${request.url}`);
        return _msw.HttpResponse.json({
            detail: `Endpoint not found: ${new URL(request.url).pathname}`
        }, {
            status: 404
        });
    })
];
const server = (0, _node.setupServer)(...handlers);
const mockApiEndpoint = {
    // Mock successful responses
    success: (endpoint, data, status = 200)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json(data, {
                status
            });
        }));
    },
    // Mock error responses
    error: (endpoint, status = 500, message = "Server error")=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json({
                detail: message
            }, {
                status
            });
        }));
    },
    // Mock rate limit responses
    rateLimited: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json({
                error: "Rate limit exceeded",
                message: "Too many requests",
                retry_after: 60
            }, {
                status: 429,
                headers: {
                    "X-RateLimit-Limit": "100",
                    "X-RateLimit-Remaining": "0",
                    "Retry-After": "60"
                }
            });
        }));
    },
    // Mock network errors
    networkError: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.error();
        }));
    },
    // Mock slow responses
    slow: (endpoint, delay = 5000)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, async ()=>{
            await new Promise((resolve)=>setTimeout(resolve, delay));
            return _msw.HttpResponse.json({
                message: "Delayed response"
            });
        }));
    }
};
const mockIndustryData = {
    cinema: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json({
                venues: (0, _index.generateMockApiResponse)("cinema", "venue", 5),
                movies: (0, _index.generateMockApiResponse)("cinema", "movie", 10),
                bookings: (0, _index.generateMockApiResponse)("cinema", "booking", 20)
            });
        }));
    },
    hotel: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json({
                properties: (0, _index.generateMockApiResponse)("hotel", "property", 3),
                rooms: (0, _index.generateMockApiResponse)("hotel", "room", 50),
                reservations: (0, _index.generateMockApiResponse)("hotel", "reservation", 30)
            });
        }));
    },
    gym: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json({
                facilities: (0, _index.generateMockApiResponse)("gym", "facility", 2),
                members: (0, _index.generateMockApiResponse)("gym", "member", 100),
                checkins: (0, _index.generateMockApiResponse)("gym", "checkin", 200)
            });
        }));
    },
    retail: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json({
                stores: (0, _index.generateMockApiResponse)("retail", "store", 5),
                products: (0, _index.generateMockApiResponse)("retail", "product", 500),
                sales: (0, _index.generateMockApiResponse)("retail", "sale", 1000)
            });
        }));
    },
    b2b: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, ()=>{
            return _msw.HttpResponse.json({
                clients: (0, _index.generateMockApiResponse)("b2b", "client", 25),
                projects: (0, _index.generateMockApiResponse)("b2b", "project", 50),
                reports: (0, _index.generateMockApiResponse)("b2b", "report", 100)
            });
        }));
    }
};

//# sourceMappingURL=data:application/json;base64,