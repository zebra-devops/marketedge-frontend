{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/hooks/__tests__/useAuth.test.tsx"],"sourcesContent":["import React from 'react'\nimport { renderHook, act, waitFor } from '@testing-library/react'\nimport { useAuth, useAuthContext, AuthContext } from '../useAuth'\nimport { authService } from '@/services/auth'\n\n// Mock auth service\njest.mock('@/services/auth', () => ({\n  authService: {\n    isAuthenticated: jest.fn(),\n    getCurrentUser: jest.fn(),\n    login: jest.fn(),\n    logout: jest.fn(),\n    getUserPermissions: jest.fn().mockReturnValue([]),\n    hasPermission: jest.fn(),\n    hasAnyPermission: jest.fn(),\n    getUserRole: jest.fn(),\n    checkSession: jest.fn(),\n    extendSession: jest.fn(),\n    initializeAutoRefresh: jest.fn(),\n    initializeActivityTracking: jest.fn(),\n  },\n}))\n\nconst mockAuthService = authService as jest.Mocked<typeof authService>\n\ndescribe('useAuth Hook', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    // Reset console.error mock\n    jest.spyOn(console, 'error').mockImplementation(() => {})\n  })\n\n  afterEach(() => {\n    jest.restoreAllMocks()\n  })\n\n  it('initializes with loading state', () => {\n    mockAuthService.isAuthenticated.mockReturnValue(false)\n    \n    const { result } = renderHook(() => useAuth())\n    \n    expect(result.current.user).toBeNull()\n    expect(result.current.isLoading).toBe(true)\n    expect(result.current.isAuthenticated).toBe(false)\n  })\n\n  it('loads authenticated user on initialization', async () => {\n    const mockUser = {\n      id: '1',\n      email: 'test@example.com',\n      name: 'Test User',\n      role: 'user',\n      organisation_id: 'org-1',\n      is_active: true,\n      created_at: '2023-01-01T00:00:00Z',\n      updated_at: '2023-01-01T00:00:00Z',\n    }\n\n    mockAuthService.isAuthenticated.mockReturnValue(true)\n    mockAuthService.getCurrentUser.mockResolvedValue(mockUser)\n    \n    const { result } = renderHook(() => useAuth())\n    \n    await waitFor(() => {\n      expect(result.current.isLoading).toBe(false)\n    })\n    \n    expect(result.current.user).toEqual(mockUser)\n    expect(result.current.isAuthenticated).toBe(true)\n    expect(mockAuthService.getCurrentUser).toHaveBeenCalledTimes(1)\n  })\n\n  it('handles initialization failure', async () => {\n    mockAuthService.isAuthenticated.mockReturnValue(true)\n    mockAuthService.getCurrentUser.mockRejectedValue(new Error('API Error'))\n    \n    const { result } = renderHook(() => useAuth())\n    \n    await waitFor(() => {\n      expect(result.current.isLoading).toBe(false)\n    })\n    \n    expect(result.current.user).toBeNull()\n    expect(result.current.isAuthenticated).toBe(false)\n    expect(mockAuthService.logout).toHaveBeenCalledTimes(1)\n    expect(console.error).toHaveBeenCalledWith('Auth initialization failed:', expect.any(Error))\n  })\n\n  it('handles login successfully', async () => {\n    const mockUser = {\n      id: '1',\n      email: 'test@example.com',\n      name: 'Test User',\n      role: 'user',\n      organisation_id: 'org-1',\n      is_active: true,\n      created_at: '2023-01-01T00:00:00Z',\n      updated_at: '2023-01-01T00:00:00Z',\n    }\n\n    mockAuthService.isAuthenticated.mockReturnValue(false)\n    mockAuthService.login.mockResolvedValue({ user: mockUser })\n    \n    const { result } = renderHook(() => useAuth())\n    \n    await waitFor(() => {\n      expect(result.current.isLoading).toBe(false)\n    })\n    \n    await act(async () => {\n      await result.current.login({\n        code: 'auth-code', \n        redirect_uri: 'http://localhost:3000/callback'\n      })\n    })\n    \n    expect(result.current.user).toEqual(mockUser)\n    expect(result.current.isAuthenticated).toBe(true)\n    expect(mockAuthService.login).toHaveBeenCalledWith({\n      code: 'auth-code',\n      redirect_uri: 'http://localhost:3000/callback'\n    })\n  })\n\n  it('handles login failure', async () => {\n    const loginError = new Error('Login failed')\n    mockAuthService.isAuthenticated.mockReturnValue(false)\n    mockAuthService.login.mockRejectedValue(loginError)\n    \n    const { result } = renderHook(() => useAuth())\n    \n    await waitFor(() => {\n      expect(result.current.isLoading).toBe(false)\n    })\n    \n    await expect(\n      act(async () => {\n        await result.current.login({\n          code: 'invalid-code', \n          redirect_uri: 'http://localhost:3000/callback'\n        })\n      })\n    ).rejects.toThrow('Login failed')\n    \n    expect(result.current.user).toBeNull()\n    expect(result.current.isAuthenticated).toBe(false)\n    expect(console.error).toHaveBeenCalledWith('Login failed:', loginError)\n  })\n\n  it('handles logout', async () => {\n    const mockUser = {\n      id: '1',\n      email: 'test@example.com',\n      name: 'Test User',\n      role: 'user',\n      organisation_id: 'org-1',\n      is_active: true,\n      created_at: '2023-01-01T00:00:00Z',\n      updated_at: '2023-01-01T00:00:00Z',\n    }\n\n    mockAuthService.isAuthenticated.mockReturnValue(true)\n    mockAuthService.getCurrentUser.mockResolvedValue(mockUser)\n    \n    const { result } = renderHook(() => useAuth())\n    \n    await waitFor(() => {\n      expect(result.current.user).toEqual(mockUser)\n    })\n    \n    act(() => {\n      result.current.logout()\n    })\n    \n    expect(result.current.user).toBeNull()\n    expect(result.current.isAuthenticated).toBe(false)\n    expect(mockAuthService.logout).toHaveBeenCalledTimes(1)\n  })\n\n  it('handles user refresh successfully', async () => {\n    const initialUser = {\n      id: '1',\n      email: 'test@example.com',\n      name: 'Test User',\n      role: 'user',\n      organisation_id: 'org-1',\n      is_active: true,\n      created_at: '2023-01-01T00:00:00Z',\n      updated_at: '2023-01-01T00:00:00Z',\n    }\n\n    const updatedUser = {\n      ...initialUser,\n      name: 'Updated User',\n      updated_at: '2023-01-02T00:00:00Z',\n    }\n\n    mockAuthService.isAuthenticated.mockReturnValue(true)\n    mockAuthService.getCurrentUser\n      .mockResolvedValueOnce(initialUser)\n      .mockResolvedValueOnce(updatedUser)\n    \n    const { result } = renderHook(() => useAuth())\n    \n    await waitFor(() => {\n      expect(result.current.user).toEqual(initialUser)\n    })\n    \n    await act(async () => {\n      await result.current.refreshUser()\n    })\n    \n    expect(result.current.user).toEqual(updatedUser)\n    expect(mockAuthService.getCurrentUser).toHaveBeenCalledTimes(2)\n  })\n\n  it('handles user refresh failure', async () => {\n    const mockUser = {\n      id: '1',\n      email: 'test@example.com',\n      name: 'Test User',\n      role: 'user',\n      organisation_id: 'org-1',\n      is_active: true,\n      created_at: '2023-01-01T00:00:00Z',\n      updated_at: '2023-01-01T00:00:00Z',\n    }\n\n    mockAuthService.isAuthenticated.mockReturnValue(true)\n    mockAuthService.getCurrentUser\n      .mockResolvedValueOnce(mockUser)\n      .mockRejectedValueOnce(new Error('Refresh failed'))\n    \n    const { result } = renderHook(() => useAuth())\n    \n    await waitFor(() => {\n      expect(result.current.user).toEqual(mockUser)\n    })\n    \n    await act(async () => {\n      await result.current.refreshUser()\n    })\n    \n    expect(result.current.user).toBeNull()\n    expect(result.current.isAuthenticated).toBe(false)\n    expect(mockAuthService.logout).toHaveBeenCalledTimes(1)\n    expect(console.error).toHaveBeenCalledWith('User refresh failed:', expect.any(Error))\n  })\n})\n\ndescribe('useAuthContext Hook', () => {\n  const mockAuthContextValue = {\n    user: null,\n    isAuthenticated: false,\n    isLoading: false,\n    login: jest.fn(),\n    logout: jest.fn(),\n    refreshUser: jest.fn(),\n  }\n\n  it('returns context value when used within provider', () => {\n    const wrapper = ({ children }: { children: React.ReactNode }) => (\n      <AuthContext.Provider value={mockAuthContextValue}>\n        {children}\n      </AuthContext.Provider>\n    )\n\n    const { result } = renderHook(() => useAuthContext(), { wrapper })\n    \n    expect(result.current).toBe(mockAuthContextValue)\n  })\n\n  it('throws error when used outside provider', () => {\n    const { result } = renderHook(() => useAuthContext())\n    \n    expect(result.error).toEqual(\n      new Error('useAuthContext must be used within an AuthProvider')\n    )\n  })\n\n  it('provides all required context properties', () => {\n    const wrapper = ({ children }: { children: React.ReactNode }) => (\n      <AuthContext.Provider value={mockAuthContextValue}>\n        {children}\n      </AuthContext.Provider>\n    )\n\n    const { result } = renderHook(() => useAuthContext(), { wrapper })\n    \n    expect(result.current).toHaveProperty('user')\n    expect(result.current).toHaveProperty('isAuthenticated')\n    expect(result.current).toHaveProperty('isLoading')\n    expect(result.current).toHaveProperty('login')\n    expect(result.current).toHaveProperty('logout')\n    expect(result.current).toHaveProperty('refreshUser')\n  })\n})"],"names":["jest","mock","authService","isAuthenticated","fn","getCurrentUser","login","logout","getUserPermissions","mockReturnValue","hasPermission","hasAnyPermission","getUserRole","checkSession","extendSession","initializeAutoRefresh","initializeActivityTracking","mockAuthService","describe","beforeEach","clearAllMocks","spyOn","console","mockImplementation","afterEach","restoreAllMocks","it","result","renderHook","useAuth","expect","current","user","toBeNull","isLoading","toBe","mockUser","id","email","name","role","organisation_id","is_active","created_at","updated_at","mockResolvedValue","waitFor","toEqual","toHaveBeenCalledTimes","mockRejectedValue","Error","error","toHaveBeenCalledWith","any","act","code","redirect_uri","loginError","rejects","toThrow","initialUser","updatedUser","mockResolvedValueOnce","refreshUser","mockRejectedValueOnce","mockAuthContextValue","wrapper","children","AuthContext","Provider","value","useAuthContext","toHaveProperty"],"mappings":"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"}