1e66da5537970bd179788ca1ffa75b92
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return ApplicationSwitcher;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = require("react");
const _react1 = require("@headlessui/react");
const _outline = require("@heroicons/react/24/outline");
const _navigation = require("next/navigation");
const _LoadingSpinner = /*#__PURE__*/ _interop_require_default(require("./LoadingSpinner"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const applications = [
    {
        id: "market-edge",
        name: "Market Edge",
        displayName: "Market Edge",
        route: "/market-edge",
        icon: _outline.ChartBarIcon,
        color: "from-blue-500 to-green-500",
        description: "Competitive Intelligence & Market Analysis",
        requiredPermissions: [
            "read:market_edge"
        ]
    },
    {
        id: "causal-edge",
        name: "Causal Edge",
        displayName: "Causal Edge",
        route: "/causal-edge",
        icon: _outline.CogIcon,
        color: "from-orange-500 to-red-500",
        description: "Business Process & Causal Analysis",
        requiredPermissions: [
            "read:causal_edge"
        ]
    },
    {
        id: "value-edge",
        name: "Value Edge",
        displayName: "Value Edge",
        route: "/value-edge",
        icon: _outline.EyeIcon,
        color: "from-purple-500 to-teal-500",
        description: "Value Engineering & ROI Analysis",
        requiredPermissions: [
            "read:value_edge"
        ]
    }
];
function ApplicationSwitcher({ className = "", userPermissions = [] }) {
    const router = (0, _navigation.useRouter)();
    const pathname = (0, _navigation.usePathname)();
    const [currentApplication, setCurrentApplication] = (0, _react.useState)(null);
    const [isLoading, setIsLoading] = (0, _react.useState)(false);
    const [isOpen, setIsOpen] = (0, _react.useState)(false);
    // Get current application from pathname
    (0, _react.useEffect)(()=>{
        const currentApp = applications.find((app)=>pathname.startsWith(app.route));
        if (currentApp) {
            setCurrentApplication(currentApp);
            // Save to localStorage
            localStorage.setItem("currentApplication", currentApp.id);
        } else {
            // Try to restore from localStorage
            const savedAppId = localStorage.getItem("currentApplication");
            const savedApp = applications.find((app)=>app.id === savedAppId);
            if (savedApp && hasPermission(savedApp)) {
                setCurrentApplication(savedApp);
            }
        }
    }, [
        pathname,
        userPermissions
    ]);
    // Filter applications based on user permissions
    const accessibleApplications = applications.filter((app)=>hasPermission(app));
    function hasPermission(app) {
        if (!app.requiredPermissions || app.requiredPermissions.length === 0) {
            return true;
        }
        return app.requiredPermissions.some((permission)=>userPermissions.includes(permission));
    }
    const handleApplicationSwitch = async (application)=>{
        if (application.id === currentApplication?.id || isLoading) return;
        setIsLoading(true);
        try {
            // Save to localStorage
            localStorage.setItem("currentApplication", application.id);
            // Navigate to the application
            router.push(application.route);
            setCurrentApplication(application);
            setIsOpen(false);
        } catch (error) {
            console.error("Failed to switch application:", error);
        } finally{
            setIsLoading(false);
        }
    };
    // Don't show if user has access to only one application or none
    if (accessibleApplications.length <= 1) {
        return null;
    }
    const currentAppDisplay = currentApplication || accessibleApplications[0];
    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        className: `relative ${className}`,
        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_react1.Listbox, {
            value: currentApplication,
            onChange: handleApplicationSwitch,
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "relative",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react1.Listbox.Button, {
                        className: "relative w-full min-w-[220px] cursor-pointer rounded-lg bg-white py-2 pl-3 pr-10 text-left border border-gray-300 shadow-sm focus:border-primary-500 focus:outline-none focus:ring-1 focus:ring-primary-500 sm:text-sm",
                        disabled: isLoading,
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                className: "flex items-center gap-3",
                                children: [
                                    isLoading ? /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                                        size: "sm"
                                    }) : /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: `flex-shrink-0 w-8 h-8 rounded-lg bg-gradient-to-br ${currentAppDisplay?.color || "from-gray-400 to-gray-600"} flex items-center justify-center`,
                                        children: currentAppDisplay?.icon && /*#__PURE__*/ (0, _jsxruntime.jsx)(currentAppDisplay.icon, {
                                            className: "h-5 w-5 text-white"
                                        })
                                    }),
                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                        className: "flex-1 min-w-0",
                                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                            className: "flex flex-col",
                                            children: [
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "block truncate font-medium text-gray-900",
                                                    children: currentAppDisplay?.displayName || "Select Application"
                                                }),
                                                /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                    className: "block truncate text-xs text-gray-500",
                                                    children: currentAppDisplay?.description || "Business Intelligence Platform"
                                                })
                                            ]
                                        })
                                    })
                                ]
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                className: "pointer-events-none absolute inset-y-0 right-0 flex items-center pr-2",
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_outline.ChevronDownIcon, {
                                    className: "h-5 w-5 text-gray-400",
                                    "aria-hidden": "true"
                                })
                            })
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_react1.Transition, {
                        show: isOpen,
                        as: _react.Fragment,
                        leave: "transition ease-in duration-100",
                        leaveFrom: "opacity-100",
                        leaveTo: "opacity-0",
                        beforeEnter: ()=>setIsOpen(true),
                        afterLeave: ()=>setIsOpen(false),
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_react1.Listbox.Options, {
                            className: "absolute z-50 mt-1 max-h-60 w-full min-w-[300px] overflow-auto rounded-md bg-white py-1 text-base shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none sm:text-sm",
                            children: [
                                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                    className: "px-3 py-2 text-xs font-medium text-gray-500 border-b border-gray-200",
                                    children: "Switch Application"
                                }),
                                accessibleApplications.map((application)=>{
                                    const isCurrent = application.id === currentApplication?.id;
                                    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react1.Listbox.Option, {
                                        className: ({ active, selected })=>`relative cursor-pointer select-none py-3 px-3 ${active || selected ? "bg-primary-50 text-primary-900" : "text-gray-900"} ${isCurrent ? "bg-primary-50" : ""}`,
                                        value: application,
                                        children: ({ selected })=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                className: "flex items-center justify-between",
                                                children: [
                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                        className: "flex items-center gap-3 flex-1 min-w-0",
                                                        children: [
                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                                                className: `flex-shrink-0 w-10 h-10 rounded-lg bg-gradient-to-br ${application.color} flex items-center justify-center shadow-sm`,
                                                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(application.icon, {
                                                                    className: "h-6 w-6 text-white"
                                                                })
                                                            }),
                                                            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                className: "flex-1 min-w-0",
                                                                children: [
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                                                                        className: "flex items-center gap-2 mb-1",
                                                                        children: [
                                                                            /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                                                className: `block truncate ${isCurrent ? "font-semibold" : "font-medium"}`,
                                                                                children: application.displayName
                                                                            }),
                                                                            isCurrent && /*#__PURE__*/ (0, _jsxruntime.jsx)("span", {
                                                                                className: "text-xs bg-primary-100 text-primary-700 px-2 py-0.5 rounded-full",
                                                                                children: "Current"
                                                                            })
                                                                        ]
                                                                    }),
                                                                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                                                                        className: "text-sm text-gray-500 truncate",
                                                                        children: application.description
                                                                    })
                                                                ]
                                                            })
                                                        ]
                                                    }),
                                                    isCurrent && /*#__PURE__*/ (0, _jsxruntime.jsx)(_outline.CheckIcon, {
                                                        className: "h-5 w-5 text-primary-600"
                                                    })
                                                ]
                                            })
                                    }, application.id);
                                })
                            ]
                        })
                    })
                ]
            })
        })
    });
}

//# sourceMappingURL=data:application/json;base64,