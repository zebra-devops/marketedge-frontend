2d287b901194469741eeca4458fa959c
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "PricingChart", {
    enumerable: true,
    get: function() {
        return PricingChart;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_wildcard(require("react"));
const _recharts = require("recharts");
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const PricingChart = ({ data, chartType = "line", title, height = 400, showLegend = true, className = "" })=>{
    const { chartData, competitorColors } = (0, _react.useMemo)(()=>{
        if (!data) return {
            chartData: [],
            competitorColors: {}
        };
        // Handle MarketTrends data
        if ("market_trend" in data && data.market_trend) {
            const weeks = Object.keys(data.market_trend).sort();
            const colors = [
                "#3B82F6",
                "#EF4444",
                "#10B981",
                "#F59E0B",
                "#8B5CF6",
                "#EC4899"
            ];
            const competitors = Object.keys(data.competitor_trends || {});
            const competitorColorMap = competitors.reduce((acc, comp, index)=>{
                acc[comp] = colors[index % colors.length];
                return acc;
            }, {});
            const chartData = weeks.map((week)=>{
                const dataPoint = {
                    week: week.replace("2024-W", "W"),
                    market: Math.round(data.market_trend[week] * 100) / 100
                };
                // Add competitor data
                if (data.competitor_trends) {
                    Object.entries(data.competitor_trends).forEach(([competitorId, competitorData])=>{
                        const weeklyData = competitorData.weekly_averages[week];
                        if (weeklyData) {
                            dataPoint[competitorData.name] = Math.round(weeklyData * 100) / 100;
                        }
                    });
                }
                return dataPoint;
            });
            return {
                chartData,
                competitorColors: competitorColorMap
            };
        }
        // Handle CompetitorComparison data
        if ("competitors" in data) {
            const chartData = Object.entries(data.competitors).map(([id, competitor])=>({
                    name: competitor.name.length > 15 ? competitor.name.substring(0, 15) + "..." : competitor.name,
                    fullName: competitor.name,
                    averagePrice: Math.round(competitor.average_price * 100) / 100,
                    minPrice: competitor.min_price,
                    maxPrice: competitor.max_price,
                    marketShare: competitor.market_share_estimate || 0,
                    dataPoints: competitor.data_points
                }));
            return {
                chartData: chartData.sort((a, b)=>a.averagePrice - b.averagePrice),
                competitorColors: {}
            };
        }
        // Handle generic data
        return {
            chartData: data,
            competitorColors: {}
        };
    }, [
        data
    ]);
    const formatCurrency = (value)=>{
        return `Â£${value.toFixed(2)}`;
    };
    const formatPercent = (value)=>{
        return `${value.toFixed(1)}%`;
    };
    const CustomTooltip = ({ active, payload, label })=>{
        if (active && payload && payload.length) {
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "bg-white p-3 border border-gray-200 rounded-lg shadow-lg",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: "font-medium text-gray-900 mb-2",
                        children: label
                    }),
                    payload.map((entry, index)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                            className: "text-sm",
                            style: {
                                color: entry.color
                            },
                            children: `${entry.dataKey === "market" ? "Market Average" : entry.dataKey}: ${formatCurrency(entry.value)}`
                        }, index))
                ]
            });
        }
        return null;
    };
    const CompetitorTooltip = ({ active, payload, label })=>{
        if (active && payload && payload.length) {
            const data = payload[0].payload;
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "bg-white p-3 border border-gray-200 rounded-lg shadow-lg",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("p", {
                        className: "font-medium text-gray-900 mb-2",
                        children: data.fullName
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                        className: "text-sm text-gray-600",
                        children: [
                            "Average Price: ",
                            formatCurrency(data.averagePrice)
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                        className: "text-sm text-gray-600",
                        children: [
                            "Price Range: ",
                            formatCurrency(data.minPrice),
                            " - ",
                            formatCurrency(data.maxPrice)
                        ]
                    }),
                    data.marketShare > 0 && /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                        className: "text-sm text-gray-600",
                        children: [
                            "Market Share: ",
                            formatPercent(data.marketShare)
                        ]
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsxs)("p", {
                        className: "text-sm text-gray-600",
                        children: [
                            "Data Points: ",
                            data.dataPoints
                        ]
                    })
                ]
            });
        }
        return null;
    };
    if (!chartData || chartData.length === 0) {
        return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            className: `bg-white rounded-lg border border-gray-200 p-6 ${className}`,
            children: [
                title && /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                    className: "text-lg font-medium text-gray-900 mb-4",
                    children: title
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    className: "flex items-center justify-center h-64 text-gray-500",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        className: "text-center",
                        children: [
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "text-sm",
                                children: "No pricing data available"
                            }),
                            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                                className: "text-xs mt-1",
                                children: "Data will appear here once pricing information is collected"
                            })
                        ]
                    })
                })
            ]
        });
    }
    const renderChart = ()=>{
        // For trends data (line/area chart)
        if ("market_trend" in data) {
            const Chart = chartType === "area" ? _recharts.AreaChart : _recharts.LineChart;
            const Element = chartType === "area" ? _recharts.Area : _recharts.Line;
            return /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.ResponsiveContainer, {
                width: "100%",
                height: height,
                children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(Chart, {
                    data: chartData,
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.CartesianGrid, {
                            strokeDasharray: "3 3",
                            stroke: "#f0f0f0"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.XAxis, {
                            dataKey: "week",
                            tick: {
                                fontSize: 12
                            },
                            stroke: "#6b7280"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.YAxis, {
                            tick: {
                                fontSize: 12
                            },
                            tickFormatter: formatCurrency,
                            stroke: "#6b7280"
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Tooltip, {
                            content: /*#__PURE__*/ (0, _jsxruntime.jsx)(CustomTooltip, {})
                        }),
                        showLegend && /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Legend, {}),
                        /*#__PURE__*/ (0, _jsxruntime.jsx)(Element, {
                            type: "monotone",
                            dataKey: "market",
                            stroke: "#1f2937",
                            strokeWidth: 3,
                            strokeDasharray: "5 5",
                            name: "Market Average",
                            ...chartType === "area" && {
                                fill: "#1f293740"
                            }
                        }),
                        data.competitor_trends && Object.entries(data.competitor_trends).map(([competitorId, competitorData])=>/*#__PURE__*/ (0, _jsxruntime.jsx)(Element, {
                                type: "monotone",
                                dataKey: competitorData.name,
                                stroke: competitorColors[competitorId] || "#6b7280",
                                strokeWidth: 2,
                                name: competitorData.name,
                                connectNulls: false,
                                ...chartType === "area" && {
                                    fill: `${competitorColors[competitorId] || "#6b7280"}20`,
                                    fillOpacity: 0.3
                                }
                            }, competitorId))
                    ]
                })
            });
        }
        // For competitor comparison (bar chart)
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.ResponsiveContainer, {
            width: "100%",
            height: height,
            children: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_recharts.BarChart, {
                data: chartData,
                margin: {
                    bottom: 60
                },
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.CartesianGrid, {
                        strokeDasharray: "3 3",
                        stroke: "#f0f0f0"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.XAxis, {
                        dataKey: "name",
                        tick: {
                            fontSize: 11
                        },
                        angle: -45,
                        textAnchor: "end",
                        height: 80,
                        stroke: "#6b7280"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.YAxis, {
                        tick: {
                            fontSize: 12
                        },
                        tickFormatter: formatCurrency,
                        stroke: "#6b7280"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Tooltip, {
                        content: /*#__PURE__*/ (0, _jsxruntime.jsx)(CompetitorTooltip, {})
                    }),
                    showLegend && /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Legend, {}),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_recharts.Bar, {
                        dataKey: "averagePrice",
                        name: "Average Price",
                        fill: "#3B82F6",
                        radius: [
                            4,
                            4,
                            0,
                            0
                        ]
                    })
                ]
            })
        });
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        className: `bg-white rounded-lg border border-gray-200 p-6 ${className}`,
        children: [
            title && /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "flex items-center justify-between mb-6",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("h3", {
                        className: "text-lg font-medium text-gray-900",
                        children: title
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        className: "flex items-center space-x-2",
                        children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            className: "text-sm text-gray-500",
                            children: [
                                chartData.length,
                                " data points"
                            ]
                        })
                    })
                ]
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                className: "w-full",
                children: renderChart()
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                className: "mt-4 flex justify-center space-x-2",
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>{},
                        className: `px-3 py-1 text-xs rounded-md transition-colors ${chartType === "line" ? "bg-blue-100 text-blue-700" : "bg-gray-100 text-gray-600 hover:bg-gray-200"}`,
                        children: "Line"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>{},
                        className: `px-3 py-1 text-xs rounded-md transition-colors ${chartType === "area" ? "bg-blue-100 text-blue-700" : "bg-gray-100 text-gray-600 hover:bg-gray-200"}`,
                        children: "Area"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: ()=>{},
                        className: `px-3 py-1 text-xs rounded-md transition-colors ${chartType === "bar" ? "bg-blue-100 text-blue-700" : "bg-gray-100 text-gray-600 hover:bg-gray-200"}`,
                        children: "Bar"
                    })
                ]
            })
        ]
    });
};

//# sourceMappingURL=data:application/json;base64,