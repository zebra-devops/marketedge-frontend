6bf495017028894cad25b24e7fa26d6d
/**
 * Mock Service Worker (MSW) Server Setup
 * 
 * Provides API mocking for testing multi-tenant scenarios.
 * Handles authentication, tenant-specific data, and rate limiting responses.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    mockApiEndpoint: function() {
        return mockApiEndpoint;
    },
    mockIndustryData: function() {
        return mockIndustryData;
    },
    server: function() {
        return server;
    }
});
const _node = require("msw/node");
const _msw = require("msw");
const _index = require("../index");
// Base API URL for mocking
const API_BASE_URL = "http://localhost:8000/api/v1";
// Mock handlers for different API endpoints
const handlers = [
    // Authentication endpoints
    _msw.http.post(`${API_BASE_URL}/auth/login`, async ({ request })=>{
        const body = await request.json();
        const { email, password } = body;
        if (email === "test@example.com" && password === "password123") {
            return _msw.HttpResponse.json({
                access_token: "mock-jwt-token",
                token_type: "bearer",
                expires_in: 3600,
                user: {
                    id: "test-user-456",
                    email: "test@example.com",
                    name: "Test User",
                    role: "user",
                    organization_id: "test-tenant-123",
                    is_active: true
                },
                organization: {
                    id: "test-tenant-123",
                    name: "Test Organization",
                    industry: "b2b",
                    subscription: "premium",
                    features: [
                        "market-edge",
                        "analytics",
                        "reporting"
                    ]
                }
            }, {
                status: 200
            });
        }
        return _msw.HttpResponse.json({
            detail: "Invalid credentials"
        }, {
            status: 401
        });
    }),
    _msw.http.post(`${API_BASE_URL}/auth/refresh`, ()=>{
        return _msw.HttpResponse.json({
            access_token: "new-mock-jwt-token",
            token_type: "bearer",
            expires_in: 3600
        }, {
            status: 200
        });
    }),
    _msw.http.post(`${API_BASE_URL}/auth/logout`, ()=>{
        return _msw.HttpResponse.json({
            message: "Logged out successfully"
        }, {
            status: 200
        });
    }),
    // User profile endpoints
    _msw.http.get(`${API_BASE_URL}/users/me`, ({ request })=>{
        const authHeader = request.headers.get("authorization");
        if (!authHeader || !authHeader.startsWith("Bearer ")) {
            return _msw.HttpResponse.json({
                detail: "Not authenticated"
            }, {
                status: 401
            });
        }
        return _msw.HttpResponse.json({
            id: "test-user-456",
            email: "test@example.com",
            name: "Test User",
            role: "user",
            organization_id: "test-tenant-123",
            permissions: [
                "read:data",
                "write:data"
            ],
            is_active: true,
            created_at: "2024-01-01T00:00:00Z",
            updated_at: "2024-01-01T00:00:00Z"
        });
    }),
    // Organization endpoints
    _msw.http.get(`${API_BASE_URL}/organizations/me`, (req, res, ctx)=>{
        return res(ctx.status(200), ctx.json({
            id: "test-tenant-123",
            name: "Test Organization",
            industry: "b2b",
            subscription: "premium",
            features: [
                "market-edge",
                "analytics",
                "reporting"
            ],
            limits: {
                users: 100,
                api_calls: 10000,
                storage: 1000
            },
            settings: {
                timezone: "UTC",
                currency: "USD",
                date_format: "YYYY-MM-DD"
            }
        }));
    }),
    // Market Edge API endpoints
    _msw.http.get(`${API_BASE_URL}/market-edge/competitors`, (req, res, ctx)=>{
        const industry = req.url.searchParams.get("industry") || "b2b";
        // Simulate different data based on industry
        let mockData;
        switch(industry){
            case "cinema":
                mockData = (0, _index.generateMockApiResponse)("cinema", "venue", 3);
                break;
            case "hotel":
                mockData = (0, _index.generateMockApiResponse)("hotel", "property", 3);
                break;
            case "gym":
                mockData = (0, _index.generateMockApiResponse)("gym", "facility", 3);
                break;
            case "retail":
                mockData = (0, _index.generateMockApiResponse)("retail", "store", 3);
                break;
            default:
                mockData = (0, _index.generateMockApiResponse)("b2b", "client", 3);
        }
        return res(ctx.status(200), ctx.json({
            data: mockData,
            meta: {
                total: mockData.length,
                page: 1,
                per_page: 10,
                industry
            }
        }));
    }),
    _msw.http.get(`${API_BASE_URL}/market-edge/analytics`, (req, res, ctx)=>{
        const timeframe = req.url.searchParams.get("timeframe") || "7d";
        return res(ctx.status(200), ctx.json({
            metrics: {
                revenue: 125000,
                growth: 12.5,
                market_share: 15.2,
                competitor_count: 8
            },
            trends: {
                daily_revenue: [
                    {
                        date: "2024-01-08",
                        value: 18000
                    },
                    {
                        date: "2024-01-09",
                        value: 19200
                    },
                    {
                        date: "2024-01-10",
                        value: 17800
                    },
                    {
                        date: "2024-01-11",
                        value: 20100
                    },
                    {
                        date: "2024-01-12",
                        value: 21500
                    },
                    {
                        date: "2024-01-13",
                        value: 19800
                    },
                    {
                        date: "2024-01-14",
                        value: 22000
                    }
                ]
            },
            timeframe
        }));
    }),
    // Feature flags endpoints
    _msw.http.get(`${API_BASE_URL}/features`, (req, res, ctx)=>{
        return res(ctx.status(200), ctx.json({
            flags: {
                "market-edge": {
                    enabled: true,
                    rollout: 100
                },
                "advanced-analytics": {
                    enabled: true,
                    rollout: 75
                },
                "real-time-data": {
                    enabled: false,
                    rollout: 25
                },
                "mobile-app": {
                    enabled: true,
                    rollout: 100
                }
            }
        }));
    }),
    // Admin endpoints (require admin role)
    _msw.http.get(`${API_BASE_URL}/admin/users`, (req, res, ctx)=>{
        const authHeader = req.headers.get("authorization");
        // Simulate role-based access control
        if (!authHeader || authHeader === "Bearer non-admin-token") {
            return res(ctx.status(403), ctx.json({
                detail: "Insufficient permissions"
            }));
        }
        return res(ctx.status(200), ctx.json({
            users: [
                {
                    id: "user-1",
                    email: "admin@example.com",
                    name: "Admin User",
                    role: "admin",
                    is_active: true
                },
                {
                    id: "user-2",
                    email: "manager@example.com",
                    name: "Manager User",
                    role: "manager",
                    is_active: true
                },
                {
                    id: "user-3",
                    email: "user@example.com",
                    name: "Regular User",
                    role: "user",
                    is_active: true
                }
            ],
            meta: {
                total: 3,
                page: 1,
                per_page: 10
            }
        }));
    }),
    // Rate limiting simulation
    _msw.http.get(`${API_BASE_URL}/test/rate-limit`, (req, res, ctx)=>{
        // Simulate rate limit headers
        return res(ctx.status(200), ctx.set("X-RateLimit-Limit", "100"), ctx.set("X-RateLimit-Remaining", "95"), ctx.set("X-RateLimit-Reset", String(Date.now() + 3600000)), ctx.json({
            message: "Rate limit test successful"
        }));
    }),
    _msw.http.get(`${API_BASE_URL}/test/rate-limit-exceeded`, (req, res, ctx)=>{
        return res(ctx.status(429), ctx.set("X-RateLimit-Limit", "100"), ctx.set("X-RateLimit-Remaining", "0"), ctx.set("X-RateLimit-Reset", String(Date.now() + 3600000)), ctx.set("Retry-After", "60"), ctx.json({
            error: "Rate limit exceeded",
            message: "Too many requests. Limit: 100 per window",
            retry_after: 60
        }));
    }),
    // Error simulation endpoints for testing error handling
    _msw.http.get(`${API_BASE_URL}/test/server-error`, (req, res, ctx)=>{
        return res(ctx.status(500), ctx.json({
            detail: "Internal server error"
        }));
    }),
    _msw.http.get(`${API_BASE_URL}/test/network-error`, (req, res, ctx)=>{
        return res.networkError("Network error simulated");
    }),
    _msw.http.get(`${API_BASE_URL}/test/timeout`, (req, res, ctx)=>{
        // Simulate a slow response
        return res(ctx.delay(10000), ctx.status(200), ctx.json({
            message: "Slow response"
        }));
    }),
    // Fallback handler for unmatched requests
    _msw.http.get("*", (req, res, ctx)=>{
        console.warn(`Unhandled GET request to ${req.url.toString()}`);
        return res(ctx.status(404), ctx.json({
            detail: `Endpoint not found: ${req.url.pathname}`
        }));
    }),
    _msw.http.post("*", (req, res, ctx)=>{
        console.warn(`Unhandled POST request to ${req.url.toString()}`);
        return res(ctx.status(404), ctx.json({
            detail: `Endpoint not found: ${req.url.pathname}`
        }));
    })
];
const server = (0, _node.setupServer)(...handlers);
const mockApiEndpoint = {
    // Mock successful responses
    success: (endpoint, data, status = 200)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx)=>{
            return res(ctx.status(status), ctx.json(data));
        }));
    },
    // Mock error responses
    error: (endpoint, status = 500, message = "Server error")=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx)=>{
            return res(ctx.status(status), ctx.json({
                detail: message
            }));
        }));
    },
    // Mock rate limit responses
    rateLimited: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx)=>{
            return res(ctx.status(429), ctx.set("X-RateLimit-Limit", "100"), ctx.set("X-RateLimit-Remaining", "0"), ctx.set("Retry-After", "60"), ctx.json({
                error: "Rate limit exceeded",
                message: "Too many requests",
                retry_after: 60
            }));
        }));
    },
    // Mock network errors
    networkError: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx)=>{
            return res.networkError("Network connection failed");
        }));
    },
    // Mock slow responses
    slow: (endpoint, delay = 5000)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx)=>{
            return res(ctx.delay(delay), ctx.status(200), ctx.json({
                message: "Delayed response"
            }));
        }));
    }
};
const mockIndustryData = {
    cinema: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx)=>{
            return res(ctx.status(200), ctx.json({
                venues: (0, _index.generateMockApiResponse)("cinema", "venue", 5),
                movies: (0, _index.generateMockApiResponse)("cinema", "movie", 10),
                bookings: (0, _index.generateMockApiResponse)("cinema", "booking", 20)
            }));
        }));
    },
    hotel: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx)=>{
            return res(ctx.status(200), ctx.json({
                properties: (0, _index.generateMockApiResponse)("hotel", "property", 3),
                rooms: (0, _index.generateMockApiResponse)("hotel", "room", 50),
                reservations: (0, _index.generateMockApiResponse)("hotel", "reservation", 30)
            }));
        }));
    },
    gym: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx)=>{
            return res(ctx.status(200), ctx.json({
                facilities: (0, _index.generateMockApiResponse)("gym", "facility", 2),
                members: (0, _index.generateMockApiResponse)("gym", "member", 100),
                checkins: (0, _index.generateMockApiResponse)("gym", "checkin", 200)
            }));
        }));
    },
    retail: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx)=>{
            return res(ctx.status(200), ctx.json({
                stores: (0, _index.generateMockApiResponse)("retail", "store", 5),
                products: (0, _index.generateMockApiResponse)("retail", "product", 500),
                sales: (0, _index.generateMockApiResponse)("retail", "sale", 1000)
            }));
        }));
    },
    b2b: (endpoint)=>{
        server.use(_msw.http.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx)=>{
            return res(ctx.status(200), ctx.json({
                clients: (0, _index.generateMockApiResponse)("b2b", "client", 25),
                projects: (0, _index.generateMockApiResponse)("b2b", "project", 50),
                reports: (0, _index.generateMockApiResponse)("b2b", "report", 100)
            }));
        }));
    }
};

//# sourceMappingURL=data:application/json;base64,