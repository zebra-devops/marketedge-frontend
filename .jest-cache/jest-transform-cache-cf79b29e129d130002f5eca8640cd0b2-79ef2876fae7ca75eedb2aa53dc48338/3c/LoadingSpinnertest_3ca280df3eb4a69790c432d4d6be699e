8a7f0f26197a888a80b214f93f8e0ec3
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _testutils = require("../../../test-utils");
const _LoadingSpinner = /*#__PURE__*/ _interop_require_default(require("../LoadingSpinner"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("LoadingSpinner Component", ()=>{
    it("renders with default props", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {}));
        const container = _testutils.screen.getByRole("generic");
        expect(container).toBeInTheDocument();
        expect(container).toHaveClass("flex", "justify-center", "items-center");
        const spinner = container.firstChild;
        expect(spinner).toHaveClass("animate-spin", "rounded-full", "border-2");
    });
    it("renders with medium size by default", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {}));
        const container = _testutils.screen.getByRole("generic");
        const spinner = container.firstChild;
        expect(spinner).toHaveClass("h-8", "w-8");
    });
    it("renders with small size", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
            size: "sm"
        }));
        const container = _testutils.screen.getByRole("generic");
        const spinner = container.firstChild;
        expect(spinner).toHaveClass("h-4", "w-4");
    });
    it("renders with large size", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
            size: "lg"
        }));
        const container = _testutils.screen.getByRole("generic");
        const spinner = container.firstChild;
        expect(spinner).toHaveClass("h-12", "w-12");
    });
    it("applies custom className", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
            className: "custom-spinner"
        }));
        const container = _testutils.screen.getByRole("generic");
        expect(container).toHaveClass("custom-spinner");
    });
    it("has proper spinner styling", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {}));
        const container = _testutils.screen.getByRole("generic");
        const spinner = container.firstChild;
        expect(spinner).toHaveClass("animate-spin", "rounded-full", "border-2", "border-gray-300", "border-t-primary-600");
    });
    it("maintains consistent structure across sizes", ()=>{
        const sizes = [
            "sm",
            "md",
            "lg"
        ];
        sizes.forEach((size)=>{
            const { container, unmount } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                size: size
            }));
            const wrapper = container.firstChild;
            expect(wrapper).toHaveClass("flex", "justify-center", "items-center");
            const spinner = wrapper?.firstChild;
            expect(spinner).toHaveClass("animate-spin", "rounded-full", "border-2");
            unmount();
        });
    });
    it("combines custom className with default classes", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
            className: "my-4 text-red-500"
        }));
        const container = _testutils.screen.getByRole("generic");
        expect(container).toHaveClass("flex", "justify-center", "items-center", "my-4", "text-red-500");
    });
    it("is accessible for screen readers", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {}));
        // While not explicitly tested, the component structure supports
        // adding aria-label or role attributes if needed for accessibility
        const container = _testutils.screen.getByRole("generic");
        expect(container).toBeInTheDocument();
    });
    it("renders consistently with different props combinations", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
            children: [
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                    size: "sm",
                    className: "mr-2"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                    size: "md",
                    className: "mr-2"
                }),
                /*#__PURE__*/ (0, _jsxruntime.jsx)(_LoadingSpinner.default, {
                    size: "lg",
                    className: "mr-2"
                })
            ]
        }));
        const spinners = _testutils.screen.getAllByRole("generic");
        expect(spinners).toHaveLength(3);
        spinners.forEach((spinner)=>{
            expect(spinner).toHaveClass("flex", "justify-center", "items-center", "mr-2");
        });
    });
});

//# sourceMappingURL=data:application/json;base64,