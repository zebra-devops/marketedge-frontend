5e513298ccc298ead4b0138de0810fba
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "apiService", {
    enumerable: true,
    get: function() {
        return apiService;
    }
});
const _axios = /*#__PURE__*/ _interop_require_default(require("axios"));
const _jscookie = /*#__PURE__*/ _interop_require_default(require("js-cookie"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class ApiService {
    constructor(){
        this.currentOrganizationId = null;
        this.client = _axios.default.create({
            baseURL: process.env.NEXT_PUBLIC_API_BASE_URL + "/api/v1",
            headers: {
                "Content-Type": "application/json"
            }
        });
        this.setupInterceptors();
    }
    setOrganizationContext(organizationId) {
        this.currentOrganizationId = organizationId;
    }
    clearOrganizationContext() {
        this.currentOrganizationId = null;
    }
    setupInterceptors() {
        this.client.interceptors.request.use((config)=>{
            const token = _jscookie.default.get("access_token");
            if (token) {
                config.headers.Authorization = `Bearer ${token}`;
            }
            // Add organization context header if set
            if (this.currentOrganizationId) {
                config.headers["X-Organization-ID"] = this.currentOrganizationId;
            }
            return config;
        }, (error)=>Promise.reject(error));
        this.client.interceptors.response.use((response)=>response, async (error)=>{
            const originalRequest = error.config;
            if (error.response?.status === 401 && !originalRequest._retry) {
                originalRequest._retry = true;
                try {
                    const refreshToken = _jscookie.default.get("refresh_token");
                    if (refreshToken) {
                        const response = await this.refreshToken({
                            refresh_token: refreshToken
                        });
                        _jscookie.default.set("access_token", response.access_token);
                        originalRequest.headers.Authorization = `Bearer ${response.access_token}`;
                        return this.client(originalRequest);
                    }
                } catch (refreshError) {
                    this.clearTokens();
                    window.location.href = "/login";
                }
            }
            return Promise.reject(error);
        });
    }
    clearTokens() {
        _jscookie.default.remove("access_token");
        _jscookie.default.remove("refresh_token");
    }
    async get(url) {
        const response = await this.client.get(url);
        return response.data;
    }
    async post(url, data) {
        const response = await this.client.post(url, data);
        return response.data;
    }
    async put(url, data) {
        const response = await this.client.put(url, data);
        return response.data;
    }
    async delete(url) {
        const response = await this.client.delete(url);
        return response.data;
    }
    async refreshToken(data) {
        const response = await _axios.default.post(`${process.env.NEXT_PUBLIC_API_BASE_URL}/api/v1/auth/refresh`, data);
        return response.data;
    }
    // Organisation Management Methods
    async createOrganisation(data) {
        return this.post("/organisations", data);
    }
    async getAllOrganisations() {
        return this.get("/organisations");
    }
    async getCurrentOrganisation() {
        return this.get("/organisations/current");
    }
    async updateCurrentOrganisation(data) {
        return this.put("/organisations/current", data);
    }
    async getAvailableIndustries() {
        return this.get("/organisations/industries");
    }
    async getOrganisationStats() {
        return this.get("/organisations/stats");
    }
    // Organization Switching Methods
    async getUserAccessibleOrganisations() {
        return this.get("/organisations/accessible");
    }
    async logOrganizationSwitch(organizationId) {
        return this.post("/audit/organization-switch", {
            organization_id: organizationId,
            timestamp: new Date().toISOString(),
            user_agent: navigator.userAgent
        });
    }
}
const apiService = new ApiService();

//# sourceMappingURL=data:application/json;base64,