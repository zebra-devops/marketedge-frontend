{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios'\nimport Cookies from 'js-cookie'\nimport { TokenResponse, RefreshTokenRequest } from '@/types/auth'\nimport { Organisation, OrganisationCreate, IndustryOption } from '@/types/api'\n\nclass ApiService {\n  private client: AxiosInstance\n  private currentOrganizationId: string | null = null\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: process.env.NEXT_PUBLIC_API_BASE_URL + '/api/v1',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n\n    this.setupInterceptors()\n  }\n\n  setOrganizationContext(organizationId: string) {\n    this.currentOrganizationId = organizationId\n  }\n\n  clearOrganizationContext() {\n    this.currentOrganizationId = null\n  }\n\n  private setupInterceptors() {\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = Cookies.get('access_token')\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`\n        }\n        \n        // Add organization context header if set\n        if (this.currentOrganizationId) {\n          config.headers['X-Organization-ID'] = this.currentOrganizationId\n        }\n        \n        return config\n      },\n      (error) => Promise.reject(error)\n    )\n\n    this.client.interceptors.response.use(\n      (response) => response,\n      async (error) => {\n        const originalRequest = error.config\n\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true\n\n          try {\n            const refreshToken = Cookies.get('refresh_token')\n            if (refreshToken) {\n              const response = await this.refreshToken({ refresh_token: refreshToken })\n              Cookies.set('access_token', response.access_token)\n              originalRequest.headers.Authorization = `Bearer ${response.access_token}`\n              return this.client(originalRequest)\n            }\n          } catch (refreshError) {\n            this.clearTokens()\n            window.location.href = '/login'\n          }\n        }\n\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  private clearTokens() {\n    Cookies.remove('access_token')\n    Cookies.remove('refresh_token')\n  }\n\n  async get<T>(url: string): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.get(url)\n    return response.data\n  }\n\n  async post<T>(url: string, data?: any): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.post(url, data)\n    return response.data\n  }\n\n  async put<T>(url: string, data?: any): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.put(url, data)\n    return response.data\n  }\n\n  async delete<T>(url: string): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.delete(url)\n    return response.data\n  }\n\n  async refreshToken(data: RefreshTokenRequest): Promise<{ access_token: string; token_type: string }> {\n    const response = await axios.post(\n      `${process.env.NEXT_PUBLIC_API_BASE_URL}/api/v1/auth/refresh`,\n      data\n    )\n    return response.data\n  }\n\n  // Organisation Management Methods\n  async createOrganisation(data: OrganisationCreate): Promise<Organisation> {\n    return this.post<Organisation>('/organisations', data)\n  }\n\n  async getAllOrganisations(): Promise<Organisation[]> {\n    return this.get<Organisation[]>('/organisations')\n  }\n\n  async getCurrentOrganisation(): Promise<Organisation> {\n    return this.get<Organisation>('/organisations/current')\n  }\n\n  async updateCurrentOrganisation(data: Partial<OrganisationCreate>): Promise<Organisation> {\n    return this.put<Organisation>('/organisations/current', data)\n  }\n\n  async getAvailableIndustries(): Promise<IndustryOption[]> {\n    return this.get<IndustryOption[]>('/organisations/industries')\n  }\n\n  async getOrganisationStats(): Promise<Record<string, any>> {\n    return this.get<Record<string, any>>('/organisations/stats')\n  }\n\n  // Organization Switching Methods\n  async getUserAccessibleOrganisations(): Promise<Organisation[]> {\n    return this.get<Organisation[]>('/organisations/accessible')\n  }\n\n  async logOrganizationSwitch(organizationId: string): Promise<void> {\n    return this.post<void>('/audit/organization-switch', { \n      organization_id: organizationId,\n      timestamp: new Date().toISOString(),\n      user_agent: navigator.userAgent\n    })\n  }\n}\n\nexport const apiService = new ApiService()"],"names":["apiService","ApiService","constructor","currentOrganizationId","client","axios","create","baseURL","process","env","NEXT_PUBLIC_API_BASE_URL","headers","setupInterceptors","setOrganizationContext","organizationId","clearOrganizationContext","interceptors","request","use","config","token","Cookies","get","Authorization","error","Promise","reject","response","originalRequest","status","_retry","refreshToken","refresh_token","set","access_token","refreshError","clearTokens","window","location","href","remove","url","data","post","put","delete","createOrganisation","getAllOrganisations","getCurrentOrganisation","updateCurrentOrganisation","getAvailableIndustries","getOrganisationStats","getUserAccessibleOrganisations","logOrganizationSwitch","organization_id","timestamp","Date","toISOString","user_agent","navigator","userAgent"],"mappings":"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"}