7e0f6630f63d399028b36996f44c6fe0
/**
 * Integration test for PerformanceMetrics component
 * 
 * Demonstrates multi-tenant testing with API integration and different industry contexts
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _msw = require("msw");
const _server = require("../../../__tests__/mocks/server");
const _handlers = require("../../../__tests__/mocks/handlers");
const _testutils = require("../../../__tests__/utils/test-utils");
const _PerformanceMetrics = require("../PerformanceMetrics");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("PerformanceMetrics Component", ()=>{
    beforeEach(()=>{
        _handlers.mockHandlerUtils.resetMocks();
    });
    describe("Basic Rendering", ()=>{
        it("renders loading state when isLoading is true", ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {
                isLoading: true
            }));
            // Check for loading skeleton cards
            expect(_react1.screen.getAllByText("", {
                selector: "div"
            })).toHaveLength(expect.any(Number));
            const skeletonCards = document.querySelectorAll(".animate-pulse");
            expect(skeletonCards.length).toBeGreaterThan(0);
        });
        it("displays empty state when no metrics provided", ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            expect(_react1.screen.getByText(/no metrics available/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/metrics will appear here once pricing data is analyzed/i)).toBeInTheDocument();
        });
        it("displays performance metrics when data is provided", ()=>{
            const mockMetrics = {
                period_start: "2025-01-01T00:00:00Z",
                period_end: "2025-01-14T23:59:59Z",
                total_data_points: 150,
                average_price: 125.50,
                median_price: 120.00,
                min_price: 85.00,
                max_price: 200.00,
                price_range: 115.00,
                standard_deviation: 25.75,
                price_quartiles: {
                    q1: 100.00,
                    q2: 120.00,
                    q3: 145.00
                },
                competitors: {
                    "comp-1": {
                        name: "Competitor A",
                        average_price: 130.00,
                        median_price: 125.00,
                        min_price: 110.00,
                        max_price: 160.00,
                        price_points_count: 50,
                        standard_deviation: 15.50,
                        price_rank: 1,
                        position: "high"
                    }
                },
                trends: {
                    trend: "increasing",
                    weekly_averages: {
                        "2025-01-01": 120.00,
                        "2025-01-08": 125.50
                    },
                    price_change: 5.50,
                    price_change_percent: 4.6
                },
                anomalies: []
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {
                metrics: mockMetrics
            }));
            // Check that metrics are displayed
            expect(_react1.screen.getByText("\xa3125.50")).toBeInTheDocument() // average price
            ;
            expect(_react1.screen.getByText("Median: \xa3120.00")).toBeInTheDocument() // median price
            ;
            expect(_react1.screen.getByText("\xa385.00 - \xa3200.00")).toBeInTheDocument() // min-max range
            ;
            expect(_react1.screen.getByText("\xa3115.00")).toBeInTheDocument() // price range value
            ;
            expect(_react1.screen.getByText("1")).toBeInTheDocument() // competitor count
            ;
        });
        it("handles API errors gracefully", async ()=>{
            // Mock API error
            _server.server.use(_msw.http.get("*/api/v1/market-edge/dashboard", ()=>{
                return _msw.HttpResponse.json({
                    error: "Internal Server Error"
                }, {
                    status: 500
                });
            }));
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/failed to load performance metrics/i)).toBeInTheDocument();
            });
            expect(_react1.screen.getByRole("button", {
                name: /try again/i
            })).toBeInTheDocument();
        });
    });
    describe("Multi-Tenant Industry Scenarios", ()=>{
        it("displays hotel-specific metrics for hotel industry", async ()=>{
            (0, _testutils.renderWithIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "hotel");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/occupancy rate/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/adr \(average daily rate\)/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/revpar/i)).toBeInTheDocument();
        });
        it("displays cinema-specific metrics for cinema industry", async ()=>{
            (0, _testutils.renderWithIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "cinema");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/ticket sales/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/box office performance/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/screening utilization/i)).toBeInTheDocument();
        });
        it("displays gym-specific metrics for gym industry", async ()=>{
            (0, _testutils.renderWithIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "gym");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/membership growth/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/facility utilization/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/member retention/i)).toBeInTheDocument();
        });
        it("displays retail-specific metrics for retail industry", async ()=>{
            (0, _testutils.renderWithIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "retail");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/sales per square foot/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/inventory turnover/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/customer conversion/i)).toBeInTheDocument();
        });
        it("displays b2b-specific metrics for b2b service industry", async ()=>{
            (0, _testutils.renderWithIndustry)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "b2b_service");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/client acquisition cost/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/monthly recurring revenue/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/churn rate/i)).toBeInTheDocument();
        });
    });
    describe("Subscription Plan Features", ()=>{
        it("shows basic metrics for basic subscription", async ()=>{
            (0, _testutils.renderWithSubscription)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "basic");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/basic metrics/i)).toBeInTheDocument();
            expect(_react1.screen.queryByText(/advanced analytics/i)).not.toBeInTheDocument();
            expect(_react1.screen.queryByText(/predictive insights/i)).not.toBeInTheDocument();
        });
        it("shows enhanced metrics for professional subscription", async ()=>{
            (0, _testutils.renderWithSubscription)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "professional");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/basic metrics/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/advanced analytics/i)).toBeInTheDocument();
            expect(_react1.screen.queryByText(/predictive insights/i)).not.toBeInTheDocument();
        });
        it("shows all metrics for enterprise subscription", async ()=>{
            (0, _testutils.renderWithSubscription)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}), "enterprise");
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/basic metrics/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/advanced analytics/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/predictive insights/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/custom reporting/i)).toBeInTheDocument();
        });
    });
    describe("User Interactions", ()=>{
        it("allows users to refresh metrics", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            const refreshButton = _react1.screen.getByRole("button", {
                name: /refresh/i
            });
            await user.click(refreshButton);
            expect(_react1.screen.getByTestId("loading-spinner")).toBeInTheDocument();
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/market performance/i)).toBeInTheDocument();
        });
        it("allows users to change time period", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            const periodSelector = _react1.screen.getByRole("combobox", {
                name: /time period/i
            });
            await user.selectOptions(periodSelector, "30d");
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/last 30 days/i)).toBeInTheDocument();
            });
        });
        it("allows users to export data", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            const exportButton = _react1.screen.getByRole("button", {
                name: /export/i
            });
            await user.click(exportButton);
            expect(_react1.screen.getByText(/export options/i)).toBeInTheDocument();
            const csvOption = _react1.screen.getByRole("button", {
                name: /export as csv/i
            });
            await user.click(csvOption);
            // Verify download was triggered (this would need to be mocked in real implementation)
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/download started/i)).toBeInTheDocument();
            });
        });
    });
    describe("Feature Flag Integration", ()=>{
        it("hides advanced features when feature flags are disabled", async ()=>{
            _handlers.mockHandlerUtils.setMockFeatureFlags({
                "market_edge_enabled": true,
                "competitive_analysis": false,
                "pricing_optimization": false
            });
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/market performance/i)).toBeInTheDocument();
            expect(_react1.screen.queryByText(/competitive analysis/i)).not.toBeInTheDocument();
            expect(_react1.screen.queryByText(/pricing optimization/i)).not.toBeInTheDocument();
        });
        it("shows all features when feature flags are enabled", async ()=>{
            _handlers.mockHandlerUtils.setMockFeatureFlags({
                "market_edge_enabled": true,
                "competitive_analysis": true,
                "pricing_optimization": true
            });
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByText(/market performance/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/competitive analysis/i)).toBeInTheDocument();
            expect(_react1.screen.getByText(/pricing optimization/i)).toBeInTheDocument();
        });
    });
    describe("Rate Limiting Integration", ()=>{
        it("handles rate limit errors appropriately", async ()=>{
            _server.server.use(_msw.http.get("*/api/v1/market-edge/dashboard", ()=>{
                return _msw.HttpResponse.json({
                    error: "Rate limit exceeded",
                    message: "Too many requests. Please try again later."
                }, {
                    status: 429,
                    headers: {
                        "X-RateLimit-Limit": "5000",
                        "X-RateLimit-Remaining": "0",
                        "X-RateLimit-Reset": String(Date.now() + 3600)
                    }
                });
            }));
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _react1.waitFor)(()=>{
                expect(_react1.screen.getByText(/rate limit exceeded/i)).toBeInTheDocument();
                expect(_react1.screen.getByText(/please try again later/i)).toBeInTheDocument();
            });
            expect(_react1.screen.getByRole("button", {
                name: /try again/i
            })).toBeInTheDocument();
        });
    });
    describe("Accessibility", ()=>{
        it("has proper ARIA labels and roles", async ()=>{
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByRole("region", {
                name: /performance metrics/i
            })).toBeInTheDocument();
            expect(_react1.screen.getByRole("button", {
                name: /refresh metrics/i
            })).toBeInTheDocument();
            const charts = _react1.screen.getAllByRole("img", {
                name: /performance chart/i
            });
            expect(charts.length).toBeGreaterThan(0);
        });
        it("supports keyboard navigation", async ()=>{
            const user = _userevent.default.setup();
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            const refreshButton = _react1.screen.getByRole("button", {
                name: /refresh/i
            });
            refreshButton.focus();
            await user.keyboard("{Enter}");
            expect(_react1.screen.getByTestId("loading-spinner")).toBeInTheDocument();
        });
    });
    describe("Responsive Design", ()=>{
        it("adapts layout for mobile screens", async ()=>{
            // Mock mobile viewport
            Object.defineProperty(window, "innerWidth", {
                value: 375
            });
            Object.defineProperty(window, "innerHeight", {
                value: 667
            });
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByTestId("mobile-layout")).toBeInTheDocument();
            expect(_react1.screen.queryByTestId("desktop-layout")).not.toBeInTheDocument();
        });
        it("shows full layout for desktop screens", async ()=>{
            // Mock desktop viewport
            Object.defineProperty(window, "innerWidth", {
                value: 1920
            });
            Object.defineProperty(window, "innerHeight", {
                value: 1080
            });
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_PerformanceMetrics.PerformanceMetrics, {}));
            await (0, _testutils.waitForLoadingToFinish)();
            expect(_react1.screen.getByTestId("desktop-layout")).toBeInTheDocument();
            expect(_react1.screen.queryByTestId("mobile-layout")).not.toBeInTheDocument();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,