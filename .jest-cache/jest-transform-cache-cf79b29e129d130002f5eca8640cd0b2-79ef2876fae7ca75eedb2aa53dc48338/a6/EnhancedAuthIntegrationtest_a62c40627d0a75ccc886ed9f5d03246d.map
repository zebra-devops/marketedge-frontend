{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/__tests__/integration/EnhancedAuthIntegration.test.tsx"],"sourcesContent":["/**\n * Enhanced Auth0 Integration Tests for Multi-Tenant Authentication\n * \n * Test Suite for Issue #4: Enhanced Auth0 Integration\n * Covers frontend authentication flows, tenant context, and route protection\n */\n\nimport React from 'react'\nimport { render, screen, waitFor, fireEvent } from '@testing-library/react'\nimport { jest } from '@jest/globals'\nimport '@testing-library/jest-dom'\n\n// Mock Next.js router\nconst mockPush = jest.fn()\nconst mockReplace = jest.fn()\njest.mock('next/navigation', () => ({\n  useRouter: () => ({\n    push: mockPush,\n    replace: mockReplace,\n    back: jest.fn(),\n  }),\n  useSearchParams: () => ({\n    get: jest.fn().mockReturnValue(null),\n  }),\n  usePathname: () => '/dashboard',\n}))\n\n// Mock auth service\nconst mockAuthService = {\n  getAuth0Url: jest.fn(),\n  login: jest.fn(),\n  logout: jest.fn(),\n  getCurrentUser: jest.fn(),\n  isAuthenticated: jest.fn(),\n  hasPermission: jest.fn(),\n  hasAnyPermission: jest.fn(),\n  getUserPermissions: jest.fn(),\n  getUserRole: jest.fn(),\n  getTenantInfo: jest.fn(),\n  initializeAutoRefresh: jest.fn(),\n  initializeActivityTracking: jest.fn(),\n}\n\njest.mock('@/services/auth', () => ({\n  authService: mockAuthService,\n}))\n\n// Mock toast\njest.mock('react-hot-toast', () => ({\n  __esModule: true,\n  default: {\n    success: jest.fn(),\n    error: jest.fn(),\n  },\n}))\n\nimport LoginPage from '@/app/login/page'\nimport { AuthProvider } from '@/components/providers/AuthProvider'\nimport { useAuth } from '@/hooks/useAuth'\nimport { useRouteProtection } from '@/hooks/useRouteProtection'\nimport DashboardLayout from '@/components/layout/DashboardLayout'\n\ndescribe('Enhanced Auth0 Integration - Phase 1: Tenant Context Enhancement', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  test('should generate Auth0 URL with organization hint', async () => {\n    mockAuthService.getAuth0Url.mockResolvedValue({\n      auth_url: 'https://auth0.com/authorize?organization=acme-corp&scope=openid+profile+email+read:organization+read:roles',\n      redirect_uri: 'http://localhost:3000/login',\n      scopes: ['openid', 'profile', 'email', 'read:organization', 'read:roles'],\n      organization_hint: 'acme-corp'\n    })\n\n    const { container } = render(<LoginPage />)\n    \n    const loginButton = screen.getByText('Sign in with Auth0')\n    fireEvent.click(loginButton)\n\n    await waitFor(() => {\n      expect(mockAuthService.getAuth0Url).toHaveBeenCalledWith(\n        expect.any(String),\n        undefined,\n        undefined\n      )\n    })\n  })\n\n  test('should include tenant-specific scopes in Auth0 URL', async () => {\n    mockAuthService.getAuth0Url.mockResolvedValue({\n      auth_url: 'https://auth0.com/authorize?scope=openid+profile+email+read:organization+read:roles',\n      redirect_uri: 'http://localhost:3000/login',\n      scopes: ['openid', 'profile', 'email', 'read:organization', 'read:roles']\n    })\n\n    const { container } = render(<LoginPage />)\n    \n    const loginButton = screen.getByText('Sign in with Auth0')\n    fireEvent.click(loginButton)\n\n    await waitFor(() => {\n      const call = mockAuthService.getAuth0Url.mock.calls[0]\n      expect(call).toBeDefined()\n    })\n  })\n\n  test('should handle organization hint from URL parameters', async () => {\n    const mockUseSearchParams = require('next/navigation').useSearchParams\n    mockUseSearchParams.mockReturnValue({\n      get: (key: string) => key === 'org' ? 'acme-corp' : null,\n    })\n\n    mockAuthService.getAuth0Url.mockResolvedValue({\n      auth_url: 'https://auth0.com/authorize?organization=acme-corp',\n      redirect_uri: 'http://localhost:3000/login',\n      scopes: ['openid', 'profile', 'email', 'read:organization', 'read:roles'],\n      organization_hint: 'acme-corp'\n    })\n\n    const { container } = render(<LoginPage />)\n    \n    const loginButton = screen.getByText('Sign in with Auth0')\n    fireEvent.click(loginButton)\n\n    await waitFor(() => {\n      expect(mockAuthService.getAuth0Url).toHaveBeenCalledWith(\n        expect.any(String),\n        undefined,\n        'acme-corp'\n      )\n    })\n  })\n})\n\ndescribe('Enhanced Auth0 Integration - Phase 2: Route Protection & Navigation', () => {\n  const mockUser = {\n    id: 'user_123',\n    email: 'user@example.com',\n    first_name: 'John',\n    last_name: 'Doe',\n    role: 'viewer',\n    organisation_id: 'org_123',\n    is_active: true\n  }\n\n  const mockTenant = {\n    id: 'org_123',\n    name: 'Test Organization',\n    industry: 'Technology',\n    subscription_plan: 'basic'\n  }\n\n  const mockPermissions = ['read:market_edge', 'read:dashboard']\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    mockAuthService.isAuthenticated.mockReturnValue(true)\n    mockAuthService.getCurrentUser.mockResolvedValue({\n      user: mockUser,\n      tenant: mockTenant,\n      permissions: mockPermissions,\n      session: { authenticated: true, tenant_isolated: true }\n    })\n    mockAuthService.getUserPermissions.mockReturnValue(mockPermissions)\n    mockAuthService.getUserRole.mockReturnValue('viewer')\n    mockAuthService.hasAnyPermission.mockReturnValue(true)\n  })\n\n  test('should render role-based navigation items', async () => {\n    const TestComponent = () => {\n      const { user, tenant, permissions } = useAuth()\n      \n      return (\n        <div>\n          <div data-testid=\"user-role\">{user?.role}</div>\n          <div data-testid=\"tenant-name\">{tenant?.name}</div>\n          <div data-testid=\"permissions-count\">{permissions?.length}</div>\n        </div>\n      )\n    }\n\n    const WrappedComponent = () => (\n      <AuthProvider>\n        <TestComponent />\n      </AuthProvider>\n    )\n\n    render(<WrappedComponent />)\n\n    await waitFor(() => {\n      expect(screen.getByTestId('user-role')).toHaveTextContent('viewer')\n      expect(screen.getByTestId('tenant-name')).toHaveTextContent('Test Organization')\n    })\n  })\n\n  test('should validate tenant access correctly', async () => {\n    const TestRouteProtection = () => {\n      const protection = useRouteProtection({\n        requireAuth: true,\n        requiredTenant: 'org_123',\n        requiredPermissions: ['read:market_edge']\n      })\n\n      return (\n        <div>\n          <div data-testid=\"is-authorized\">{protection.isAuthorized ? 'yes' : 'no'}</div>\n          <div data-testid=\"is-loading\">{protection.isLoading ? 'yes' : 'no'}</div>\n        </div>\n      )\n    }\n\n    render(<TestRouteProtection />)\n\n    await waitFor(() => {\n      expect(screen.getByTestId('is-authorized')).toHaveTextContent('yes')\n      expect(screen.getByTestId('is-loading')).toHaveTextContent('no')\n    })\n  })\n\n  test('should deny access on tenant mismatch', async () => {\n    const TestRouteProtection = () => {\n      const protection = useRouteProtection({\n        requireAuth: true,\n        requiredTenant: 'different_org',\n        requiredPermissions: ['read:market_edge']\n      })\n\n      return (\n        <div>\n          <div data-testid=\"is-authorized\">{protection.isAuthorized ? 'yes' : 'no'}</div>\n        </div>\n      )\n    }\n\n    render(<TestRouteProtection />)\n\n    await waitFor(() => {\n      expect(screen.getByTestId('is-authorized')).toHaveTextContent('no')\n      expect(mockPush).toHaveBeenCalledWith('/unauthorized?reason=tenant_mismatch')\n    })\n  })\n\n  test('should render dashboard with tenant context', async () => {\n    const MockDashboardContent = () => <div data-testid=\"dashboard-content\">Dashboard Content</div>\n\n    const TestDashboard = () => (\n      <AuthProvider>\n        <DashboardLayout>\n          <MockDashboardContent />\n        </DashboardLayout>\n      </AuthProvider>\n    )\n\n    render(<TestDashboard />)\n\n    await waitFor(() => {\n      expect(screen.getByTestId('dashboard-content')).toBeInTheDocument()\n      expect(screen.getByText('Test Organization')).toBeInTheDocument()\n      expect(screen.getByText('Technology â€¢ basic')).toBeInTheDocument()\n    })\n  })\n})\n\ndescribe('Enhanced Auth0 Integration - Phase 3: Security Enhancements', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n  })\n\n  test('should initialize automatic token refresh', () => {\n    mockAuthService.isAuthenticated.mockReturnValue(true)\n    \n    // Mock the auth service initialization\n    const { authService } = require('@/services/auth')\n    \n    expect(mockAuthService.initializeAutoRefresh).toHaveBeenCalled()\n    expect(mockAuthService.initializeActivityTracking).toHaveBeenCalled()\n  })\n\n  test('should handle session timeout correctly', async () => {\n    mockAuthService.checkSessionTimeout = jest.fn().mockReturnValue(true)\n    mockAuthService.logout = jest.fn()\n\n    // Simulate session timeout check\n    if (mockAuthService.checkSessionTimeout()) {\n      await mockAuthService.logout()\n    }\n\n    expect(mockAuthService.logout).toHaveBeenCalled()\n  })\n\n  test('should perform complete session cleanup on logout', async () => {\n    const mockPerformCompleteSessionCleanup = jest.fn()\n    mockAuthService.performCompleteSessionCleanup = mockPerformCompleteSessionCleanup\n    mockAuthService.logout.mockImplementation(async () => {\n      mockPerformCompleteSessionCleanup()\n    })\n\n    await mockAuthService.logout()\n\n    expect(mockPerformCompleteSessionCleanup).toHaveBeenCalled()\n  })\n\n  test('should track user activity', () => {\n    // Mock activity tracking\n    const mockTrackUserActivity = jest.fn()\n    mockAuthService.trackUserActivity = mockTrackUserActivity\n\n    // Simulate user activity\n    fireEvent.click(document.body)\n\n    // In real implementation, this would be triggered by activity events\n    mockTrackUserActivity()\n\n    expect(mockTrackUserActivity).toHaveBeenCalled()\n  })\n})\n\ndescribe('Enhanced Auth0 Integration - Integration Tests', () => {\n  test('should handle complete login flow with tenant context', async () => {\n    const mockLoginResponse = {\n      user: {\n        id: 'user_123',\n        email: 'user@example.com',\n        role: 'viewer'\n      },\n      tenant: {\n        id: 'org_123',\n        name: 'Test Organization',\n        industry: 'Technology'\n      },\n      permissions: ['read:market_edge']\n    }\n\n    mockAuthService.login.mockResolvedValue(mockLoginResponse)\n    mockAuthService.isAuthenticated.mockReturnValue(false).mockReturnValueOnce(true)\n\n    const TestLoginFlow = () => {\n      const { login, user, tenant } = useAuth()\n\n      const handleLogin = async () => {\n        await login({\n          code: 'auth_code',\n          redirect_uri: 'http://localhost:3000/login'\n        })\n      }\n\n      return (\n        <div>\n          <button onClick={handleLogin} data-testid=\"login-button\">\n            Login\n          </button>\n          {user && <div data-testid=\"user-email\">{user.email}</div>}\n          {tenant && <div data-testid=\"tenant-name\">{tenant.name}</div>}\n        </div>\n      )\n    }\n\n    const WrappedComponent = () => (\n      <AuthProvider>\n        <TestLoginFlow />\n      </AuthProvider>\n    )\n\n    render(<WrappedComponent />)\n\n    const loginButton = screen.getByTestId('login-button')\n    fireEvent.click(loginButton)\n\n    await waitFor(() => {\n      expect(mockAuthService.login).toHaveBeenCalledWith({\n        code: 'auth_code',\n        redirect_uri: 'http://localhost:3000/login'\n      })\n    })\n  })\n\n  test('should handle authentication errors gracefully', async () => {\n    mockAuthService.login.mockRejectedValue(new Error('Authentication failed'))\n\n    const TestErrorHandling = () => {\n      const { login } = useAuth()\n\n      const handleLogin = async () => {\n        try {\n          await login({\n            code: 'invalid_code',\n            redirect_uri: 'http://localhost:3000/login'\n          })\n        } catch (error) {\n          // Error should be handled by the auth hook\n        }\n      }\n\n      return (\n        <button onClick={handleLogin} data-testid=\"login-button\">\n          Login\n        </button>\n      )\n    }\n\n    const WrappedComponent = () => (\n      <AuthProvider>\n        <TestErrorHandling />\n      </AuthProvider>\n    )\n\n    render(<WrappedComponent />)\n\n    const loginButton = screen.getByTestId('login-button')\n    fireEvent.click(loginButton)\n\n    await waitFor(() => {\n      expect(mockAuthService.login).toHaveBeenCalled()\n    })\n  })\n})\n\ndescribe('Enhanced Auth0 Integration - Performance Tests', () => {\n  test('should complete authentication within 2 seconds', async () => {\n    const startTime = Date.now()\n    \n    mockAuthService.login.mockImplementation(async () => {\n      // Simulate processing time\n      await new Promise(resolve => setTimeout(resolve, 100))\n      return {\n        user: { id: 'user_123', email: 'user@example.com' },\n        tenant: { id: 'org_123', name: 'Test Org' },\n        permissions: ['read:dashboard']\n      }\n    })\n\n    await mockAuthService.login({\n      code: 'auth_code',\n      redirect_uri: 'http://localhost:3000/login'\n    })\n\n    const endTime = Date.now()\n    const duration = endTime - startTime\n\n    expect(duration).toBeLessThan(2000) // Less than 2 seconds\n  })\n\n  test('should handle token refresh efficiently', async () => {\n    mockAuthService.refreshToken = jest.fn().mockResolvedValue({\n      access_token: 'new_token',\n      refresh_token: 'new_refresh_token'\n    })\n\n    const startTime = Date.now()\n    await mockAuthService.refreshToken()\n    const endTime = Date.now()\n    const duration = endTime - startTime\n\n    expect(duration).toBeLessThan(1000) // Less than 1 second for token refresh\n  })\n})"],"names":["mockPush","jest","fn","mockReplace","mock","useRouter","push","replace","back","useSearchParams","get","mockReturnValue","usePathname","mockAuthService","getAuth0Url","login","logout","getCurrentUser","isAuthenticated","hasPermission","hasAnyPermission","getUserPermissions","getUserRole","getTenantInfo","initializeAutoRefresh","initializeActivityTracking","authService","__esModule","default","success","error","describe","beforeEach","clearAllMocks","test","mockResolvedValue","auth_url","redirect_uri","scopes","organization_hint","container","render","LoginPage","loginButton","screen","getByText","fireEvent","click","waitFor","expect","toHaveBeenCalledWith","any","String","undefined","call","calls","toBeDefined","mockUseSearchParams","require","key","mockUser","id","email","first_name","last_name","role","organisation_id","is_active","mockTenant","name","industry","subscription_plan","mockPermissions","user","tenant","permissions","session","authenticated","tenant_isolated","TestComponent","useAuth","div","data-testid","length","WrappedComponent","AuthProvider","getByTestId","toHaveTextContent","TestRouteProtection","protection","useRouteProtection","requireAuth","requiredTenant","requiredPermissions","isAuthorized","isLoading","MockDashboardContent","TestDashboard","DashboardLayout","toBeInTheDocument","toHaveBeenCalled","checkSessionTimeout","mockPerformCompleteSessionCleanup","performCompleteSessionCleanup","mockImplementation","mockTrackUserActivity","trackUserActivity","document","body","mockLoginResponse","mockReturnValueOnce","TestLoginFlow","handleLogin","code","button","onClick","mockRejectedValue","Error","TestErrorHandling","startTime","Date","now","Promise","resolve","setTimeout","endTime","duration","toBeLessThan","refreshToken","access_token","refresh_token"],"mappings":"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"}