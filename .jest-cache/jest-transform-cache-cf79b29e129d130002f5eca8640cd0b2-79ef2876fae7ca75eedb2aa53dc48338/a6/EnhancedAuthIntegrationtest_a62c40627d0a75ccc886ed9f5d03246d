5845a3802a16d437592ee712618c3e3d
/**
 * Enhanced Auth0 Integration Tests for Multi-Tenant Authentication
 * 
 * Test Suite for Issue #4: Enhanced Auth0 Integration
 * Covers frontend authentication flows, tenant context, and route protection
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = require("@testing-library/react");
const _globals = require("@jest/globals");
require("@testing-library/jest-dom");
const _page = /*#__PURE__*/ _interop_require_default(require("../../app/login/page"));
const _AuthProvider = require("../../components/providers/AuthProvider");
const _useAuth = require("../../hooks/useAuth");
const _useRouteProtection = require("../../hooks/useRouteProtection");
const _DashboardLayout = /*#__PURE__*/ _interop_require_default(require("../../components/layout/DashboardLayout"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock Next.js router
const mockPush = _globals.jest.fn();
const mockReplace = _globals.jest.fn();
_globals.jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: mockPush,
                replace: mockReplace,
                back: _globals.jest.fn()
            }),
        useSearchParams: ()=>({
                get: _globals.jest.fn().mockReturnValue(null)
            }),
        usePathname: ()=>"/dashboard"
    }));
// Mock auth service
const mockAuthService = {
    getAuth0Url: _globals.jest.fn(),
    login: _globals.jest.fn(),
    logout: _globals.jest.fn(),
    getCurrentUser: _globals.jest.fn(),
    isAuthenticated: _globals.jest.fn(),
    hasPermission: _globals.jest.fn(),
    hasAnyPermission: _globals.jest.fn(),
    getUserPermissions: _globals.jest.fn(),
    getUserRole: _globals.jest.fn(),
    getTenantInfo: _globals.jest.fn(),
    initializeAutoRefresh: _globals.jest.fn(),
    initializeActivityTracking: _globals.jest.fn()
};
_globals.jest.mock("@/services/auth", ()=>({
        authService: mockAuthService
    }));
// Mock toast
_globals.jest.mock("react-hot-toast", ()=>({
        __esModule: true,
        default: {
            success: _globals.jest.fn(),
            error: _globals.jest.fn()
        }
    }));
describe("Enhanced Auth0 Integration - Phase 1: Tenant Context Enhancement", ()=>{
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
    });
    test("should generate Auth0 URL with organization hint", async ()=>{
        mockAuthService.getAuth0Url.mockResolvedValue({
            auth_url: "https://auth0.com/authorize?organization=acme-corp&scope=openid+profile+email+read:organization+read:roles",
            redirect_uri: "http://localhost:3000/login",
            scopes: [
                "openid",
                "profile",
                "email",
                "read:organization",
                "read:roles"
            ],
            organization_hint: "acme-corp"
        });
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        const loginButton = _react1.screen.getByText("Sign in with Auth0");
        _react1.fireEvent.click(loginButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockAuthService.getAuth0Url).toHaveBeenCalledWith(expect.any(String), undefined, undefined);
        });
    });
    test("should include tenant-specific scopes in Auth0 URL", async ()=>{
        mockAuthService.getAuth0Url.mockResolvedValue({
            auth_url: "https://auth0.com/authorize?scope=openid+profile+email+read:organization+read:roles",
            redirect_uri: "http://localhost:3000/login",
            scopes: [
                "openid",
                "profile",
                "email",
                "read:organization",
                "read:roles"
            ]
        });
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        const loginButton = _react1.screen.getByText("Sign in with Auth0");
        _react1.fireEvent.click(loginButton);
        await (0, _react1.waitFor)(()=>{
            const call = mockAuthService.getAuth0Url.mock.calls[0];
            expect(call).toBeDefined();
        });
    });
    test("should handle organization hint from URL parameters", async ()=>{
        const mockUseSearchParams = require("next/navigation").useSearchParams;
        mockUseSearchParams.mockReturnValue({
            get: (key)=>key === "org" ? "acme-corp" : null
        });
        mockAuthService.getAuth0Url.mockResolvedValue({
            auth_url: "https://auth0.com/authorize?organization=acme-corp",
            redirect_uri: "http://localhost:3000/login",
            scopes: [
                "openid",
                "profile",
                "email",
                "read:organization",
                "read:roles"
            ],
            organization_hint: "acme-corp"
        });
        const { container } = (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_page.default, {}));
        const loginButton = _react1.screen.getByText("Sign in with Auth0");
        _react1.fireEvent.click(loginButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockAuthService.getAuth0Url).toHaveBeenCalledWith(expect.any(String), undefined, "acme-corp");
        });
    });
});
describe("Enhanced Auth0 Integration - Phase 2: Route Protection & Navigation", ()=>{
    const mockUser = {
        id: "user_123",
        email: "user@example.com",
        first_name: "John",
        last_name: "Doe",
        role: "viewer",
        organisation_id: "org_123",
        is_active: true
    };
    const mockTenant = {
        id: "org_123",
        name: "Test Organization",
        industry: "Technology",
        subscription_plan: "basic"
    };
    const mockPermissions = [
        "read:market_edge",
        "read:dashboard"
    ];
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
        mockAuthService.isAuthenticated.mockReturnValue(true);
        mockAuthService.getCurrentUser.mockResolvedValue({
            user: mockUser,
            tenant: mockTenant,
            permissions: mockPermissions,
            session: {
                authenticated: true,
                tenant_isolated: true
            }
        });
        mockAuthService.getUserPermissions.mockReturnValue(mockPermissions);
        mockAuthService.getUserRole.mockReturnValue("viewer");
        mockAuthService.hasAnyPermission.mockReturnValue(true);
    });
    test("should render role-based navigation items", async ()=>{
        const TestComponent = ()=>{
            const { user, tenant, permissions } = (0, _useAuth.useAuth)();
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "user-role",
                        children: user?.role
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "tenant-name",
                        children: tenant?.name
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "permissions-count",
                        children: permissions?.length
                    })
                ]
            });
        };
        const WrappedComponent = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthProvider.AuthProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestComponent, {})
            });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WrappedComponent, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId("user-role")).toHaveTextContent("viewer");
            expect(_react1.screen.getByTestId("tenant-name")).toHaveTextContent("Test Organization");
        });
    });
    test("should validate tenant access correctly", async ()=>{
        const TestRouteProtection = ()=>{
            const protection = (0, _useRouteProtection.useRouteProtection)({
                requireAuth: true,
                requiredTenant: "org_123",
                requiredPermissions: [
                    "read:market_edge"
                ]
            });
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "is-authorized",
                        children: protection.isAuthorized ? "yes" : "no"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "is-loading",
                        children: protection.isLoading ? "yes" : "no"
                    })
                ]
            });
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestRouteProtection, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId("is-authorized")).toHaveTextContent("yes");
            expect(_react1.screen.getByTestId("is-loading")).toHaveTextContent("no");
        });
    });
    test("should deny access on tenant mismatch", async ()=>{
        const TestRouteProtection = ()=>{
            const protection = (0, _useRouteProtection.useRouteProtection)({
                requireAuth: true,
                requiredTenant: "different_org",
                requiredPermissions: [
                    "read:market_edge"
                ]
            });
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "is-authorized",
                    children: protection.isAuthorized ? "yes" : "no"
                })
            });
        };
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestRouteProtection, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId("is-authorized")).toHaveTextContent("no");
            expect(mockPush).toHaveBeenCalledWith("/unauthorized?reason=tenant_mismatch");
        });
    });
    test("should render dashboard with tenant context", async ()=>{
        const MockDashboardContent = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "dashboard-content",
                children: "Dashboard Content"
            });
        const TestDashboard = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthProvider.AuthProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_DashboardLayout.default, {
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockDashboardContent, {})
                })
            });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestDashboard, {}));
        await (0, _react1.waitFor)(()=>{
            expect(_react1.screen.getByTestId("dashboard-content")).toBeInTheDocument();
            expect(_react1.screen.getByText("Test Organization")).toBeInTheDocument();
            expect(_react1.screen.getByText("Technology • basic")).toBeInTheDocument();
        });
    });
});
describe("Enhanced Auth0 Integration - Phase 3: Security Enhancements", ()=>{
    beforeEach(()=>{
        _globals.jest.clearAllMocks();
    });
    test("should initialize automatic token refresh", ()=>{
        mockAuthService.isAuthenticated.mockReturnValue(true);
        // Mock the auth service initialization
        const { authService } = require("@/services/auth");
        expect(mockAuthService.initializeAutoRefresh).toHaveBeenCalled();
        expect(mockAuthService.initializeActivityTracking).toHaveBeenCalled();
    });
    test("should handle session timeout correctly", async ()=>{
        mockAuthService.checkSessionTimeout = _globals.jest.fn().mockReturnValue(true);
        mockAuthService.logout = _globals.jest.fn();
        // Simulate session timeout check
        if (mockAuthService.checkSessionTimeout()) {
            await mockAuthService.logout();
        }
        expect(mockAuthService.logout).toHaveBeenCalled();
    });
    test("should perform complete session cleanup on logout", async ()=>{
        const mockPerformCompleteSessionCleanup = _globals.jest.fn();
        mockAuthService.performCompleteSessionCleanup = mockPerformCompleteSessionCleanup;
        mockAuthService.logout.mockImplementation(async ()=>{
            mockPerformCompleteSessionCleanup();
        });
        await mockAuthService.logout();
        expect(mockPerformCompleteSessionCleanup).toHaveBeenCalled();
    });
    test("should track user activity", ()=>{
        // Mock activity tracking
        const mockTrackUserActivity = _globals.jest.fn();
        mockAuthService.trackUserActivity = mockTrackUserActivity;
        // Simulate user activity
        _react1.fireEvent.click(document.body);
        // In real implementation, this would be triggered by activity events
        mockTrackUserActivity();
        expect(mockTrackUserActivity).toHaveBeenCalled();
    });
});
describe("Enhanced Auth0 Integration - Integration Tests", ()=>{
    test("should handle complete login flow with tenant context", async ()=>{
        const mockLoginResponse = {
            user: {
                id: "user_123",
                email: "user@example.com",
                role: "viewer"
            },
            tenant: {
                id: "org_123",
                name: "Test Organization",
                industry: "Technology"
            },
            permissions: [
                "read:market_edge"
            ]
        };
        mockAuthService.login.mockResolvedValue(mockLoginResponse);
        mockAuthService.isAuthenticated.mockReturnValue(false).mockReturnValueOnce(true);
        const TestLoginFlow = ()=>{
            const { login, user, tenant } = (0, _useAuth.useAuth)();
            const handleLogin = async ()=>{
                await login({
                    code: "auth_code",
                    redirect_uri: "http://localhost:3000/login"
                });
            };
            return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                        onClick: handleLogin,
                        "data-testid": "login-button",
                        children: "Login"
                    }),
                    user && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "user-email",
                        children: user.email
                    }),
                    tenant && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        "data-testid": "tenant-name",
                        children: tenant.name
                    })
                ]
            });
        };
        const WrappedComponent = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthProvider.AuthProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestLoginFlow, {})
            });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WrappedComponent, {}));
        const loginButton = _react1.screen.getByTestId("login-button");
        _react1.fireEvent.click(loginButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockAuthService.login).toHaveBeenCalledWith({
                code: "auth_code",
                redirect_uri: "http://localhost:3000/login"
            });
        });
    });
    test("should handle authentication errors gracefully", async ()=>{
        mockAuthService.login.mockRejectedValue(new Error("Authentication failed"));
        const TestErrorHandling = ()=>{
            const { login } = (0, _useAuth.useAuth)();
            const handleLogin = async ()=>{
                try {
                    await login({
                        code: "invalid_code",
                        redirect_uri: "http://localhost:3000/login"
                    });
                } catch (error) {
                // Error should be handled by the auth hook
                }
            };
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: handleLogin,
                "data-testid": "login-button",
                children: "Login"
            });
        };
        const WrappedComponent = ()=>/*#__PURE__*/ (0, _jsxruntime.jsx)(_AuthProvider.AuthProvider, {
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(TestErrorHandling, {})
            });
        (0, _react1.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(WrappedComponent, {}));
        const loginButton = _react1.screen.getByTestId("login-button");
        _react1.fireEvent.click(loginButton);
        await (0, _react1.waitFor)(()=>{
            expect(mockAuthService.login).toHaveBeenCalled();
        });
    });
});
describe("Enhanced Auth0 Integration - Performance Tests", ()=>{
    test("should complete authentication within 2 seconds", async ()=>{
        const startTime = Date.now();
        mockAuthService.login.mockImplementation(async ()=>{
            // Simulate processing time
            await new Promise((resolve)=>setTimeout(resolve, 100));
            return {
                user: {
                    id: "user_123",
                    email: "user@example.com"
                },
                tenant: {
                    id: "org_123",
                    name: "Test Org"
                },
                permissions: [
                    "read:dashboard"
                ]
            };
        });
        await mockAuthService.login({
            code: "auth_code",
            redirect_uri: "http://localhost:3000/login"
        });
        const endTime = Date.now();
        const duration = endTime - startTime;
        expect(duration).toBeLessThan(2000) // Less than 2 seconds
        ;
    });
    test("should handle token refresh efficiently", async ()=>{
        mockAuthService.refreshToken = _globals.jest.fn().mockResolvedValue({
            access_token: "new_token",
            refresh_token: "new_refresh_token"
        });
        const startTime = Date.now();
        await mockAuthService.refreshToken();
        const endTime = Date.now();
        const duration = endTime - startTime;
        expect(duration).toBeLessThan(1000) // Less than 1 second for token refresh
        ;
    });
});

//# sourceMappingURL=data:application/json;base64,