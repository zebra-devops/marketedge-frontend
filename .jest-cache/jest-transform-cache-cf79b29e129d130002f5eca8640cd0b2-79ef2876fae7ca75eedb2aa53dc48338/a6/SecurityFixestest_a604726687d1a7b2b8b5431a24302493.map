{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/__tests__/security/SecurityFixes.test.tsx"],"sourcesContent":["/**\n * Frontend Security Tests for Issue #4 Critical Security Fixes\n * \n * Tests for:\n * 1. Client-side input validation\n * 2. Secure cookie handling\n * 3. XSS prevention\n * 4. CSRF protection\n * 5. Session security\n */\n\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react'\nimport { jest } from '@jest/globals'\nimport { authService } from '@/services/auth'\nimport { authenticatedFetch, getAuthHeaders, logout } from '@/lib/auth'\n\n// Mock fetch for testing\nconst mockFetch = jest.fn()\nglobal.fetch = mockFetch\n\n// Mock cookies for testing\nconst mockCookies = {\n  get: jest.fn(),\n  set: jest.fn(),\n  remove: jest.fn(),\n}\n\njest.mock('js-cookie', () => mockCookies)\n\ndescribe('Frontend Security Fixes', () => {\n  beforeEach(() => {\n    jest.clearAllMocks()\n    mockFetch.mockClear()\n    \n    // Reset localStorage\n    Object.defineProperty(window, 'localStorage', {\n      value: {\n        getItem: jest.fn(),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n        clear: jest.fn(),\n      },\n      writable: true,\n    })\n    \n    // Reset sessionStorage\n    Object.defineProperty(window, 'sessionStorage', {\n      value: {\n        getItem: jest.fn(),\n        setItem: jest.fn(),\n        removeItem: jest.fn(),\n        clear: jest.fn(),\n      },\n      writable: true,\n    })\n  })\n\n  describe('Input Validation & XSS Prevention', () => {\n    test('should sanitize malicious input in login parameters', async () => {\n      const maliciousCode = \"<script>alert('xss')</script>xyz123\"\n      const maliciousRedirect = \"javascript:alert('xss')\"\n      const maliciousState = \"'; DROP TABLE users; --\"\n\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 400,\n        json: async () => ({ detail: 'Invalid request parameters' }),\n      })\n\n      try {\n        await authService.login({\n          code: maliciousCode,\n          redirect_uri: maliciousRedirect,\n          state: maliciousState,\n        })\n      } catch (error) {\n        // Should reject malicious input\n        expect(error).toBeDefined()\n      }\n\n      // Verify the request was made with the data\n      expect(mockFetch).toHaveBeenCalledWith(\n        expect.stringContaining('/auth/login'),\n        expect.objectContaining({\n          method: 'POST',\n          body: expect.stringContaining(maliciousCode),\n        })\n      )\n    })\n\n    test('should escape HTML entities in user data display', () => {\n      const maliciousUserData = {\n        id: '123',\n        email: 'test@example.com',\n        first_name: \"<script>alert('xss')</script>John\",\n        last_name: \"<img src=x onerror=alert('xss')>Doe\",\n        role: 'viewer',\n        organisation_id: '456',\n        is_active: true,\n      }\n\n      // Mock localStorage to return malicious user data\n      const mockGetItem = window.localStorage.getItem as jest.Mock\n      mockGetItem.mockReturnValue(JSON.stringify(maliciousUserData))\n\n      // Test that user data is properly escaped when retrieved\n      const userData = authService['getStoredUser']()\n      \n      // The actual escaping would happen in the UI components\n      // This test verifies the data structure is maintained\n      expect(userData?.first_name).toBe(\"<script>alert('xss')</script>John\")\n      expect(userData?.last_name).toBe(\"<img src=x onerror=alert('xss')>Doe\")\n    })\n\n    test('should validate redirect URI format', async () => {\n      const maliciousRedirectUris = [\n        'javascript:alert(\"xss\")',\n        'data:text/html,<script>alert(\"xss\")</script>',\n        'vbscript:msgbox(\"xss\")',\n        'file:///etc/passwd',\n      ]\n\n      for (const uri of maliciousRedirectUris) {\n        mockFetch.mockResolvedValueOnce({\n          ok: false,\n          status: 400,\n          json: async () => ({ detail: 'Invalid redirect URI' }),\n        })\n\n        const response = await authService.getAuth0Url(uri)\n        \n        // Should handle invalid URIs appropriately\n        expect(mockFetch).toHaveBeenCalled()\n      }\n    })\n  })\n\n  describe('Secure Cookie Handling', () => {\n    test('should handle secure cookies properly', () => {\n      // Mock cookies.get to return a token\n      mockCookies.get.mockReturnValue('valid_token_123')\n\n      const token = authService.getToken()\n      \n      expect(mockCookies.get).toHaveBeenCalledWith('access_token')\n      expect(token).toBe('valid_token_123')\n    })\n\n    test('should clear all authentication cookies on logout', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ message: 'Logout successful' }),\n      })\n\n      // Mock window.location.href assignment\n      Object.defineProperty(window, 'location', {\n        value: { href: '' },\n        writable: true,\n      })\n\n      await authService.logout()\n\n      // Verify cookies are removed\n      expect(mockCookies.remove).toHaveBeenCalledWith('access_token')\n      expect(mockCookies.remove).toHaveBeenCalledWith('refresh_token')\n    })\n\n    test('should perform complete session cleanup on logout', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ message: 'Logout successful' }),\n      })\n\n      Object.defineProperty(window, 'location', {\n        value: { href: '' },\n        writable: true,\n      })\n\n      // Mock intervals for cleanup\n      const mockInterval = 123\n      ;(window as any).__authRefreshInterval = mockInterval\n      ;(window as any).__sessionTimeoutInterval = mockInterval\n      \n      const clearIntervalSpy = jest.spyOn(global, 'clearInterval')\n\n      await authService.logout()\n\n      // Verify complete cleanup\n      expect(window.localStorage.removeItem).toHaveBeenCalledWith('current_user')\n      expect(window.localStorage.removeItem).toHaveBeenCalledWith('tenant_info')\n      expect(window.localStorage.removeItem).toHaveBeenCalledWith('user_permissions')\n      expect(window.sessionStorage.clear).toHaveBeenCalled()\n      expect(clearIntervalSpy).toHaveBeenCalledWith(mockInterval)\n    })\n  })\n\n  describe('CSRF Protection', () => {\n    test('should include CSRF token in authenticated requests', async () => {\n      mockCookies.get.mockImplementation((name: string) => {\n        if (name === 'access_token') return 'valid_token_123'\n        if (name === 'csrf_token') return 'csrf_token_456'\n        return undefined\n      })\n\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true }),\n      })\n\n      await authenticatedFetch('/api/test', {\n        method: 'POST',\n        body: JSON.stringify({ data: 'test' }),\n      })\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/test',\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'Authorization': 'Bearer valid_token_123',\n            'X-Tenant-Context': 'isolated',\n            'X-Client-Version': '1.0.0',\n          }),\n          credentials: 'include',\n        })\n      )\n    })\n\n    test('should handle CSRF token validation failures', async () => {\n      mockCookies.get.mockImplementation((name: string) => {\n        if (name === 'access_token') return 'valid_token_123'\n        return undefined\n      })\n\n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 403,\n        headers: new Headers({\n          'X-CSRF-Error': 'Invalid CSRF token',\n        }),\n      })\n\n      try {\n        await authenticatedFetch('/api/test', { method: 'POST' })\n      } catch (error: any) {\n        expect(error.message).toContain('Insufficient permissions')\n      }\n    })\n  })\n\n  describe('Session Security', () => {\n    test('should detect and handle session timeout', () => {\n      const authInstance = authService\n      const thirtyOneMinutesAgo = Date.now() - (31 * 60 * 1000)\n      \n      // Mock lastActivityTime\n      authInstance['lastActivityTime'] = thirtyOneMinutesAgo\n\n      const isTimedOut = authInstance.checkSessionTimeout()\n      expect(isTimedOut).toBe(true)\n    })\n\n    test('should track user activity properly', () => {\n      const authInstance = authService\n      const beforeActivity = authInstance['lastActivityTime']\n      \n      // Simulate user activity\n      authInstance.trackUserActivity()\n      \n      const afterActivity = authInstance['lastActivityTime']\n      expect(afterActivity).toBeGreaterThan(beforeActivity)\n    })\n\n    test('should initialize activity tracking with event listeners', () => {\n      const addEventListenerSpy = jest.spyOn(document, 'addEventListener')\n      \n      authService.initializeActivityTracking()\n      \n      // Verify activity events are being tracked\n      const expectedEvents = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click']\n      expectedEvents.forEach(event => {\n        expect(addEventListenerSpy).toHaveBeenCalledWith(\n          event,\n          expect.any(Function),\n          { passive: true }\n        )\n      })\n    })\n\n    test('should handle token refresh with concurrent request prevention', async () => {\n      mockCookies.get.mockReturnValue('refresh_token_123')\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({\n          access_token: 'new_access_token',\n          refresh_token: 'new_refresh_token',\n          token_type: 'bearer',\n          expires_in: 3600,\n          user: { id: '1', email: 'test@example.com' },\n          tenant: { id: '1', name: 'Test Org' },\n          permissions: ['read:data'],\n        }),\n      })\n\n      // Make concurrent refresh requests\n      const promise1 = authService.refreshToken()\n      const promise2 = authService.refreshToken()\n\n      const [result1, result2] = await Promise.all([promise1, promise2])\n\n      // Both should resolve to the same token\n      expect(result1).toEqual(result2)\n      // Only one HTTP request should be made\n      expect(mockFetch).toHaveBeenCalledTimes(1)\n    })\n  })\n\n  describe('Authentication Error Handling', () => {\n    test('should handle 401 responses with proper cleanup', async () => {\n      mockCookies.get.mockReturnValue('expired_token')\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 401,\n        headers: new Headers({\n          'X-Tenant-Error': 'Token expired',\n        }),\n      })\n\n      Object.defineProperty(window, 'location', {\n        value: { href: '' },\n        writable: true,\n      })\n\n      try {\n        await authenticatedFetch('/api/test')\n      } catch (error: any) {\n        expect(error.message).toContain('Authentication failed')\n      }\n\n      // Should redirect to login\n      expect(window.location.href).toBe('/login')\n    })\n\n    test('should handle tenant isolation violations', async () => {\n      mockCookies.get.mockReturnValue('valid_token')\n      \n      mockFetch.mockResolvedValueOnce({\n        ok: false,\n        status: 422,\n        headers: new Headers({\n          'X-Tenant-Violation': 'Cross-tenant access denied',\n        }),\n      })\n\n      try {\n        await authenticatedFetch('/api/test')\n      } catch (error: any) {\n        expect(error.message).toContain('Tenant isolation violation')\n      }\n    })\n\n    test('should handle network errors gracefully', async () => {\n      mockCookies.get.mockReturnValue('valid_token')\n      mockFetch.mockRejectedValueOnce(new Error('Network error'))\n\n      try {\n        await authenticatedFetch('/api/test')\n      } catch (error: any) {\n        expect(error.message).toContain('Request failed: Network error')\n      }\n    })\n  })\n\n  describe('Tenant Context Security', () => {\n    test('should include tenant isolation headers in requests', async () => {\n      mockCookies.get.mockReturnValue('valid_token')\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ success: true }),\n      })\n\n      await authenticatedFetch('/api/test')\n\n      expect(mockFetch).toHaveBeenCalledWith(\n        '/api/test',\n        expect.objectContaining({\n          headers: expect.objectContaining({\n            'X-Tenant-Context': 'isolated',\n            'X-Request-Source': 'frontend-app',\n          }),\n        })\n      )\n    })\n\n    test('should clear tenant-specific data on logout', async () => {\n      mockFetch.mockResolvedValueOnce({\n        ok: true,\n        json: async () => ({ message: 'Logout successful' }),\n      })\n\n      Object.defineProperty(window, 'location', {\n        value: { href: '' },\n        writable: true,\n      })\n\n      logout()\n\n      // Verify tenant data is cleared\n      expect(window.localStorage.removeItem).toHaveBeenCalledWith('tenant_info')\n      expect(window.localStorage.removeItem).toHaveBeenCalledWith('user_permissions')\n    })\n  })\n\n  describe('Security Performance', () => {\n    test('should handle auth operations efficiently', async () => {\n      const startTime = performance.now()\n      \n      // Simulate multiple auth checks\n      for (let i = 0; i < 100; i++) {\n        authService.isAuthenticated()\n        authService.hasPermission('read:data')\n        authService.getUserRole()\n      }\n      \n      const endTime = performance.now()\n      const duration = endTime - startTime\n      \n      // Should complete quickly\n      expect(duration).toBeLessThan(100) // Less than 100ms\n    })\n  })\n})\n\ndescribe('Security Integration Tests', () => {\n  test('should handle complete authentication flow securely', async () => {\n    // Mock successful Auth0 URL generation\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({\n        auth_url: 'https://domain.auth0.com/authorize?...',\n        redirect_uri: 'https://app.example.com/callback',\n        scopes: ['openid', 'profile', 'email'],\n      }),\n    })\n\n    const authUrl = await authService.getAuth0Url('https://app.example.com/callback')\n    expect(authUrl.auth_url).toContain('https://domain.auth0.com/authorize')\n\n    // Mock successful login\n    mockFetch.mockResolvedValueOnce({\n      ok: true,\n      json: async () => ({\n        access_token: 'secure_token_123',\n        refresh_token: 'refresh_token_456',\n        token_type: 'bearer',\n        expires_in: 3600,\n        user: {\n          id: '1',\n          email: 'test@example.com',\n          first_name: 'Test',\n          last_name: 'User',\n          role: 'viewer',\n        },\n        tenant: {\n          id: '1',\n          name: 'Test Organization',\n          industry: 'Technology',\n        },\n        permissions: ['read:data'],\n      }),\n    })\n\n    const loginResult = await authService.login({\n      code: 'secure_auth_code_123',\n      redirect_uri: 'https://app.example.com/callback',\n      state: 'secure_state_456',\n    })\n\n    expect(loginResult.access_token).toBe('secure_token_123')\n    expect(loginResult.user.email).toBe('test@example.com')\n    expect(loginResult.tenant.name).toBe('Test Organization')\n  })\n})"],"names":["mockFetch","jest","fn","global","fetch","mockCookies","get","set","remove","mock","describe","beforeEach","clearAllMocks","mockClear","Object","defineProperty","window","value","getItem","setItem","removeItem","clear","writable","test","maliciousCode","maliciousRedirect","maliciousState","mockResolvedValueOnce","ok","status","json","detail","authService","login","code","redirect_uri","state","error","expect","toBeDefined","toHaveBeenCalledWith","stringContaining","objectContaining","method","body","maliciousUserData","id","email","first_name","last_name","role","organisation_id","is_active","mockGetItem","localStorage","mockReturnValue","JSON","stringify","userData","toBe","maliciousRedirectUris","uri","response","getAuth0Url","toHaveBeenCalled","token","getToken","message","href","logout","mockInterval","__authRefreshInterval","__sessionTimeoutInterval","clearIntervalSpy","spyOn","sessionStorage","mockImplementation","name","undefined","success","authenticatedFetch","data","headers","credentials","Headers","toContain","authInstance","thirtyOneMinutesAgo","Date","now","isTimedOut","checkSessionTimeout","beforeActivity","trackUserActivity","afterActivity","toBeGreaterThan","addEventListenerSpy","document","initializeActivityTracking","expectedEvents","forEach","event","any","Function","passive","access_token","refresh_token","token_type","expires_in","user","tenant","permissions","promise1","refreshToken","promise2","result1","result2","Promise","all","toEqual","toHaveBeenCalledTimes","location","mockRejectedValueOnce","Error","startTime","performance","i","isAuthenticated","hasPermission","getUserRole","endTime","duration","toBeLessThan","auth_url","scopes","authUrl","industry","loginResult"],"mappings":"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"}