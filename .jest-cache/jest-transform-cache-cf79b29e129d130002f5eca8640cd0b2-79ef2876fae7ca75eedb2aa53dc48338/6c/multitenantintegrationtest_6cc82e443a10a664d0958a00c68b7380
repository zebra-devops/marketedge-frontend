b13fc57bafd39fd456dc8df90b0457d9
/**
 * Multi-Tenant Integration Tests
 * 
 * Comprehensive tests demonstrating multi-tenant behavior across:
 * - Different industries (hotel, cinema, gym)
 * - Various subscription plans (basic, professional, enterprise)
 * - Rate limiting scenarios
 * - Feature flag variations
 * - Cross-tenant isolation
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _testutils = require("../../test-utils");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _jestsetup = require("../../jest.setup");
const _multitenanttesthelpers = require("../../test-utils/multi-tenant-test-helpers");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Mock components for testing
const MockMarketEdgeDashboard = ()=>{
    const [data, setData] = _react.default.useState(null);
    const [loading, setLoading] = _react.default.useState(true);
    const [error, setError] = _react.default.useState(null);
    _react.default.useEffect(()=>{
        const fetchData = async ()=>{
            try {
                const response = await fetch("/api/v1/market-edge/competitors");
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}`);
                }
                const result = await response.json();
                setData(result);
            } catch (err) {
                setError(err instanceof Error ? err.message : "Unknown error");
            } finally{
                setLoading(false);
            }
        };
        fetchData();
    }, []);
    if (loading) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
        children: "Loading market data..."
    });
    if (error) return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        children: [
            "Error: ",
            error
        ]
    });
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "market-edge-dashboard",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("h1", {
                children: "Market Edge Dashboard"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "competitors-count",
                children: [
                    "Competitors: ",
                    data?.competitors?.length || 0
                ]
            }),
            data?.competitors?.map((comp)=>/*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": `competitor-${comp.id}`,
                    children: [
                        comp.name,
                        " (",
                        comp.business_type,
                        ")"
                    ]
                }, comp.id))
        ]
    });
};
const MockRateLimitComponent = ()=>{
    const [requests, setRequests] = _react.default.useState([]);
    const [isRateLimited, setIsRateLimited] = _react.default.useState(false);
    const makeRequest = async ()=>{
        try {
            const response = await fetch("/api/v1/test-rate-limit");
            const result = await response.json();
            if (response.status === 429) {
                setIsRateLimited(true);
                setRequests((prev)=>[
                        ...prev,
                        {
                            error: true,
                            ...result
                        }
                    ]);
            } else {
                setRequests((prev)=>[
                        ...prev,
                        result
                    ]);
            }
        } catch (error) {
            setRequests((prev)=>[
                    ...prev,
                    {
                        error: true,
                        message: "Network error"
                    }
                ]);
        }
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
        "data-testid": "rate-limit-component",
        children: [
            /*#__PURE__*/ (0, _jsxruntime.jsx)("button", {
                onClick: makeRequest,
                "data-testid": "make-request-btn",
                children: "Make API Request"
            }),
            /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                "data-testid": "request-count",
                children: [
                    "Total Requests: ",
                    requests.length
                ]
            }),
            isRateLimited && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                "data-testid": "rate-limited-message",
                children: "Rate limit exceeded!"
            }),
            requests.map((req, idx)=>/*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": `request-${idx}`,
                    children: req.error ? "ERROR" : `Success #${req.request_number}`
                }, idx))
        ]
    });
};
describe("Multi-Tenant Integration Tests", ()=>{
    const user = _userevent.default.setup();
    afterEach(()=>{
        _jestsetup.server.resetHandlers();
    });
    describe("Industry-Specific Behavior", ()=>{
        it("should display hotel-specific features for hotel tenants", async ()=>{
            const hotelScenario = _multitenanttesthelpers.TENANT_SCENARIOS.hotel_professional;
            _jestsetup.server.use(...(0, _multitenanttesthelpers.createTenantHandlers)(hotelScenario));
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdgeDashboard, {}), {
                tenantConfig: {
                    user: hotelScenario.user,
                    industry: "hotel"
                }
            });
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("market-edge-dashboard")).toBeInTheDocument();
            });
            expect(_testutils.screen.getByText("Market Edge Dashboard")).toBeInTheDocument();
            expect(_testutils.screen.getByTestId("competitors-count")).toHaveTextContent("Competitors: 1");
            // Check for hotel-specific competitor
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("competitor-comp-1")).toHaveTextContent("hotel Competitor 1 (hotel)");
            });
        });
        it("should display cinema-specific features for cinema tenants", async ()=>{
            const cinemaScenario = _multitenanttesthelpers.TENANT_SCENARIOS.cinema_professional;
            _jestsetup.server.use(...(0, _multitenanttesthelpers.createTenantHandlers)(cinemaScenario));
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdgeDashboard, {}), {
                tenantConfig: {
                    user: cinemaScenario.user,
                    industry: "cinema"
                }
            });
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("market-edge-dashboard")).toBeInTheDocument();
            });
            // Check for cinema-specific competitor
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("competitor-comp-1")).toHaveTextContent("cinema Competitor 1 (cinema)");
            });
        });
        it("should display gym-specific features for gym tenants", async ()=>{
            const gymScenario = _multitenanttesthelpers.TENANT_SCENARIOS.gym_professional;
            _jestsetup.server.use(...(0, _multitenanttesthelpers.createTenantHandlers)(gymScenario));
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdgeDashboard, {}), {
                tenantConfig: {
                    user: gymScenario.user,
                    industry: "gym"
                }
            });
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("market-edge-dashboard")).toBeInTheDocument();
            });
            // Check for gym-specific competitor
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("competitor-comp-1")).toHaveTextContent("gym Competitor 1 (gym)");
            });
        });
    });
    describe("Subscription Plan Behavior", ()=>{
        it("should enforce basic plan limitations", async ()=>{
            const basicScenario = _multitenanttesthelpers.TENANT_SCENARIOS.hotel_basic;
            _jestsetup.server.use(...(0, _multitenanttesthelpers.createTenantHandlers)(basicScenario));
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdgeDashboard, {}), {
                tenantConfig: {
                    user: basicScenario.user
                }
            });
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("market-edge-dashboard")).toBeInTheDocument();
            });
            // Basic plan should have limited features
            expect(_testutils.screen.queryByTestId("advanced-analytics")).not.toBeInTheDocument();
            expect(_testutils.screen.queryByTestId("predictive-features")).not.toBeInTheDocument();
        });
        it("should enable professional plan features", async ()=>{
            const proScenario = _multitenanttesthelpers.TENANT_SCENARIOS.hotel_professional;
            _jestsetup.server.use(...(0, _multitenanttesthelpers.createTenantHandlers)(proScenario));
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdgeDashboard, {}), {
                tenantConfig: {
                    user: proScenario.user
                }
            });
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("market-edge-dashboard")).toBeInTheDocument();
            });
            // Professional plan should have more features than basic
            expect(_testutils.screen.getByTestId("competitors-count")).toBeInTheDocument();
        });
        it("should enable all enterprise plan features", async ()=>{
            const enterpriseScenario = _multitenanttesthelpers.TENANT_SCENARIOS.hotel_enterprise;
            _jestsetup.server.use(...(0, _multitenanttesthelpers.createTenantHandlers)(enterpriseScenario));
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdgeDashboard, {}), {
                tenantConfig: {
                    user: enterpriseScenario.user
                }
            });
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("market-edge-dashboard")).toBeInTheDocument();
            });
            // Enterprise should have access to all features
            expect(_testutils.screen.getByTestId("competitors-count")).toBeInTheDocument();
        });
    });
    describe("Rate Limiting Behavior", ()=>{
        it("should enforce rate limits for basic plan users", async ()=>{
            const basicScenario = _multitenanttesthelpers.TENANT_SCENARIOS.hotel_basic;
            const rateLimitHelper = new _multitenanttesthelpers.RateLimitTestHelper(basicScenario);
            _jestsetup.server.use(...rateLimitHelper.createRateLimitHandlers());
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockRateLimitComponent, {}), {
                tenantConfig: {
                    user: basicScenario.user
                }
            });
            const makeRequestBtn = _testutils.screen.getByTestId("make-request-btn");
            // Make requests up to the limit (30 for basic plan)
            for(let i = 0; i < 30; i++){
                await user.click(makeRequestBtn);
                await (0, _testutils.waitFor)(()=>{
                    expect(_testutils.screen.getByTestId(`request-${i}`)).toHaveTextContent(`Success #${i + 1}`);
                });
            }
            // Next request should be rate limited
            await user.click(makeRequestBtn);
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("rate-limited-message")).toHaveTextContent("Rate limit exceeded!");
            });
        });
        it("should allow more requests for professional plan users", async ()=>{
            const proScenario = _multitenanttesthelpers.TENANT_SCENARIOS.hotel_professional;
            const rateLimitHelper = new _multitenanttesthelpers.RateLimitTestHelper(proScenario);
            _jestsetup.server.use(...rateLimitHelper.createRateLimitHandlers());
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockRateLimitComponent, {}), {
                tenantConfig: {
                    user: proScenario.user
                }
            });
            const makeRequestBtn = _testutils.screen.getByTestId("make-request-btn");
            // Professional plan should allow more requests (100)
            // Test first 50 requests
            for(let i = 0; i < 50; i++){
                await user.click(makeRequestBtn);
                await (0, _testutils.waitFor)(()=>{
                    expect(_testutils.screen.getByTestId(`request-${i}`)).toHaveTextContent(`Success #${i + 1}`);
                });
            }
            expect(_testutils.screen.queryByTestId("rate-limited-message")).not.toBeInTheDocument();
        });
    });
    describe("Feature Flag Variations", ()=>{
        it("should show different features based on feature flags", async ()=>{
            const flagConfigs = {
                "test-tenant-1": {
                    advanced_features: true,
                    beta_features: true
                },
                "test-tenant-2": {
                    advanced_features: false,
                    beta_features: false
                }
            };
            _jestsetup.server.use(..._multitenanttesthelpers.FeatureFlagTestHelper.createFeatureFlagHandlers(flagConfigs));
            const MockFeatureFlagComponent = ()=>{
                const [features, setFeatures] = _react.default.useState(null);
                _react.default.useEffect(()=>{
                    fetch("/api/v1/conditional-feature", {
                        headers: {
                            "X-Tenant-ID": "test-tenant-1"
                        }
                    }).then((res)=>res.json()).then(setFeatures);
                }, []);
                if (!features) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Loading features..."
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "feature-flag-component",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            "data-testid": "feature-level",
                            children: [
                                "Level: ",
                                features.feature_level
                            ]
                        }),
                        features.additional_data && /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                            "data-testid": "advanced-data",
                            children: features.additional_data
                        })
                    ]
                });
            };
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockFeatureFlagComponent, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("feature-level")).toHaveTextContent("Level: advanced");
                expect(_testutils.screen.getByTestId("advanced-data")).toHaveTextContent("Only available with advanced features flag");
            });
        });
    });
    describe("Cross-Tenant Isolation", ()=>{
        it("should prevent access to other tenant data", async ()=>{
            const allowedTenantId = "tenant-a";
            _jestsetup.server.use(..._multitenanttesthelpers.TenantIsolationTestHelper.createIsolationHandlers(allowedTenantId));
            const MockIsolationComponent = ({ tenantId })=>{
                const [data, setData] = _react.default.useState(null);
                const [error, setError] = _react.default.useState(null);
                _react.default.useEffect(()=>{
                    fetch("/api/v1/market-edge/competitors", {
                        headers: {
                            "X-Tenant-ID": tenantId
                        }
                    }).then((res)=>{
                        if (!res.ok) {
                            throw new Error(`HTTP ${res.status}`);
                        }
                        return res.json();
                    }).then(setData).catch((err)=>setError(err.message));
                }, [
                    tenantId
                ]);
                if (error) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "error-message",
                        children: [
                            "Error: ",
                            error
                        ]
                    });
                }
                if (!data) {
                    return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        children: "Loading..."
                    });
                }
                return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    "data-testid": "isolation-component",
                    children: /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                        "data-testid": "competitor-data",
                        children: [
                            "Competitors: ",
                            data.competitors?.length || 0
                        ]
                    })
                });
            };
            // Test allowed tenant
            const { rerender } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockIsolationComponent, {
                tenantId: "tenant-a"
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("competitor-data")).toHaveTextContent("Competitors: 1");
            });
            // Test blocked tenant
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockIsolationComponent, {
                tenantId: "tenant-b"
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("error-message")).toHaveTextContent("Error: HTTP 403");
            });
        });
        it("should maintain data separation between tenants", async ()=>{
            _jestsetup.server.use(..._multitenanttesthelpers.TenantIsolationTestHelper.createCrossTenantAccessTest("tenant-a", "tenant-b"));
            const MockCrossTenantComponent = ({ tenantId })=>{
                const [data, setData] = _react.default.useState(null);
                _react.default.useEffect(()=>{
                    fetch("/api/v1/cross-tenant-test", {
                        headers: {
                            "X-Tenant-ID": tenantId
                        }
                    }).then((res)=>res.json()).then(setData);
                }, [
                    tenantId
                ]);
                if (!data) return /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                    children: "Loading..."
                });
                return /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                    "data-testid": "cross-tenant-component",
                    children: [
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            "data-testid": "accessible-data",
                            children: [
                                "Data: ",
                                data.accessible_data
                            ]
                        }),
                        /*#__PURE__*/ (0, _jsxruntime.jsxs)("div", {
                            "data-testid": "tenant-id",
                            children: [
                                "Tenant: ",
                                data.requesting_tenant
                            ]
                        })
                    ]
                });
            };
            // Test tenant A
            const { rerender } = (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockCrossTenantComponent, {
                tenantId: "tenant-a"
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("accessible-data")).toHaveTextContent("Data: Data for A");
                expect(_testutils.screen.getByTestId("tenant-id")).toHaveTextContent("Tenant: tenant-a");
            });
            // Test tenant B
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockCrossTenantComponent, {
                tenantId: "tenant-b"
            }));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByTestId("accessible-data")).toHaveTextContent("Data: Data for B");
                expect(_testutils.screen.getByTestId("tenant-id")).toHaveTextContent("Tenant: tenant-b");
            });
        });
    });
    describe("Error Handling and Edge Cases", ()=>{
        it("should handle API errors gracefully", async ()=>{
            _jestsetup.server.use(// Mock an API endpoint that returns an error
            _jestsetup.server.use(...[
                {
                    method: "GET",
                    path: "/api/v1/market-edge/competitors",
                    handler: ()=>new Response(null, {
                            status: 500
                        })
                }
            ]));
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdgeDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText("Error: HTTP 500")).toBeInTheDocument();
            });
        });
        it("should handle network failures", async ()=>{
            _jestsetup.server.use(// Mock network failure
            _jestsetup.server.use(...[
                {
                    method: "GET",
                    path: "/api/v1/market-edge/competitors",
                    handler: ()=>Promise.reject(new Error("Network Error"))
                }
            ]));
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdgeDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText(/Error:/)).toBeInTheDocument();
            });
        });
        it("should handle malformed responses", async ()=>{
            _jestsetup.server.use(// Mock malformed response
            _jestsetup.server.use(...[
                {
                    method: "GET",
                    path: "/api/v1/market-edge/competitors",
                    handler: ()=>new Response("invalid json", {
                            headers: {
                                "Content-Type": "application/json"
                            }
                        })
                }
            ]));
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdgeDashboard, {}));
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.getByText(/Error:/)).toBeInTheDocument();
            });
        });
    });
    describe("Performance Testing", ()=>{
        it("should handle loading states correctly", async ()=>{
            let resolveRequest;
            const requestPromise = new Promise((resolve)=>{
                resolveRequest = resolve;
            });
            _jestsetup.server.use(// Mock delayed response
            _jestsetup.server.use(...[
                {
                    method: "GET",
                    path: "/api/v1/market-edge/competitors",
                    handler: async ()=>{
                        await requestPromise;
                        return new Response(JSON.stringify({
                            competitors: []
                        }));
                    }
                }
            ]));
            (0, _testutils.renderWithProviders)(/*#__PURE__*/ (0, _jsxruntime.jsx)(MockMarketEdgeDashboard, {}));
            // Should show loading state initially
            expect(_testutils.screen.getByText("Loading market data...")).toBeInTheDocument();
            // Resolve the request
            (0, _testutils.act)(()=>{
                resolveRequest({
                    competitors: []
                });
            });
            // Should show content after loading
            await (0, _testutils.waitFor)(()=>{
                expect(_testutils.screen.queryByText("Loading market data...")).not.toBeInTheDocument();
                expect(_testutils.screen.getByTestId("market-edge-dashboard")).toBeInTheDocument();
            });
        });
    });
});

//# sourceMappingURL=data:application/json;base64,