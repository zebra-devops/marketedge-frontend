{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/ui/__tests__/LoadingSpinner.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen } from '@/test-utils'\nimport LoadingSpinner from '../LoadingSpinner'\n\ndescribe('LoadingSpinner Component', () => {\n  it('renders with default props', () => {\n    render(<LoadingSpinner />)\n    \n    const container = screen.getByTestId('loading-spinner')\n    expect(container).toBeInTheDocument()\n    expect(container).toHaveClass('flex', 'justify-center', 'items-center')\n    \n    const spinner = container.firstChild\n    expect(spinner).toHaveClass('animate-spin', 'rounded-full', 'border-2')\n  })\n\n  it('renders with medium size by default', () => {\n    render(<LoadingSpinner />)\n    \n    const container = screen.getByTestId('loading-spinner')\n    const spinner = container.firstChild\n    expect(spinner).toHaveClass('h-8', 'w-8')\n  })\n\n  it('renders with small size', () => {\n    render(<LoadingSpinner size=\"sm\" />)\n    \n    const container = screen.getByTestId('loading-spinner')\n    const spinner = container.firstChild\n    expect(spinner).toHaveClass('h-4', 'w-4')\n  })\n\n  it('renders with large size', () => {\n    render(<LoadingSpinner size=\"lg\" />)\n    \n    const container = screen.getByTestId('loading-spinner')\n    const spinner = container.firstChild\n    expect(spinner).toHaveClass('h-12', 'w-12')\n  })\n\n  it('applies custom className', () => {\n    render(<LoadingSpinner className=\"custom-spinner\" />)\n    \n    const container = screen.getByTestId('loading-spinner')\n    expect(container).toHaveClass('custom-spinner')\n  })\n\n  it('has proper spinner styling', () => {\n    render(<LoadingSpinner />)\n    \n    const container = screen.getByTestId('loading-spinner')\n    const spinner = container.firstChild\n    \n    expect(spinner).toHaveClass(\n      'animate-spin',\n      'rounded-full',\n      'border-2',\n      'border-gray-300',\n      'border-t-primary-600'\n    )\n  })\n\n  it('maintains consistent structure across sizes', () => {\n    const sizes = ['sm', 'md', 'lg'] as const\n    \n    sizes.forEach(size => {\n      const { container, unmount } = render(<LoadingSpinner size={size} />)\n      \n      const wrapper = container.firstChild\n      expect(wrapper).toHaveClass('flex', 'justify-center', 'items-center')\n      \n      const spinner = wrapper?.firstChild\n      expect(spinner).toHaveClass('animate-spin', 'rounded-full', 'border-2')\n      \n      unmount()\n    })\n  })\n\n  it('combines custom className with default classes', () => {\n    render(<LoadingSpinner className=\"my-4 text-red-500\" />)\n    \n    const container = screen.getByTestId('loading-spinner')\n    expect(container).toHaveClass('flex', 'justify-center', 'items-center', 'my-4', 'text-red-500')\n  })\n\n  it('is accessible for screen readers', () => {\n    render(<LoadingSpinner />)\n    \n    // While not explicitly tested, the component structure supports\n    // adding aria-label or role attributes if needed for accessibility\n    const container = screen.getByTestId('loading-spinner')\n    expect(container).toBeInTheDocument()\n  })\n\n  it('renders consistently with different props combinations', () => {\n    render(\n      <div>\n        <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n        <LoadingSpinner size=\"md\" className=\"mr-2\" />\n        <LoadingSpinner size=\"lg\" className=\"mr-2\" />\n      </div>\n    )\n    \n    const spinners = screen.getAllByTestId('loading-spinner')\n    expect(spinners).toHaveLength(3)\n    \n    spinners.forEach(spinner => {\n      expect(spinner).toHaveClass('flex', 'justify-center', 'items-center', 'mr-2')\n    })\n  })\n})"],"names":["describe","it","render","LoadingSpinner","container","screen","getByTestId","expect","toBeInTheDocument","toHaveClass","spinner","firstChild","size","className","sizes","forEach","unmount","wrapper","div","spinners","getAllByTestId","toHaveLength"],"mappings":"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"}