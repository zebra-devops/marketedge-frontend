{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/__tests__/utils/test-utils.tsx"],"sourcesContent":["/**\n * Multi-tenant testing utilities for the platform frontend\n * \n * This file provides utilities for testing components in different tenant contexts,\n * with different user roles, and various feature flag configurations.\n */\n\nimport React, { ReactElement, ReactNode } from 'react'\nimport { render, RenderOptions, RenderResult } from '@testing-library/react'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { AuthContext } from '@/hooks/useAuth'\nimport { ToastProvider } from '@/components/providers/ToastProvider'\n\n// Types for test configurations\nexport interface MockUser {\n  id: string\n  email: string\n  name: string\n  picture?: string\n  organisation: MockOrganization\n  roles: string[]\n  permissions: string[]\n  is_admin?: boolean\n}\n\nexport interface MockOrganization {\n  id: string\n  name: string\n  subscription_plan: 'basic' | 'professional' | 'enterprise'\n  industry: string\n  sic_code: string\n  is_active: boolean\n  rate_limit_per_hour: number\n  burst_limit: number\n  rate_limit_enabled: boolean\n}\n\nexport interface TenantContextConfig {\n  user?: MockUser\n  organization?: MockOrganization\n  featureFlags?: Record<string, boolean>\n  role?: 'super_admin' | 'client_admin' | 'end_user'\n  industry?: 'hotel' | 'cinema' | 'gym' | 'b2b_service' | 'retail'\n}\n\nexport interface TestRenderOptions extends Omit<RenderOptions, 'wrapper'> {\n  tenantConfig?: TenantContextConfig\n  queryClient?: QueryClient\n  initialEntries?: string[]\n}\n\n// Industry-specific SIC codes\nexport const INDUSTRY_SIC_CODES = {\n  hotel: '7011',\n  cinema: '7832',\n  gym: '7991',\n  b2b_service: '8748',\n  retail: '5399'\n}\n\n// Default subscription plans by industry\nexport const INDUSTRY_SUBSCRIPTION_PLANS = {\n  hotel: 'professional' as const,\n  cinema: 'basic' as const,\n  gym: 'professional' as const,\n  b2b_service: 'enterprise' as const,\n  retail: 'professional' as const,\n}\n\n/**\n * Create a mock user for testing with industry-specific defaults\n */\nexport const createMockUser = (overrides: Partial<MockUser> = {}): MockUser => {\n  const industry = overrides.organisation?.industry || 'hotel'\n  const sicCode = INDUSTRY_SIC_CODES[industry as keyof typeof INDUSTRY_SIC_CODES] || '7011'\n  const subscriptionPlan = INDUSTRY_SUBSCRIPTION_PLANS[industry as keyof typeof INDUSTRY_SUBSCRIPTION_PLANS] || 'professional'\n\n  return {\n    id: 'user-123',\n    email: 'test@example.com',\n    name: 'Test User',\n    picture: 'https://example.com/avatar.jpg',\n    organisation: createMockOrganization({\n      industry,\n      sic_code: sicCode,\n      subscription_plan: subscriptionPlan,\n      ...overrides.organisation\n    }),\n    roles: ['user'],\n    permissions: [],\n    is_admin: false,\n    ...overrides,\n  }\n}\n\n/**\n * Create a mock organization for testing\n */\nexport const createMockOrganization = (overrides: Partial<MockOrganization> = {}): MockOrganization => {\n  const subscriptionPlan = overrides.subscription_plan || 'professional'\n  \n  // Set rate limits based on subscription plan\n  const rateLimits = {\n    basic: { rate_limit_per_hour: 1000, burst_limit: 100 },\n    professional: { rate_limit_per_hour: 5000, burst_limit: 250 },\n    enterprise: { rate_limit_per_hour: 10000, burst_limit: 500 },\n  }\n\n  return {\n    id: 'org-123',\n    name: 'Test Organization',\n    subscription_plan: subscriptionPlan,\n    industry: 'hotel',\n    sic_code: '7011',\n    is_active: true,\n    rate_limit_enabled: true,\n    ...rateLimits[subscriptionPlan],\n    ...overrides,\n  }\n}\n\n/**\n * Create feature flag configuration for testing\n */\nexport const createMockFeatureFlags = (overrides: Record<string, boolean> = {}): Record<string, boolean> => {\n  return {\n    // Core platform flags\n    'multi_tenant_enabled': true,\n    'feature_flags_enabled': true,\n    'audit_logging_enabled': true,\n    \n    // Market Edge flags\n    'market_edge_enabled': true,\n    'competitive_analysis': true,\n    'pricing_optimization': true,\n    'market_intelligence': true,\n    \n    // Causal Edge flags\n    'causal_edge_enabled': false,\n    'causal_inference': false,\n    'predictive_modeling': false,\n    \n    // Value Edge flags\n    'value_edge_enabled': false,\n    'value_optimization': false,\n    'roi_analysis': false,\n    \n    // Industry-specific flags\n    'hotel_features': false,\n    'cinema_features': false,\n    'gym_features': false,\n    'b2b_features': false,\n    'retail_features': false,\n    \n    ...overrides,\n  }\n}\n\n/**\n * Mock Auth Provider for testing\n */\nconst MockAuthProvider: React.FC<{ children: ReactNode; user?: MockUser }> = ({ \n  children, \n  user = createMockUser()\n}) => {\n  const mockAuthValue = {\n    user,\n    isLoading: false,\n    isAuthenticated: true,\n    login: jest.fn(),\n    logout: jest.fn(),\n    refreshUser: jest.fn(),\n  }\n\n  return (\n    <AuthContext.Provider value={mockAuthValue}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\n/**\n * Custom wrapper that includes all necessary providers for testing\n */\nconst createWrapper = (options: TestRenderOptions = {}) => {\n  const {\n    tenantConfig = {},\n    queryClient = new QueryClient({\n      defaultOptions: {\n        queries: { retry: false },\n        mutations: { retry: false },\n      },\n    }),\n  } = options\n\n  const user = tenantConfig.user || createMockUser({\n    organisation: { \n      industry: tenantConfig.industry || 'hotel',\n      ...tenantConfig.organization \n    },\n    roles: tenantConfig.role ? [tenantConfig.role] : ['user'],\n    is_admin: tenantConfig.role === 'super_admin',\n  })\n\n  const AllTheProviders: React.FC<{ children: ReactNode }> = ({ children }) => {\n    return (\n      <QueryClientProvider client={queryClient}>\n        <MockAuthProvider user={user}>\n          <ToastProvider>\n            {children}\n          </ToastProvider>\n        </MockAuthProvider>\n      </QueryClientProvider>\n    )\n  }\n\n  return AllTheProviders\n}\n\n/**\n * Custom render function that wraps components with necessary providers\n */\nexport const renderWithProviders = (\n  ui: ReactElement,\n  options: TestRenderOptions = {}\n): RenderResult => {\n  const Wrapper = createWrapper(options)\n  \n  return render(ui, {\n    wrapper: Wrapper,\n    ...options,\n  })\n}\n\n/**\n * Render component with specific industry context\n */\nexport const renderWithIndustry = (\n  ui: ReactElement,\n  industry: keyof typeof INDUSTRY_SIC_CODES,\n  options: Omit<TestRenderOptions, 'tenantConfig'> = {}\n): RenderResult => {\n  return renderWithProviders(ui, {\n    ...options,\n    tenantConfig: {\n      industry,\n      user: createMockUser({\n        organisation: createMockOrganization({\n          industry,\n          sic_code: INDUSTRY_SIC_CODES[industry],\n          subscription_plan: INDUSTRY_SUBSCRIPTION_PLANS[industry],\n        })\n      })\n    }\n  })\n}\n\n/**\n * Render component with specific user role\n */\nexport const renderWithRole = (\n  ui: ReactElement,\n  role: 'super_admin' | 'client_admin' | 'end_user',\n  options: Omit<TestRenderOptions, 'tenantConfig'> = {}\n): RenderResult => {\n  return renderWithProviders(ui, {\n    ...options,\n    tenantConfig: {\n      role,\n      user: createMockUser({\n        roles: [role],\n        is_admin: role === 'super_admin',\n      })\n    }\n  })\n}\n\n/**\n * Render component with specific subscription plan\n */\nexport const renderWithSubscription = (\n  ui: ReactElement,\n  subscriptionPlan: 'basic' | 'professional' | 'enterprise',\n  options: Omit<TestRenderOptions, 'tenantConfig'> = {}\n): RenderResult => {\n  return renderWithProviders(ui, {\n    ...options,\n    tenantConfig: {\n      organization: createMockOrganization({\n        subscription_plan: subscriptionPlan\n      })\n    }\n  })\n}\n\n/**\n * Test utilities for simulating user interactions\n */\nexport const userEventSetup = () => {\n  const userEvent = require('@testing-library/user-event')\n  return userEvent.setup()\n}\n\n/**\n * Helper to wait for async operations in tests\n */\nexport const waitForLoadingToFinish = () => {\n  const { waitForElementToBeRemoved, screen } = require('@testing-library/react')\n  return waitForElementToBeRemoved(\n    () => screen.queryByText(/loading/i) || screen.queryByTestId('loading-spinner'),\n    { timeout: 5000 }\n  )\n}\n\n/**\n * Mock API responses for different tenant scenarios\n */\nexport const mockApiResponse = {\n  user: (user: MockUser) => ({\n    data: user,\n    status: 200,\n  }),\n  \n  organization: (org: MockOrganization) => ({\n    data: org,\n    status: 200,\n  }),\n  \n  featureFlags: (flags: Record<string, boolean>) => ({\n    data: { flags },\n    status: 200,\n  }),\n  \n  error: (status: number, message: string) => ({\n    response: {\n      status,\n      data: { error: message }\n    }\n  })\n}\n\n// Re-export testing library utilities\nexport * from '@testing-library/react'\nexport { default as userEvent } from '@testing-library/user-event'\n\n// Re-export MSW utilities\nexport { server } from '../mocks/server'\nexport { mockHandlerUtils } from '../mocks/handlers'"],"names":["INDUSTRY_SIC_CODES","INDUSTRY_SUBSCRIPTION_PLANS","createMockFeatureFlags","createMockOrganization","createMockUser","mockApiResponse","mockHandlerUtils","renderWithIndustry","renderWithProviders","renderWithRole","renderWithSubscription","server","userEvent","userEventSetup","waitForLoadingToFinish","hotel","cinema","gym","b2b_service","retail","overrides","industry","organisation","sicCode","subscriptionPlan","id","email","name","picture","sic_code","subscription_plan","roles","permissions","is_admin","rateLimits","basic","rate_limit_per_hour","burst_limit","professional","enterprise","is_active","rate_limit_enabled","MockAuthProvider","children","user","mockAuthValue","isLoading","isAuthenticated","login","jest","fn","logout","refreshUser","AuthContext","Provider","value","createWrapper","options","tenantConfig","queryClient","QueryClient","defaultOptions","queries","retry","mutations","organization","role","AllTheProviders","QueryClientProvider","client","ToastProvider","ui","Wrapper","render","wrapper","require","setup","waitForElementToBeRemoved","screen","queryByText","queryByTestId","timeout","data","status","org","featureFlags","flags","error","message","response"],"mappings":"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"}