244f4b2da60df003bdbf812cb538ceae
/**
 * Multi-tenant testing utilities for the platform frontend
 * 
 * This file provides utilities for testing components in different tenant contexts,
 * with different user roles, and various feature flag configurations.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    INDUSTRY_SIC_CODES: function() {
        return INDUSTRY_SIC_CODES;
    },
    INDUSTRY_SUBSCRIPTION_PLANS: function() {
        return INDUSTRY_SUBSCRIPTION_PLANS;
    },
    createMockFeatureFlags: function() {
        return createMockFeatureFlags;
    },
    createMockOrganization: function() {
        return createMockOrganization;
    },
    createMockUser: function() {
        return createMockUser;
    },
    mockApiResponse: function() {
        return mockApiResponse;
    },
    mockHandlerUtils: function() {
        return _handlers.mockHandlerUtils;
    },
    renderWithIndustry: function() {
        return renderWithIndustry;
    },
    renderWithProviders: function() {
        return renderWithProviders;
    },
    renderWithRole: function() {
        return renderWithRole;
    },
    renderWithSubscription: function() {
        return renderWithSubscription;
    },
    server: function() {
        return _server.server;
    },
    userEvent: function() {
        return _userevent.default;
    },
    userEventSetup: function() {
        return userEventSetup;
    },
    waitForLoadingToFinish: function() {
        return waitForLoadingToFinish;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = _export_star(require("@testing-library/react"), exports);
const _reactquery = require("react-query");
const _useAuth = require("../../hooks/useAuth");
const _ToastProvider = require("../../components/providers/ToastProvider");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _server = require("../mocks/server");
const _handlers = require("../mocks/handlers");
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const INDUSTRY_SIC_CODES = {
    hotel: "7011",
    cinema: "7832",
    gym: "7991",
    b2b_service: "8748",
    retail: "5399"
};
const INDUSTRY_SUBSCRIPTION_PLANS = {
    hotel: "professional",
    cinema: "basic",
    gym: "professional",
    b2b_service: "enterprise",
    retail: "professional"
};
const createMockUser = (overrides = {})=>{
    const industry = overrides.organisation?.industry || "hotel";
    const sicCode = INDUSTRY_SIC_CODES[industry] || "7011";
    const subscriptionPlan = INDUSTRY_SUBSCRIPTION_PLANS[industry] || "professional";
    return {
        id: "user-123",
        email: "test@example.com",
        name: "Test User",
        picture: "https://example.com/avatar.jpg",
        organisation: createMockOrganization({
            industry,
            sic_code: sicCode,
            subscription_plan: subscriptionPlan,
            ...overrides.organisation
        }),
        roles: [
            "user"
        ],
        permissions: [],
        is_admin: false,
        ...overrides
    };
};
const createMockOrganization = (overrides = {})=>{
    const subscriptionPlan = overrides.subscription_plan || "professional";
    // Set rate limits based on subscription plan
    const rateLimits = {
        basic: {
            rate_limit_per_hour: 1000,
            burst_limit: 100
        },
        professional: {
            rate_limit_per_hour: 5000,
            burst_limit: 250
        },
        enterprise: {
            rate_limit_per_hour: 10000,
            burst_limit: 500
        }
    };
    return {
        id: "org-123",
        name: "Test Organization",
        subscription_plan: subscriptionPlan,
        industry: "hotel",
        sic_code: "7011",
        is_active: true,
        rate_limit_enabled: true,
        ...rateLimits[subscriptionPlan],
        ...overrides
    };
};
const createMockFeatureFlags = (overrides = {})=>{
    return {
        // Core platform flags
        "multi_tenant_enabled": true,
        "feature_flags_enabled": true,
        "audit_logging_enabled": true,
        // Market Edge flags
        "market_edge_enabled": true,
        "competitive_analysis": true,
        "pricing_optimization": true,
        "market_intelligence": true,
        // Causal Edge flags
        "causal_edge_enabled": false,
        "causal_inference": false,
        "predictive_modeling": false,
        // Value Edge flags
        "value_edge_enabled": false,
        "value_optimization": false,
        "roi_analysis": false,
        // Industry-specific flags
        "hotel_features": false,
        "cinema_features": false,
        "gym_features": false,
        "b2b_features": false,
        "retail_features": false,
        ...overrides
    };
};
/**
 * Mock Auth Provider for testing
 */ const MockAuthProvider = ({ children, user = createMockUser() })=>{
    const mockAuthValue = {
        user,
        isLoading: false,
        isAuthenticated: true,
        login: jest.fn(),
        logout: jest.fn(),
        refreshUser: jest.fn()
    };
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_useAuth.AuthContext.Provider, {
        value: mockAuthValue,
        children: children
    });
};
/**
 * Custom wrapper that includes all necessary providers for testing
 */ const createWrapper = (options = {})=>{
    const { tenantConfig = {}, queryClient = new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false
            },
            mutations: {
                retry: false
            }
        }
    }) } = options;
    const user = tenantConfig.user || createMockUser({
        organisation: {
            industry: tenantConfig.industry || "hotel",
            ...tenantConfig.organization
        },
        roles: tenantConfig.role ? [
            tenantConfig.role
        ] : [
            "user"
        ],
        is_admin: tenantConfig.role === "super_admin"
    });
    const AllTheProviders = ({ children })=>{
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
            client: queryClient,
            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(MockAuthProvider, {
                user: user,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_ToastProvider.ToastProvider, {
                    children: children
                })
            })
        });
    };
    return AllTheProviders;
};
const renderWithProviders = (ui, options = {})=>{
    const Wrapper = createWrapper(options);
    return (0, _react1.render)(ui, {
        wrapper: Wrapper,
        ...options
    });
};
const renderWithIndustry = (ui, industry, options = {})=>{
    return renderWithProviders(ui, {
        ...options,
        tenantConfig: {
            industry,
            user: createMockUser({
                organisation: createMockOrganization({
                    industry,
                    sic_code: INDUSTRY_SIC_CODES[industry],
                    subscription_plan: INDUSTRY_SUBSCRIPTION_PLANS[industry]
                })
            })
        }
    });
};
const renderWithRole = (ui, role, options = {})=>{
    return renderWithProviders(ui, {
        ...options,
        tenantConfig: {
            role,
            user: createMockUser({
                roles: [
                    role
                ],
                is_admin: role === "super_admin"
            })
        }
    });
};
const renderWithSubscription = (ui, subscriptionPlan, options = {})=>{
    return renderWithProviders(ui, {
        ...options,
        tenantConfig: {
            organization: createMockOrganization({
                subscription_plan: subscriptionPlan
            })
        }
    });
};
const userEventSetup = ()=>{
    const userEvent = require("@testing-library/user-event");
    return userEvent.setup();
};
const waitForLoadingToFinish = ()=>{
    const { waitForElementToBeRemoved, screen } = require("@testing-library/react");
    return waitForElementToBeRemoved(()=>screen.queryByText(/loading/i) || screen.queryByTestId("loading-spinner"), {
        timeout: 5000
    });
};
const mockApiResponse = {
    user: (user)=>({
            data: user,
            status: 200
        }),
    organization: (org)=>({
            data: org,
            status: 200
        }),
    featureFlags: (flags)=>({
            data: {
                flags
            },
            status: 200
        }),
    error: (status, message)=>({
            response: {
                status,
                data: {
                    error: message
                }
            }
        })
};

//# sourceMappingURL=data:application/json;base64,