{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/market-edge/PricingChart.tsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport {\n  LineChart,\n  Line,\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n  Area,\n  AreaChart\n} from 'recharts';\nimport { MarketTrends, CompetitorComparison } from '@/types/market-edge';\n\ninterface PricingChartProps {\n  data: MarketTrends | CompetitorComparison | any;\n  chartType?: 'line' | 'bar' | 'area';\n  title?: string;\n  height?: number;\n  showLegend?: boolean;\n  className?: string;\n}\n\nexport const PricingChart: React.FC<PricingChartProps> = ({\n  data,\n  chartType = 'line',\n  title,\n  height = 400,\n  showLegend = true,\n  className = ''\n}) => {\n  const { chartData, competitorColors } = useMemo(() => {\n    if (!data) return { chartData: [], competitorColors: {} };\n\n    // Handle MarketTrends data\n    if ('market_trend' in data && data.market_trend) {\n      const weeks = Object.keys(data.market_trend).sort();\n      const colors = ['#3B82F6', '#EF4444', '#10B981', '#F59E0B', '#8B5CF6', '#EC4899'];\n      const competitors = Object.keys(data.competitor_trends || {});\n      \n      const competitorColorMap = competitors.reduce((acc, comp, index) => {\n        acc[comp] = colors[index % colors.length];\n        return acc;\n      }, {} as Record<string, string>);\n\n      const chartData = weeks.map(week => {\n        const dataPoint: any = {\n          week: week.replace('2024-W', 'W'),\n          market: Math.round(data.market_trend[week] * 100) / 100\n        };\n\n        // Add competitor data\n        if (data.competitor_trends) {\n          Object.entries(data.competitor_trends).forEach(([competitorId, competitorData]) => {\n            const weeklyData = competitorData.weekly_averages[week];\n            if (weeklyData) {\n              dataPoint[competitorData.name] = Math.round(weeklyData * 100) / 100;\n            }\n          });\n        }\n\n        return dataPoint;\n      });\n\n      return { chartData, competitorColors: competitorColorMap };\n    }\n\n    // Handle CompetitorComparison data\n    if ('competitors' in data) {\n      const chartData = Object.entries(data.competitors).map(([id, competitor]) => ({\n        name: competitor.name.length > 15 ? competitor.name.substring(0, 15) + '...' : competitor.name,\n        fullName: competitor.name,\n        averagePrice: Math.round(competitor.average_price * 100) / 100,\n        minPrice: competitor.min_price,\n        maxPrice: competitor.max_price,\n        marketShare: competitor.market_share_estimate || 0,\n        dataPoints: competitor.data_points\n      }));\n\n      return { \n        chartData: chartData.sort((a, b) => a.averagePrice - b.averagePrice),\n        competitorColors: {}\n      };\n    }\n\n    // Handle generic data\n    return { chartData: data, competitorColors: {} };\n  }, [data]);\n\n  const formatCurrency = (value: number) => {\n    return `Â£${value.toFixed(2)}`;\n  };\n\n  const formatPercent = (value: number) => {\n    return `${value.toFixed(1)}%`;\n  };\n\n  const CustomTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      return (\n        <div className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\">\n          <p className=\"font-medium text-gray-900 mb-2\">{label}</p>\n          {payload.map((entry: any, index: number) => (\n            <p key={index} className=\"text-sm\" style={{ color: entry.color }}>\n              {`${entry.dataKey === 'market' ? 'Market Average' : entry.dataKey}: ${formatCurrency(entry.value)}`}\n            </p>\n          ))}\n        </div>\n      );\n    }\n    return null;\n  };\n\n  const CompetitorTooltip = ({ active, payload, label }: any) => {\n    if (active && payload && payload.length) {\n      const data = payload[0].payload;\n      return (\n        <div className=\"bg-white p-3 border border-gray-200 rounded-lg shadow-lg\">\n          <p className=\"font-medium text-gray-900 mb-2\">{data.fullName}</p>\n          <p className=\"text-sm text-gray-600\">Average Price: {formatCurrency(data.averagePrice)}</p>\n          <p className=\"text-sm text-gray-600\">Price Range: {formatCurrency(data.minPrice)} - {formatCurrency(data.maxPrice)}</p>\n          {data.marketShare > 0 && (\n            <p className=\"text-sm text-gray-600\">Market Share: {formatPercent(data.marketShare)}</p>\n          )}\n          <p className=\"text-sm text-gray-600\">Data Points: {data.dataPoints}</p>\n        </div>\n      );\n    }\n    return null;\n  };\n\n  if (!chartData || chartData.length === 0) {\n    return (\n      <div className={`bg-white rounded-lg border border-gray-200 p-6 ${className}`}>\n        {title && (\n          <h3 className=\"text-lg font-medium text-gray-900 mb-4\">{title}</h3>\n        )}\n        <div className=\"flex items-center justify-center h-64 text-gray-500\">\n          <div className=\"text-center\">\n            <div className=\"text-sm\">No pricing data available</div>\n            <div className=\"text-xs mt-1\">Data will appear here once pricing information is collected</div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const renderChart = () => {\n    // For trends data (line/area chart)\n    if ('market_trend' in data) {\n      const Chart = chartType === 'area' ? AreaChart : LineChart;\n      const Element = chartType === 'area' ? Area : Line;\n\n      return (\n        <ResponsiveContainer width=\"100%\" height={height}>\n          <Chart data={chartData}>\n            <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n            <XAxis \n              dataKey=\"week\" \n              tick={{ fontSize: 12 }}\n              stroke=\"#6b7280\"\n            />\n            <YAxis \n              tick={{ fontSize: 12 }}\n              tickFormatter={formatCurrency}\n              stroke=\"#6b7280\"\n            />\n            <Tooltip content={<CustomTooltip />} />\n            {showLegend && <Legend />}\n            \n            {/* Market trend line */}\n            <Element\n              type=\"monotone\"\n              dataKey=\"market\"\n              stroke=\"#1f2937\"\n              strokeWidth={3}\n              strokeDasharray=\"5 5\"\n              name=\"Market Average\"\n              {...(chartType === 'area' && { fill: '#1f293740' })}\n            />\n            \n            {/* Competitor lines */}\n            {data.competitor_trends && Object.entries(data.competitor_trends).map(([competitorId, competitorData]) => (\n              <Element\n                key={competitorId}\n                type=\"monotone\"\n                dataKey={competitorData.name}\n                stroke={competitorColors[competitorId] || '#6b7280'}\n                strokeWidth={2}\n                name={competitorData.name}\n                connectNulls={false}\n                {...(chartType === 'area' && { \n                  fill: `${competitorColors[competitorId] || '#6b7280'}20`,\n                  fillOpacity: 0.3\n                })}\n              />\n            ))}\n          </Chart>\n        </ResponsiveContainer>\n      );\n    }\n\n    // For competitor comparison (bar chart)\n    return (\n      <ResponsiveContainer width=\"100%\" height={height}>\n        <BarChart data={chartData} margin={{ bottom: 60 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f0f0f0\" />\n          <XAxis \n            dataKey=\"name\" \n            tick={{ fontSize: 11 }}\n            angle={-45}\n            textAnchor=\"end\"\n            height={80}\n            stroke=\"#6b7280\"\n          />\n          <YAxis \n            tick={{ fontSize: 12 }}\n            tickFormatter={formatCurrency}\n            stroke=\"#6b7280\"\n          />\n          <Tooltip content={<CompetitorTooltip />} />\n          {showLegend && <Legend />}\n          <Bar \n            dataKey=\"averagePrice\" \n            name=\"Average Price\"\n            fill=\"#3B82F6\"\n            radius={[4, 4, 0, 0]}\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  };\n\n  return (\n    <div className={`bg-white rounded-lg border border-gray-200 p-6 ${className}`}>\n      {title && (\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-medium text-gray-900\">{title}</h3>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"text-sm text-gray-500\">\n              {chartData.length} data points\n            </div>\n          </div>\n        </div>\n      )}\n      \n      <div className=\"w-full\">\n        {renderChart()}\n      </div>\n\n      {/* Chart type selector */}\n      <div className=\"mt-4 flex justify-center space-x-2\">\n        <button\n          onClick={() => {/* This would be handled by parent component */}}\n          className={`px-3 py-1 text-xs rounded-md transition-colors ${\n            chartType === 'line' \n              ? 'bg-blue-100 text-blue-700' \n              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n          }`}\n        >\n          Line\n        </button>\n        <button\n          onClick={() => {/* This would be handled by parent component */}}\n          className={`px-3 py-1 text-xs rounded-md transition-colors ${\n            chartType === 'area' \n              ? 'bg-blue-100 text-blue-700' \n              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n          }`}\n        >\n          Area\n        </button>\n        <button\n          onClick={() => {/* This would be handled by parent component */}}\n          className={`px-3 py-1 text-xs rounded-md transition-colors ${\n            chartType === 'bar' \n              ? 'bg-blue-100 text-blue-700' \n              : 'bg-gray-100 text-gray-600 hover:bg-gray-200'\n          }`}\n        >\n          Bar\n        </button>\n      </div>\n    </div>\n  );\n};"],"names":["PricingChart","data","chartType","title","height","showLegend","className","chartData","competitorColors","useMemo","market_trend","weeks","Object","keys","sort","colors","competitors","competitor_trends","competitorColorMap","reduce","acc","comp","index","length","map","week","dataPoint","replace","market","Math","round","entries","forEach","competitorId","competitorData","weeklyData","weekly_averages","name","id","competitor","substring","fullName","averagePrice","average_price","minPrice","min_price","maxPrice","max_price","marketShare","market_share_estimate","dataPoints","data_points","a","b","formatCurrency","value","toFixed","formatPercent","CustomTooltip","active","payload","label","div","p","entry","style","color","dataKey","CompetitorTooltip","h3","renderChart","Chart","AreaChart","LineChart","Element","Area","Line","ResponsiveContainer","width","CartesianGrid","strokeDasharray","stroke","XAxis","tick","fontSize","YAxis","tickFormatter","Tooltip","content","Legend","type","strokeWidth","fill","connectNulls","fillOpacity","BarChart","margin","bottom","angle","textAnchor","Bar","radius","button","onClick"],"mappings":"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"}