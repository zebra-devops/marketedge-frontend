{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/utils/test-utils.tsx"],"sourcesContent":["/**\n * Multi-Tenant Testing Utilities\n * \n * Comprehensive testing utilities for the platform wrapper that support:\n * - Multi-tenant context providers\n * - Auth provider mocking\n * - API mocking with MSW\n * - Accessibility testing\n * - Performance testing helpers\n * - Industry-specific test scenarios\n */\n\nimport React, { ReactElement, ReactNode } from 'react'\nimport { render, RenderOptions, RenderResult } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { QueryClient, QueryClientProvider } from 'react-query'\nimport { Toaster } from 'react-hot-toast'\nimport { axe, toHaveNoViolations } from 'jest-axe'\nimport { http, HttpResponse } from 'msw'\nimport { server } from '../../jest.setup'\n\n// Extend Jest matchers\nexpect.extend(toHaveNoViolations)\n\n// Types for our testing utilities\ninterface TestUser {\n  id: string\n  email: string\n  name: string\n  role: 'admin' | 'user' | 'owner'\n  organisation_id: string\n  is_active: boolean\n  created_at: string\n  updated_at: string\n}\n\ninterface TestOrganisation {\n  id: string\n  name: string\n  industry: 'cinema' | 'hotel' | 'gym' | 'b2b' | 'retail' | 'general'\n  subscription_plan: 'basic' | 'professional' | 'enterprise'\n  is_active: boolean\n  rate_limit_per_hour?: number\n  burst_limit?: number\n}\n\ninterface TestAuthContext {\n  user: TestUser | null\n  organisation: TestOrganisation | null\n  isAuthenticated: boolean\n  isLoading: boolean\n  login: jest.MockedFunction<any>\n  logout: jest.MockedFunction<any>\n  refreshToken: jest.MockedFunction<any>\n}\n\ninterface MultiTenantRenderOptions extends Omit<RenderOptions, 'wrapper'> {\n  // Authentication context\n  user?: TestUser | null\n  organisation?: TestOrganisation | null\n  isAuthenticated?: boolean\n  isAuthLoading?: boolean\n  \n  // Query client options\n  queryClient?: QueryClient\n  \n  // Route context\n  initialRoute?: string\n  routerProps?: Record<string, any>\n  \n  // Feature flags\n  featureFlags?: Record<string, boolean>\n  \n  // Industry-specific settings\n  industryType?: TestOrganisation['industry']\n  \n  // Skip providers (for testing components in isolation)\n  skipAuthProvider?: boolean\n  skipQueryProvider?: boolean\n  skipToastProvider?: boolean\n}\n\n/**\n * Mock Auth Provider for testing\n */\nconst MockAuthProvider: React.FC<{\n  children: ReactNode\n  value: TestAuthContext\n}> = ({ children, value }) => {\n  // This would normally use your AuthContext\n  // For now, we'll make the auth context available via window for testing\n  React.useEffect(() => {\n    ;(window as any).__TEST_AUTH_CONTEXT__ = value\n  }, [value])\n  \n  return <>{children}</>\n}\n\n/**\n * Create a default test user based on industry type\n */\nexport const createTestUser = (\n  overrides: Partial<TestUser> = {},\n  industry: TestOrganisation['industry'] = 'general'\n): TestUser => {\n  const industrySpecificDefaults = {\n    cinema: { email: 'cinema@test.com', name: 'Cinema Manager' },\n    hotel: { email: 'hotel@test.com', name: 'Hotel Manager' },\n    gym: { email: 'gym@test.com', name: 'Gym Manager' },\n    b2b: { email: 'b2b@test.com', name: 'B2B Manager' },\n    retail: { email: 'retail@test.com', name: 'Retail Manager' },\n    general: { email: 'general@test.com', name: 'General Manager' },\n  }\n  \n  return {\n    id: `test-user-${industry}`,\n    email: industrySpecificDefaults[industry].email,\n    name: industrySpecificDefaults[industry].name,\n    role: 'user',\n    organisation_id: `test-org-${industry}`,\n    is_active: true,\n    created_at: new Date().toISOString(),\n    updated_at: new Date().toISOString(),\n    ...overrides,\n  }\n}\n\n/**\n * Create a test organisation based on industry type\n */\nexport const createTestOrganisation = (\n  industry: TestOrganisation['industry'] = 'general',\n  overrides: Partial<TestOrganisation> = {}\n): TestOrganisation => {\n  const industryDefaults = {\n    cinema: {\n      name: 'Cinema Corp',\n      subscription_plan: 'enterprise' as const,\n      rate_limit_per_hour: 10000,\n      burst_limit: 300,\n    },\n    hotel: {\n      name: 'Hotel Group',\n      subscription_plan: 'professional' as const,\n      rate_limit_per_hour: 7500,\n      burst_limit: 200,\n    },\n    gym: {\n      name: 'Fitness Chain',\n      subscription_plan: 'professional' as const,\n      rate_limit_per_hour: 5000,\n      burst_limit: 150,\n    },\n    b2b: {\n      name: 'B2B Services',\n      subscription_plan: 'enterprise' as const,\n      rate_limit_per_hour: 6000,\n      burst_limit: 180,\n    },\n    retail: {\n      name: 'Retail Store',\n      subscription_plan: 'basic' as const,\n      rate_limit_per_hour: 4000,\n      burst_limit: 120,\n    },\n    general: {\n      name: 'General Business',\n      subscription_plan: 'basic' as const,\n      rate_limit_per_hour: 3000,\n      burst_limit: 100,\n    },\n  }\n  \n  const defaults = industryDefaults[industry]\n  \n  return {\n    id: `test-org-${industry}`,\n    industry,\n    is_active: true,\n    ...defaults,\n    ...overrides,\n  }\n}\n\n/**\n * Create a QueryClient with test-friendly defaults\n */\nexport const createTestQueryClient = (): QueryClient => {\n  return new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n        cacheTime: 0,\n      },\n      mutations: {\n        retry: false,\n      },\n    },\n  })\n}\n\n/**\n * Create the test wrapper with all providers\n */\nconst createTestWrapper = (options: MultiTenantRenderOptions = {}) => {\n  const {\n    user = null,\n    organisation = null,\n    isAuthenticated = !!user,\n    isAuthLoading = false,\n    queryClient = createTestQueryClient(),\n    skipAuthProvider = false,\n    skipQueryProvider = false,\n    skipToastProvider = false,\n  } = options\n  \n  const authContext: TestAuthContext = {\n    user,\n    organisation,\n    isAuthenticated,\n    isLoading: isAuthLoading,\n    login: jest.fn(),\n    logout: jest.fn(),\n    refreshToken: jest.fn(),\n  }\n  \n  // Build wrapper component\n  const TestWrapper: React.FC<{ children: ReactNode }> = ({ children }) => {\n    let wrappedChildren = children\n    \n    // Wrap with QueryClient provider\n    if (!skipQueryProvider) {\n      wrappedChildren = (\n        <QueryClientProvider client={queryClient}>\n          {wrappedChildren}\n        </QueryClientProvider>\n      )\n    }\n    \n    // Wrap with Auth provider\n    if (!skipAuthProvider) {\n      wrappedChildren = (\n        <MockAuthProvider value={authContext}>\n          {wrappedChildren}\n        </MockAuthProvider>\n      )\n    }\n    \n    // Wrap with Toast provider\n    if (!skipToastProvider) {\n      wrappedChildren = (\n        <>\n          {wrappedChildren}\n          <Toaster />\n        </>\n      )\n    }\n    \n    return <>{wrappedChildren}</>\n  }\n  \n  return TestWrapper\n}\n\n/**\n * Custom render function with multi-tenant context\n */\nexport const renderWithProviders = (\n  ui: ReactElement,\n  options: MultiTenantRenderOptions = {}\n): RenderResult & {\n  user: ReturnType<typeof userEvent.setup>\n  rerender: (ui: ReactElement, options?: MultiTenantRenderOptions) => void\n} => {\n  const TestWrapper = createTestWrapper(options)\n  \n  const renderResult = render(ui, {\n    wrapper: TestWrapper,\n    ...options,\n  })\n  \n  // Setup user event\n  const userEventSetup = userEvent.setup()\n  \n  // Custom rerender that maintains the wrapper\n  const rerender = (ui: ReactElement, rerenderOptions?: MultiTenantRenderOptions) => {\n    const NewTestWrapper = createTestWrapper({ ...options, ...rerenderOptions })\n    return renderResult.rerender(React.cloneElement(ui, { wrapper: NewTestWrapper }))\n  }\n  \n  return {\n    ...renderResult,\n    user: userEventSetup,\n    rerender,\n  }\n}\n\n/**\n * Render component for specific industry type\n */\nexport const renderForIndustry = (\n  ui: ReactElement,\n  industry: TestOrganisation['industry'],\n  overrides: MultiTenantRenderOptions = {}\n) => {\n  const user = createTestUser({}, industry)\n  const organisation = createTestOrganisation(industry)\n  \n  return renderWithProviders(ui, {\n    user,\n    organisation,\n    industryType: industry,\n    ...overrides,\n  })\n}\n\n/**\n * Render component as admin user\n */\nexport const renderAsAdmin = (\n  ui: ReactElement,\n  options: MultiTenantRenderOptions = {}\n) => {\n  const adminUser = createTestUser({ role: 'admin', email: 'admin@test.com' })\n  const organisation = createTestOrganisation(options.industryType)\n  \n  return renderWithProviders(ui, {\n    user: adminUser,\n    organisation,\n    ...options,\n  })\n}\n\n/**\n * Render component as unauthenticated user\n */\nexport const renderUnauthenticated = (\n  ui: ReactElement,\n  options: MultiTenantRenderOptions = {}\n) => {\n  return renderWithProviders(ui, {\n    user: null,\n    organisation: null,\n    isAuthenticated: false,\n    ...options,\n  })\n}\n\n/**\n * Mock API endpoints for testing\n */\nexport const mockApiEndpoints = {\n  // Authentication endpoints\n  mockAuth: (user: TestUser | null = null) => {\n    server.use(\n      http.get('/api/v1/auth/me', () => {\n        if (!user) {\n          return new HttpResponse(null, { status: 401 })\n        }\n        return HttpResponse.json(user)\n      }),\n      \n      http.post('/api/v1/auth/login', () => {\n        return HttpResponse.json({ \n          access_token: 'mock_access_token',\n          refresh_token: 'mock_refresh_token',\n          user: user || createTestUser(),\n        })\n      }),\n      \n      http.post('/api/v1/auth/logout', () => {\n        return HttpResponse.json({ message: 'Logged out successfully' })\n      })\n    )\n  },\n  \n  // Organisation endpoints\n  mockOrganisation: (organisation: TestOrganisation) => {\n    server.use(\n      http.get('/api/v1/organisations/:id', ({ params }) => {\n        if (params.id === organisation.id) {\n          return HttpResponse.json(organisation)\n        }\n        return new HttpResponse(null, { status: 404 })\n      }),\n      \n      http.get('/api/v1/organisations', () => {\n        return HttpResponse.json({ organisations: [organisation] })\n      })\n    )\n  },\n  \n  // Market Edge endpoints\n  mockMarketEdge: () => {\n    server.use(\n      http.get('/api/v1/market-edge/competitors', () => {\n        return HttpResponse.json([\n          {\n            id: '1',\n            name: 'Competitor 1',\n            market_share: 25.5,\n            pricing_tier: 'premium',\n          }\n        ])\n      }),\n      \n      http.get('/api/v1/market-edge/performance', () => {\n        return HttpResponse.json({\n          revenue: 150000,\n          growth: 12.5,\n          market_position: 3,\n        })\n      })\n    )\n  },\n  \n  // Admin endpoints\n  mockAdmin: () => {\n    server.use(\n      http.get('/api/v1/admin/dashboard/stats', () => {\n        return HttpResponse.json({\n          total_users: 150,\n          active_organisations: 45,\n          system_health: 'good',\n        })\n      })\n    )\n  },\n  \n  // Rate limiting endpoints\n  mockRateLimiting: (blocked: boolean = false) => {\n    server.use(\n      http.get('/api/v1/admin/rate-limits/status', () => {\n        return HttpResponse.json({\n          remaining: blocked ? 0 : 50,\n          reset_time: Date.now() + 60000,\n          blocked,\n        })\n      })\n    )\n  },\n}\n\n/**\n * Accessibility testing helper\n */\nexport const testAccessibility = async (container: Element): Promise<void> => {\n  const results = await axe(container)\n  expect(results).toHaveNoViolations()\n}\n\n/**\n * Performance testing helper\n */\nexport const measureRenderTime = async (renderFn: () => Promise<any> | any): Promise<number> => {\n  const start = performance.now()\n  await renderFn()\n  const end = performance.now()\n  return end - start\n}\n\n/**\n * Wait for loading states to complete\n */\nexport const waitForLoadingToFinish = async (container: Element): Promise<void> => {\n  const { waitForElementToBeRemoved } = await import('@testing-library/react')\n  \n  // Wait for loading spinners to disappear\n  try {\n    await waitForElementToBeRemoved(\n      () => container.querySelector('[data-testid=\"loading\"]') ||\n            container.querySelector('.loading') ||\n            container.querySelector('[role=\"progressbar\"]'),\n      { timeout: 5000 }\n    )\n  } catch (error) {\n    // Loading elements might not exist, which is fine\n  }\n}\n\n/**\n * Simulate network delay for more realistic testing\n */\nexport const withNetworkDelay = <T extends (...args: any[]) => any>(\n  fn: T,\n  delay: number = 100\n): T => {\n  return ((...args: any[]) => {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        resolve(fn(...args))\n      }, delay)\n    })\n  }) as T\n}\n\n/**\n * Generate test data for list components\n */\nexport const generateTestData = {\n  competitors: (count: number = 5) => \n    Array.from({ length: count }, (_, i) => ({\n      id: `competitor-${i + 1}`,\n      name: `Competitor ${i + 1}`,\n      market_share: Math.random() * 50,\n      pricing_tier: ['budget', 'mid-range', 'premium'][Math.floor(Math.random() * 3)],\n    })),\n  \n  users: (count: number = 10) =>\n    Array.from({ length: count }, (_, i) => createTestUser({\n      id: `user-${i + 1}`,\n      email: `user${i + 1}@test.com`,\n      name: `Test User ${i + 1}`,\n    })),\n  \n  organisations: (count: number = 5) =>\n    Array.from({ length: count }, (_, i) => createTestOrganisation('general', {\n      id: `org-${i + 1}`,\n      name: `Organisation ${i + 1}`,\n    })),\n}\n\n/**\n * Test scenarios for industry-specific features\n */\nexport const industryTestScenarios = {\n  cinema: {\n    highTrafficRateLimiting: () => mockApiEndpoints.mockRateLimiting(false),\n    ticketingSystem: () => {\n      server.use(\n        http.get('/api/v1/cinema/showtimes', () => {\n          return HttpResponse.json([\n            { id: '1', movie: 'Test Movie', time: '19:00', available_seats: 150 }\n          ])\n        })\n      )\n    },\n  },\n  \n  hotel: {\n    realTimePricing: () => {\n      server.use(\n        http.get('/api/v1/hotel/pricing', () => {\n          return HttpResponse.json({\n            base_rate: 120,\n            dynamic_rate: 145,\n            occupancy: 0.75,\n          })\n        })\n      )\n    },\n  },\n  \n  gym: {\n    membershipTracking: () => {\n      server.use(\n        http.get('/api/v1/gym/members', () => {\n          return HttpResponse.json([\n            { id: '1', name: 'John Doe', membership_type: 'premium', check_ins: 15 }\n          ])\n        })\n      )\n    },\n  },\n}\n\n// Re-export testing library utilities for convenience\nexport * from '@testing-library/react'\nexport { userEvent }\n\n// Export default render for backward compatibility\nexport { render as defaultRender } from '@testing-library/react'"],"names":["createTestOrganisation","createTestQueryClient","createTestUser","defaultRender","render","generateTestData","industryTestScenarios","measureRenderTime","mockApiEndpoints","renderAsAdmin","renderForIndustry","renderUnauthenticated","renderWithProviders","testAccessibility","userEvent","waitForLoadingToFinish","withNetworkDelay","expect","extend","toHaveNoViolations","MockAuthProvider","children","value","React","useEffect","window","__TEST_AUTH_CONTEXT__","overrides","industry","industrySpecificDefaults","cinema","email","name","hotel","gym","b2b","retail","general","id","role","organisation_id","is_active","created_at","Date","toISOString","updated_at","industryDefaults","subscription_plan","rate_limit_per_hour","burst_limit","defaults","QueryClient","defaultOptions","queries","retry","cacheTime","mutations","createTestWrapper","options","user","organisation","isAuthenticated","isAuthLoading","queryClient","skipAuthProvider","skipQueryProvider","skipToastProvider","authContext","isLoading","login","jest","fn","logout","refreshToken","TestWrapper","wrappedChildren","QueryClientProvider","client","Toaster","ui","renderResult","wrapper","userEventSetup","setup","rerender","rerenderOptions","NewTestWrapper","cloneElement","industryType","adminUser","mockAuth","server","use","http","get","HttpResponse","status","json","post","access_token","refresh_token","message","mockOrganisation","params","organisations","mockMarketEdge","market_share","pricing_tier","revenue","growth","market_position","mockAdmin","total_users","active_organisations","system_health","mockRateLimiting","blocked","remaining","reset_time","now","container","results","axe","renderFn","start","performance","end","waitForElementToBeRemoved","querySelector","timeout","error","delay","args","Promise","resolve","setTimeout","competitors","count","Array","from","length","_","i","Math","random","floor","users","highTrafficRateLimiting","ticketingSystem","movie","time","available_seats","realTimePricing","base_rate","dynamic_rate","occupancy","membershipTracking","membership_type","check_ins"],"mappings":"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"}