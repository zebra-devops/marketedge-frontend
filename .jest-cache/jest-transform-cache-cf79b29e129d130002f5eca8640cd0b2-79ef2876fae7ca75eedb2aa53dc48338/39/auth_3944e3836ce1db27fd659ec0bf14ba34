98a5b7b37f59a8b385088896ebe6e414
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AuthService: function() {
        return AuthService;
    },
    authService: function() {
        return authService;
    }
});
const _api = require("./api");
const _jscookie = /*#__PURE__*/ _interop_require_default(require("js-cookie"));
const _timerutils = require("../utils/timer-utils");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class AuthService {
    async login(loginData) {
        // EMERGENCY CIRCUIT BREAKER: Prevent duplicate requests with the same auth code
        if (this.processedAuthCodes.has(loginData.code)) {
            console.error("EMERGENCY CIRCUIT BREAKER: Authentication code has already been processed:", loginData.code.substring(0, 10) + "...");
            throw new Error("Authentication code has already been processed");
        }
        // EMERGENCY CIRCUIT BREAKER: Prevent multiple concurrent login requests
        if (this.loginPromise) {
            console.error("EMERGENCY CIRCUIT BREAKER: Login already in progress, rejecting duplicate request");
            throw new Error("Login already in progress");
        }
        // Mark this auth code as being processed IMMEDIATELY
        this.processedAuthCodes.add(loginData.code);
        console.log("EMERGENCY CIRCUIT BREAKER: Auth code marked as processed:", loginData.code.substring(0, 10) + "...");
        console.log("Initiating login request to backend");
        this.loginPromise = (async ()=>{
            try {
                const response = await _api.apiService.post("/auth/login", loginData);
                console.log("Login response received from backend");
                // Store token metadata
                this.setTokens(response);
                this.setUserData(response.user, response.tenant, response.permissions);
                // Clean up processed auth codes (keep only recent ones to prevent memory leak)
                if (this.processedAuthCodes.size > 10) {
                    this.processedAuthCodes.clear();
                }
                return response;
            } catch (error) {
                // Remove the failed auth code from processed set to allow retry
                this.processedAuthCodes.delete(loginData.code);
                console.error("Login request failed:", error);
                // Handle specific backend errors
                if (error?.response?.status === 429) {
                    throw new Error("Too many login attempts. Please wait and try again.");
                } else if (error?.response?.status === 400) {
                    throw new Error("Invalid authorization code. Please try logging in again.");
                } else if (error?.response?.status === 401) {
                    throw new Error("Authentication failed. Please try logging in again.");
                } else if (error?.message?.includes("ERR_INSUFFICIENT_RESOURCES")) {
                    throw new Error("Server overloaded. Please wait and try again.");
                }
                throw error;
            } finally{
                // Clear the login promise after completion
                this.loginPromise = null;
            }
        })();
        return this.loginPromise;
    }
    async refreshToken() {
        // Prevent multiple concurrent refresh requests
        if (this.refreshTokenPromise) {
            return this.refreshTokenPromise;
        }
        const refreshToken = this.getRefreshToken();
        if (!refreshToken) {
            throw new Error("No refresh token available");
        }
        this.refreshTokenPromise = _api.apiService.post("/auth/refresh", {
            refresh_token: refreshToken
        });
        try {
            const response = await this.refreshTokenPromise;
            this.setTokens(response);
            this.setUserData(response.user, response.tenant, response.permissions);
            return response;
        } catch (error) {
            // If refresh fails, clear tokens and redirect to login
            this.clearTokens();
            throw error;
        } finally{
            this.refreshTokenPromise = null;
        }
    }
    async getCurrentUser() {
        try {
            return await _api.apiService.get("/auth/me");
        } catch (error) {
            if (error?.response?.status === 401) {
                // Try to refresh token and retry
                try {
                    await this.refreshToken();
                    return await _api.apiService.get("/auth/me");
                } catch (refreshError) {
                    this.clearTokens();
                    throw refreshError;
                }
            }
            throw error;
        }
    }
    async getAuth0Url(redirectUri, additionalScopes, organizationHint) {
        const params = new URLSearchParams({
            redirect_uri: redirectUri
        });
        if (additionalScopes?.length) {
            params.append("additional_scopes", additionalScopes.join(","));
        }
        if (organizationHint) {
            params.append("organization_hint", organizationHint);
        }
        return _api.apiService.get(`/auth/auth0-url?${params}`);
    }
    async logout(allDevices = false) {
        const refreshToken = this.getRefreshToken();
        try {
            await _api.apiService.post("/auth/logout", {
                refresh_token: refreshToken,
                all_devices: allDevices
            });
        } catch (error) {
            console.warn("Logout API call failed:", error);
        // Continue with local cleanup even if server logout fails
        }
        // Enhanced session cleanup
        this.performCompleteSessionCleanup();
        // Redirect to login page
        window.location.href = "/login";
    }
    performCompleteSessionCleanup() {
        // Clear tokens and user data
        this.clearTokens();
        this.clearUserData();
        // Clear all localStorage with auth-related data
        const keysToRemove = [
            "current_user",
            "tenant_info",
            "user_permissions",
            "token_expires_at",
            "auth_state",
            "last_activity"
        ];
        keysToRemove.forEach((key)=>{
            localStorage.removeItem(key);
        });
        // Clear all sessionStorage
        sessionStorage.clear();
        // Clear intervals
        if (typeof window !== "undefined") {
            const refreshInterval = window.__authRefreshInterval;
            const timeoutInterval = window.__sessionTimeoutInterval;
            if (refreshInterval) {
                (0, _timerutils.safeClearInterval)(refreshInterval);
                delete window.__authRefreshInterval;
            }
            if (timeoutInterval) {
                (0, _timerutils.safeClearInterval)(timeoutInterval);
                delete window.__sessionTimeoutInterval;
            }
        }
        // Clear any cached data from API service
        if (_api.apiService.clearCache) {
            _api.apiService.clearCache();
        }
        // Clear browser history state related to auth
        if (typeof window !== "undefined" && window.history.replaceState) {
            const currentUrl = window.location.pathname;
            window.history.replaceState(null, "", currentUrl);
        }
        console.info("Complete session cleanup performed");
    }
    async checkSession() {
        return _api.apiService.get("/auth/session/check");
    }
    async extendSession() {
        return _api.apiService.post("/auth/session/extend");
    }
    getToken() {
        return _jscookie.default.get("access_token");
    }
    getRefreshToken() {
        return _jscookie.default.get("refresh_token");
    }
    isAuthenticated() {
        const token = this.getToken();
        const user = this.getStoredUser();
        return !!(token && user);
    }
    getUserPermissions() {
        try {
            const permissions = localStorage.getItem("user_permissions");
            return permissions ? JSON.parse(permissions) : [];
        } catch  {
            return [];
        }
    }
    hasPermission(permission) {
        const permissions = this.getUserPermissions();
        return permissions.includes(permission);
    }
    hasAnyPermission(requiredPermissions) {
        const userPermissions = this.getUserPermissions();
        return requiredPermissions.some((perm)=>userPermissions.includes(perm));
    }
    getUserRole() {
        const user = this.getStoredUser();
        return user?.role || null;
    }
    getTenantInfo() {
        try {
            const tenantData = localStorage.getItem("tenant_info");
            return tenantData ? JSON.parse(tenantData) : null;
        } catch  {
            return null;
        }
    }
    shouldRefreshToken() {
        // Check if we should proactively refresh the token
        const tokenExpiry = localStorage.getItem("token_expires_at");
        if (!tokenExpiry) return false;
        const expiryTime = new Date(tokenExpiry).getTime();
        const currentTime = Date.now();
        return expiryTime - currentTime <= this.tokenRefreshThreshold;
    }
    // Auto-refresh token if needed
    async ensureValidToken() {
        const token = this.getToken();
        if (!token) return null;
        if (this.shouldRefreshToken()) {
            try {
                await this.refreshToken();
                return this.getToken();
            } catch (error) {
                console.error("Token refresh failed:", error);
                return null;
            }
        }
        return token;
    }
    setTokens(tokenResponse) {
        // Set HTTP-only cookies are handled by the server
        // Store token expiry for refresh logic with defensive validation
        try {
            const expiresInSeconds = tokenResponse.expires_in || 3600 // Default to 1 hour if not provided
            ;
            const expiresInMilliseconds = Number(expiresInSeconds) * 1000;
            // Validate that we have a valid number
            if (isNaN(expiresInMilliseconds) || expiresInMilliseconds <= 0) {
                throw new Error(`Invalid expires_in value: ${tokenResponse.expires_in}`);
            }
            const expiryTime = new Date(Date.now() + expiresInMilliseconds);
            // Validate the date is valid before converting to ISO string
            if (isNaN(expiryTime.getTime())) {
                throw new Error(`Invalid expiry date calculated from expires_in: ${tokenResponse.expires_in}`);
            }
            localStorage.setItem("token_expires_at", expiryTime.toISOString());
            console.log(`Token expiry set: ${expiryTime.toISOString()} (expires_in: ${expiresInSeconds}s)`);
        } catch (error) {
            console.error("Error setting token expiry time:", error);
            // Fallback: set expiry to 1 hour from now
            const fallbackExpiry = new Date(Date.now() + 3600000) // 1 hour
            ;
            localStorage.setItem("token_expires_at", fallbackExpiry.toISOString());
            console.warn(`Using fallback token expiry: ${fallbackExpiry.toISOString()}`);
        }
    }
    setUserData(user, tenant, permissions) {
        localStorage.setItem("current_user", JSON.stringify(user));
        localStorage.setItem("tenant_info", JSON.stringify(tenant));
        localStorage.setItem("user_permissions", JSON.stringify(permissions));
    }
    getStoredUser() {
        try {
            const userData = localStorage.getItem("current_user");
            return userData ? JSON.parse(userData) : null;
        } catch  {
            return null;
        }
    }
    clearTokens() {
        _jscookie.default.remove("access_token");
        _jscookie.default.remove("refresh_token");
        localStorage.removeItem("token_expires_at");
    }
    clearUserData() {
        localStorage.removeItem("current_user");
        localStorage.removeItem("tenant_info");
        localStorage.removeItem("user_permissions");
    }
    // Enhanced auto-refresh with tenant validation and better error handling
    initializeAutoRefresh() {
        if (!this.isAuthenticated() || process.env.NODE_ENV === "test" || typeof window === "undefined") {
            return;
        }
        // Ensure timer functions are available in production
        (0, _timerutils.ensureTimerFunctions)();
        // Clear existing interval if it exists
        const existingInterval = window.__authRefreshInterval;
        if (existingInterval) {
            (0, _timerutils.safeClearInterval)(existingInterval);
            delete window.__authRefreshInterval;
        }
        // Check token status every minute
        const refreshInterval = (0, _timerutils.safeSetInterval)(()=>{
            if (!this.isAuthenticated()) {
                (0, _timerutils.safeClearInterval)(refreshInterval);
                if (typeof window !== "undefined") {
                    delete window.__authRefreshInterval;
                }
                return;
            }
            if (this.shouldRefreshToken()) {
                this.refreshToken().catch((error)=>{
                    console.error("Background token refresh failed:", error);
                    // If refresh fails due to invalid token, clear session and redirect
                    if (error?.response?.status === 401) {
                        console.warn("Session expired, redirecting to login");
                        this.clearTokens();
                        this.clearUserData();
                        window.location.href = "/login";
                    }
                });
            }
        }, 60000) // Check every minute
        (window).__authRefreshInterval = refreshInterval;
    }
    trackUserActivity() {
        this.lastActivityTime = Date.now();
    }
    checkSessionTimeout() {
        const now = Date.now();
        const timeSinceLastActivity = now - this.lastActivityTime;
        return timeSinceLastActivity > this.sessionTimeoutThreshold;
    }
    initializeActivityTracking() {
        // EMERGENCY FIX: Activity tracking disabled to resolve persistent setInterval production errors
        // This prevents the "TypeError: setInterval(...) is not a function" error in production
        console.log("Activity tracking disabled - emergency production fix");
        // Simple activity tracking without timers - just update activity time on page load
        if (typeof window !== "undefined" && process.env.NODE_ENV !== "test") {
            this.trackUserActivity();
        }
        return;
    }
    constructor(){
        this.refreshTokenPromise = null;
        this.loginPromise = null;
        this.tokenRefreshThreshold = 5 * 60 * 1000 // 5 minutes in milliseconds
        ;
        this.processedAuthCodes = new Set();
        // Enhanced session timeout detection
        this.sessionTimeoutThreshold = 30 * 60 * 1000 // 30 minutes
        ;
        this.lastActivityTime = Date.now();
    }
}
const authService = new AuthService() // Note: Timer initialization moved to client-side components to prevent SSR issues
;

//# sourceMappingURL=data:application/json;base64,