{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/market-edge/__tests__/CompetitorTable.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render, screen } from '@/test-utils'\nimport userEvent from '@testing-library/user-event'\nimport { CompetitorTable } from '../CompetitorTable'\nimport { Competitor } from '@/types/market-edge'\n\n// Mock Heroicons\njest.mock('@heroicons/react/24/outline', () => ({\n  ChevronUpIcon: ({ className }: { className?: string }) => \n    <svg data-testid=\"chevron-up\" className={className}>up</svg>,\n  ChevronDownIcon: ({ className }: { className?: string }) => \n    <svg data-testid=\"chevron-down\" className={className}>down</svg>,\n  EyeIcon: ({ className }: { className?: string }) => \n    <svg data-testid=\"eye-icon\" className={className}>view</svg>,\n  PencilIcon: ({ className }: { className?: string }) => \n    <svg data-testid=\"pencil-icon\" className={className}>edit</svg>,\n  GlobeAltIcon: ({ className }: { className?: string }) => \n    <svg data-testid=\"globe-icon\" className={className}>globe</svg>,\n  BuildingOfficeIcon: ({ className }: { className?: string }) => \n    <svg data-testid=\"building-icon\" className={className}>building</svg>,\n}))\n\ndescribe('CompetitorTable Component', () => {\n  const user = userEvent.setup()\n\n  const mockCompetitors: Competitor[] = [\n    {\n      id: 'comp-1',\n      name: 'Alpha Corp',\n      business_type: 'Technology',\n      market_share_estimate: 25.5,\n      tracking_priority: 4,\n      website: 'https://alpha-corp.com',\n      last_updated: '2023-12-01T10:00:00Z',\n    },\n    {\n      id: 'comp-2',\n      name: 'Beta LLC',\n      business_type: 'Retail',\n      market_share_estimate: 18.3,\n      tracking_priority: 2,\n      website: 'https://beta-llc.com',\n      last_updated: '2023-11-28T15:30:00Z',\n    },\n    {\n      id: 'comp-3',\n      name: 'Gamma Industries',\n      business_type: 'Manufacturing',\n      market_share_estimate: null,\n      tracking_priority: 5,\n      website: null,\n      last_updated: null,\n    },\n  ]\n\n  const defaultProps = {\n    competitors: mockCompetitors,\n    isLoading: false,\n  }\n\n  beforeEach(() => {\n    jest.clearAllMocks()\n    // Mock current date for consistent last_updated formatting\n    jest.useFakeTimers()\n    jest.setSystemTime(new Date('2023-12-05T12:00:00Z'))\n  })\n\n  afterEach(() => {\n    jest.useRealTimers()\n  })\n\n  it('renders table with competitors data', () => {\n    render(<CompetitorTable {...defaultProps} />)\n    \n    expect(screen.getByRole('table')).toBeInTheDocument()\n    expect(screen.getByText('Alpha Corp')).toBeInTheDocument()\n    expect(screen.getByText('Beta LLC')).toBeInTheDocument()\n    expect(screen.getByText('Gamma Industries')).toBeInTheDocument()\n  })\n\n  it('displays loading state', () => {\n    render(<CompetitorTable {...defaultProps} isLoading={true} />)\n    \n    expect(screen.getByText('Loading competitors...')).toBeInTheDocument()\n    expect(screen.queryByRole('table')).not.toBeInTheDocument()\n  })\n\n  it('displays empty state when no competitors', () => {\n    render(<CompetitorTable {...defaultProps} competitors={[]} />)\n    \n    expect(screen.getByText('No competitors')).toBeInTheDocument()\n    expect(screen.getByText('Get started by adding competitors to track in this market.')).toBeInTheDocument()\n    expect(screen.getByTestId('building-icon')).toBeInTheDocument()\n  })\n\n  it('renders all table headers', () => {\n    render(<CompetitorTable {...defaultProps} />)\n    \n    expect(screen.getByText('Competitor')).toBeInTheDocument()\n    expect(screen.getByText('Type')).toBeInTheDocument()\n    expect(screen.getByText('Market Share')).toBeInTheDocument()\n    expect(screen.getByText('Priority')).toBeInTheDocument()\n    expect(screen.getByText('Last Updated')).toBeInTheDocument()\n  })\n\n  it('formats market share correctly', () => {\n    render(<CompetitorTable {...defaultProps} />)\n    \n    expect(screen.getByText('25.5%')).toBeInTheDocument()\n    expect(screen.getByText('18.3%')).toBeInTheDocument()\n    expect(screen.getByText('N/A')).toBeInTheDocument() // For null market share\n  })\n\n  it('displays priority badges with correct styling', () => {\n    render(<CompetitorTable {...defaultProps} />)\n    \n    const highPriority = screen.getByText('High')\n    expect(highPriority).toHaveClass('bg-orange-100', 'text-orange-800')\n    \n    const belowAveragePriority = screen.getByText('Below Average')\n    expect(belowAveragePriority).toHaveClass('bg-blue-100', 'text-blue-800')\n    \n    const criticalPriority = screen.getByText('Critical')\n    expect(criticalPriority).toHaveClass('bg-red-100', 'text-red-800')\n  })\n\n  it('formats last updated dates correctly', () => {\n    render(<CompetitorTable {...defaultProps} />)\n    \n    expect(screen.getByText('4 days ago')).toBeInTheDocument() // Dec 1\n    expect(screen.getByText('1 weeks ago')).toBeInTheDocument() // Nov 28 \n    expect(screen.getByText('Never')).toBeInTheDocument() // null date\n  })\n\n  it('renders website links correctly', () => {\n    render(<CompetitorTable {...defaultProps} />)\n    \n    const alphaLink = screen.getByText('alpha-corp.com')\n    expect(alphaLink).toHaveAttribute('href', 'https://alpha-corp.com')\n    expect(alphaLink).toHaveAttribute('target', '_blank')\n    expect(alphaLink).toHaveAttribute('rel', 'noopener noreferrer')\n    \n    const betaLink = screen.getByText('beta-llc.com')\n    expect(betaLink).toHaveAttribute('href', 'https://beta-llc.com')\n  })\n\n  it('handles sorting by name', async () => {\n    render(<CompetitorTable {...defaultProps} />)\n    \n    const nameHeader = screen.getByText('Competitor')\n    await user.click(nameHeader)\n    \n    const rows = screen.getAllByRole('row')\n    // First row is header, so check data rows\n    expect(rows[1]).toHaveTextContent('Alpha Corp')\n    expect(rows[2]).toHaveTextContent('Beta LLC')\n    expect(rows[3]).toHaveTextContent('Gamma Industries')\n    \n    // Click again to sort descending\n    await user.click(nameHeader)\n    const rowsDesc = screen.getAllByRole('row')\n    expect(rowsDesc[1]).toHaveTextContent('Gamma Industries')\n    expect(rowsDesc[2]).toHaveTextContent('Beta LLC')\n    expect(rowsDesc[3]).toHaveTextContent('Alpha Corp')\n  })\n\n  it('handles sorting by market share', async () => {\n    render(<CompetitorTable {...defaultProps} />)\n    \n    const marketShareHeader = screen.getByText('Market Share')\n    await user.click(marketShareHeader)\n    \n    // Should sort by market share ascending (null values last)\n    const rows = screen.getAllByRole('row')\n    expect(rows[1]).toHaveTextContent('Beta LLC') // 18.3%\n    expect(rows[2]).toHaveTextContent('Alpha Corp') // 25.5%\n    expect(rows[3]).toHaveTextContent('Gamma Industries') // null\n  })\n\n  it('shows sort indicators correctly', async () => {\n    render(<CompetitorTable {...defaultProps} />)\n    \n    const nameHeader = screen.getByText('Competitor')\n    await user.click(nameHeader)\n    \n    expect(screen.getByTestId('chevron-up')).toBeInTheDocument()\n    \n    await user.click(nameHeader)\n    expect(screen.getByTestId('chevron-down')).toBeInTheDocument()\n  })\n\n  it('calls onViewCompetitor when view button is clicked', async () => {\n    const onViewCompetitor = jest.fn()\n    render(\n      <CompetitorTable {...defaultProps} onViewCompetitor={onViewCompetitor} />\n    )\n    \n    const viewButtons = screen.getAllByTestId('eye-icon')\n    await user.click(viewButtons[0])\n    \n    expect(onViewCompetitor).toHaveBeenCalledWith(mockCompetitors[0])\n  })\n\n  it('calls onEditCompetitor when edit button is clicked', async () => {\n    const onEditCompetitor = jest.fn()\n    render(\n      <CompetitorTable {...defaultProps} onEditCompetitor={onEditCompetitor} />\n    )\n    \n    const editButtons = screen.getAllByTestId('pencil-icon')\n    await user.click(editButtons[0])\n    \n    expect(onEditCompetitor).toHaveBeenCalledWith(mockCompetitors[0])\n  })\n\n  it('does not render action buttons when handlers not provided', () => {\n    render(<CompetitorTable {...defaultProps} />)\n    \n    expect(screen.queryByTestId('eye-icon')).not.toBeInTheDocument()\n    expect(screen.queryByTestId('pencil-icon')).not.toBeInTheDocument()\n  })\n\n  it('applies custom className', () => {\n    render(<CompetitorTable {...defaultProps} className=\"custom-table-class\" />)\n    \n    const tableContainer = screen.getByRole('table').closest('div')\n    expect(tableContainer).toHaveClass('custom-table-class')\n  })\n\n  it('handles null/undefined business types', () => {\n    const competitorsWithNullType: Competitor[] = [\n      {\n        ...mockCompetitors[0],\n        business_type: null,\n      },\n    ]\n    \n    render(<CompetitorTable competitors={competitorsWithNullType} />)\n    \n    expect(screen.getByText('Not specified')).toBeInTheDocument()\n  })\n\n  it('has proper table structure and accessibility', () => {\n    render(<CompetitorTable {...defaultProps} />)\n    \n    const table = screen.getByRole('table')\n    expect(table).toHaveClass('min-w-full', 'divide-y', 'divide-gray-200')\n    \n    const thead = table.querySelector('thead')\n    expect(thead).toHaveClass('bg-gray-50')\n    \n    const tbody = table.querySelector('tbody')\n    expect(tbody).toHaveClass('bg-white', 'divide-y', 'divide-gray-200')\n  })\n\n  it('has hover effects on rows', () => {\n    render(<CompetitorTable {...defaultProps} />)\n    \n    const dataRows = screen.getAllByRole('row').slice(1) // Skip header row\n    dataRows.forEach(row => {\n      expect(row).toHaveClass('hover:bg-gray-50')\n    })\n  })\n\n  it('handles responsive design classes', () => {\n    render(<CompetitorTable {...defaultProps} />)\n    \n    const container = screen.getByRole('table').closest('div')\n    expect(container).toHaveClass('overflow-x-auto')\n    \n    const outerContainer = container?.parentElement\n    expect(outerContainer).toHaveClass('bg-white', 'rounded-lg', 'border', 'border-gray-200', 'overflow-hidden')\n  })\n})"],"names":["jest","mock","ChevronUpIcon","className","svg","data-testid","ChevronDownIcon","EyeIcon","PencilIcon","GlobeAltIcon","BuildingOfficeIcon","describe","user","userEvent","setup","mockCompetitors","id","name","business_type","market_share_estimate","tracking_priority","website","last_updated","defaultProps","competitors","isLoading","beforeEach","clearAllMocks","useFakeTimers","setSystemTime","Date","afterEach","useRealTimers","it","render","CompetitorTable","expect","screen","getByRole","toBeInTheDocument","getByText","queryByRole","not","getByTestId","highPriority","toHaveClass","belowAveragePriority","criticalPriority","alphaLink","toHaveAttribute","betaLink","nameHeader","click","rows","getAllByRole","toHaveTextContent","rowsDesc","marketShareHeader","onViewCompetitor","fn","viewButtons","getAllByTestId","toHaveBeenCalledWith","onEditCompetitor","editButtons","queryByTestId","tableContainer","closest","competitorsWithNullType","table","thead","querySelector","tbody","dataRows","slice","forEach","row","container","outerContainer","parentElement"],"mappings":"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"}