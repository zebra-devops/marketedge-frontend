{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/__tests__/mocks/handlers.ts"],"sourcesContent":["/**\n * MSW (Mock Service Worker) handlers for API mocking in tests\n * \n * This file defines mock API responses for all platform endpoints,\n * supporting different tenant scenarios and user contexts.\n */\n\nimport { http, HttpResponse } from 'msw'\nimport { MockUser, MockOrganization, createMockUser, createMockOrganization, createMockFeatureFlags } from '../utils/test-utils'\n\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_BASE_URL || 'http://localhost:8000'\n\n// Store for dynamic mock data\nlet mockUsers: Record<string, MockUser> = {}\nlet mockOrganizations: Record<string, MockOrganization> = {}\nlet mockFeatureFlags: Record<string, boolean> = createMockFeatureFlags()\n\n// Helper to get or create mock user\nconst getOrCreateMockUser = (userId: string = 'user-123'): MockUser => {\n  if (!mockUsers[userId]) {\n    mockUsers[userId] = createMockUser({ id: userId })\n  }\n  return mockUsers[userId]\n}\n\n// Helper to get or create mock organization\nconst getOrCreateMockOrganization = (orgId: string = 'org-123'): MockOrganization => {\n  if (!mockOrganizations[orgId]) {\n    mockOrganizations[orgId] = createMockOrganization({ id: orgId })\n  }\n  return mockOrganizations[orgId]\n}\n\nexport const handlers = [\n  // Authentication endpoints\n  http.get(`${API_BASE_URL}/api/v1/auth/me`, () => {\n    const user = getOrCreateMockUser()\n    return HttpResponse.json(user)\n  }),\n\n  http.post(`${API_BASE_URL}/api/v1/auth/login`, () => {\n    return HttpResponse.json({\n      access_token: 'mock-access-token',\n      refresh_token: 'mock-refresh-token',\n      token_type: 'Bearer',\n      expires_in: 3600,\n    })\n  }),\n\n  http.post(`${API_BASE_URL}/api/v1/auth/logout`, () => {\n    return HttpResponse.json({ message: 'Logged out successfully' })\n  }),\n\n  // User endpoints\n  http.get(`${API_BASE_URL}/api/v1/users/me`, () => {\n    const user = getOrCreateMockUser()\n    return HttpResponse.json(user)\n  }),\n\n  http.get(`${API_BASE_URL}/api/v1/users`, () => {\n    const users = Object.values(mockUsers)\n    return HttpResponse.json({ users, total: users.length })\n  }),\n\n  // Organization endpoints\n  http.get(`${API_BASE_URL}/api/v1/organisations/me`, () => {\n    const organization = getOrCreateMockOrganization()\n    return HttpResponse.json(organization)\n  }),\n\n  http.get(`${API_BASE_URL}/api/v1/organisations`, () => {\n    const organizations = Object.values(mockOrganizations)\n    return HttpResponse.json({ organizations, total: organizations.length })\n  }),\n\n  http.get(`${API_BASE_URL}/api/v1/organisations/:orgId`, ({ params }) => {\n    const { orgId } = params\n    const organization = getOrCreateMockOrganization(orgId as string)\n    return HttpResponse.json(organization)\n  }),\n\n  // Feature flags endpoints\n  http.get(`${API_BASE_URL}/api/v1/features/flags`, () => {\n    return HttpResponse.json({ flags: mockFeatureFlags })\n  }),\n\n  http.get(`${API_BASE_URL}/api/v1/features/flags/:flagKey`, ({ params }) => {\n    const { flagKey } = params\n    const isEnabled = mockFeatureFlags[flagKey as string] || false\n    return HttpResponse.json({ \n      flag_key: flagKey,\n      enabled: isEnabled,\n      rollout_percentage: isEnabled ? 100 : 0\n    })\n  }),\n\n  // Market Edge endpoints\n  http.get(`${API_BASE_URL}/api/v1/market-edge/dashboard`, () => {\n    return HttpResponse.json({\n      competitors: [\n        {\n          id: 'comp-1',\n          name: 'Competitor A',\n          market_share: 25.5,\n          pricing_trend: 'increasing',\n          last_updated: '2025-01-08T10:00:00Z'\n        },\n        {\n          id: 'comp-2',\n          name: 'Competitor B',\n          market_share: 18.3,\n          pricing_trend: 'stable',\n          last_updated: '2025-01-08T10:00:00Z'\n        }\n      ],\n      market_metrics: {\n        total_market_size: 1250000,\n        growth_rate: 8.5,\n        competitive_intensity: 'high'\n      },\n      alerts: [\n        {\n          id: 'alert-1',\n          type: 'price_change',\n          message: 'Competitor A increased prices by 5%',\n          severity: 'medium',\n          timestamp: '2025-01-08T09:30:00Z'\n        }\n      ]\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/api/v1/market-edge/competitors`, () => {\n    return HttpResponse.json({\n      competitors: [\n        {\n          id: 'comp-1',\n          name: 'Competitor A',\n          website: 'https://competitor-a.com',\n          industry: 'hotel',\n          market_share: 25.5,\n          revenue_estimate: 15000000,\n          employee_count: 150,\n          pricing_strategy: 'premium',\n          key_products: ['Product A1', 'Product A2'],\n          strengths: ['Brand recognition', 'Market presence'],\n          weaknesses: ['Higher prices', 'Limited innovation'],\n          last_analyzed: '2025-01-08T10:00:00Z'\n        }\n      ]\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/api/v1/market-edge/pricing`, () => {\n    return HttpResponse.json({\n      pricing_data: [\n        {\n          competitor: 'Competitor A',\n          product: 'Standard Room',\n          current_price: 150.00,\n          price_change: 5.0,\n          price_trend: 'increasing',\n          last_updated: '2025-01-08T10:00:00Z'\n        },\n        {\n          competitor: 'Competitor B',\n          product: 'Standard Room',\n          current_price: 145.00,\n          price_change: 0.0,\n          price_trend: 'stable',\n          last_updated: '2025-01-08T10:00:00Z'\n        }\n      ],\n      recommendations: [\n        {\n          type: 'price_optimization',\n          message: 'Consider increasing room rates by 3-7% to maintain competitiveness',\n          confidence: 85,\n          expected_impact: 'Increase revenue by 5-8%'\n        }\n      ]\n    })\n  }),\n\n  // Admin endpoints\n  http.get(`${API_BASE_URL}/api/v1/admin/dashboard/stats`, () => {\n    return HttpResponse.json({\n      feature_flags: {\n        total: 15,\n        enabled: 12,\n        disabled: 3\n      },\n      modules: {\n        total: 8,\n        active: 6,\n        enabled_for_organisations: 25\n      },\n      activity: {\n        recent_actions_24h: 142\n      },\n      system: {\n        supported_sectors: 12\n      }\n    })\n  }),\n\n\n  http.put(`${API_BASE_URL}/api/v1/admin/rate-limits/:orgId`, ({ params }) => {\n    const { orgId } = params\n    const organization = getOrCreateMockOrganization(orgId as string)\n    \n    return HttpResponse.json({\n      message: 'Rate limits updated successfully',\n      organization: {\n        organization_id: organization.id,\n        organization_name: organization.name,\n        subscription_plan: organization.subscription_plan,\n        rate_limit_per_hour: organization.rate_limit_per_hour,\n        burst_limit: organization.burst_limit,\n        rate_limit_enabled: organization.rate_limit_enabled\n      }\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/api/v1/admin/rate-limits/violations`, () => {\n    return HttpResponse.json({\n      violations: [\n        {\n          timestamp: 1704715200, // 2025-01-08T10:00:00Z\n          client_id: 'org:org-123:user:user-123',\n          org_id: 'org-123',\n          path: '/api/v1/market-edge/dashboard',\n          rate_limit_info: {\n            limit: 5000,\n            remaining: 0,\n            reset: 1704718800\n          }\n        }\n      ],\n      total: 1\n    })\n  }),\n\n  // New rate limiting management endpoints\n  http.get(`${API_BASE_URL}/api/v1/admin/rate-limits`, () => {\n    const rateLimits = Object.values(mockOrganizations).map(org => ({\n      id: `rate-limit-${org.id}`,\n      tenant_id: org.id,\n      tenant_name: org.name,\n      tier: org.subscription_plan === 'basic' ? 'standard' : \n            org.subscription_plan === 'professional' ? 'premium' : 'enterprise',\n      requests_per_hour: org.rate_limit_per_hour,\n      burst_size: org.burst_limit,\n      enabled: org.rate_limit_enabled,\n      emergency_bypass: false,\n      created_at: '2025-01-08T10:00:00Z',\n      updated_at: '2025-01-08T10:00:00Z'\n    }))\n    \n    return HttpResponse.json(rateLimits)\n  }),\n\n  http.post(`${API_BASE_URL}/api/v1/admin/rate-limits`, () => {\n    return HttpResponse.json({\n      id: 'rate-limit-new',\n      tenant_id: 'org-new',\n      tenant_name: 'New Organization',\n      tier: 'standard',\n      requests_per_hour: 1000,\n      burst_size: 100,\n      enabled: true,\n      emergency_bypass: false,\n      created_at: new Date().toISOString(),\n      updated_at: new Date().toISOString()\n    })\n  }),\n\n  http.put(`${API_BASE_URL}/api/v1/admin/rate-limits/:tenantId`, ({ params }) => {\n    const { tenantId } = params\n    const org = getOrCreateMockOrganization(tenantId as string)\n    \n    return HttpResponse.json({\n      id: `rate-limit-${tenantId}`,\n      tenant_id: tenantId,\n      tenant_name: org.name,\n      tier: 'premium',\n      requests_per_hour: 5000,\n      burst_size: 250,\n      enabled: true,\n      emergency_bypass: false,\n      created_at: '2025-01-08T10:00:00Z',\n      updated_at: new Date().toISOString()\n    })\n  }),\n\n  http.post(`${API_BASE_URL}/api/v1/admin/rate-limits/:tenantId/emergency-bypass`, ({ params }) => {\n    const { tenantId } = params\n    const org = getOrCreateMockOrganization(tenantId as string)\n    \n    return HttpResponse.json({\n      id: `rate-limit-${tenantId}`,\n      tenant_id: tenantId,\n      tenant_name: org.name,\n      tier: 'standard',\n      requests_per_hour: org.rate_limit_per_hour,\n      burst_size: org.burst_limit,\n      enabled: true,\n      emergency_bypass: true,\n      bypass_reason: 'Emergency bypass requested for testing',\n      bypass_until: new Date(Date.now() + 3600000).toISOString(), // 1 hour from now\n      created_at: '2025-01-08T10:00:00Z',\n      updated_at: new Date().toISOString()\n    })\n  }),\n\n  http.delete(`${API_BASE_URL}/api/v1/admin/rate-limits/:tenantId/emergency-bypass`, () => {\n    return HttpResponse.json({\n      message: 'Emergency bypass removed successfully'\n    })\n  }),\n\n  http.post(`${API_BASE_URL}/api/v1/admin/rate-limits/:tenantId/reset`, ({ params, request }) => {\n    const { tenantId } = params\n    const url = new URL(request.url)\n    const user_id = url.searchParams.get('user_id')\n    \n    const message = user_id \n      ? `Rate limit reset for user ${user_id} in tenant ${tenantId}`\n      : `Rate limit reset for all users in tenant ${tenantId}`\n      \n    return HttpResponse.json({ message })\n  }),\n\n  // Rate limiting observability endpoints\n  http.get(`${API_BASE_URL}/api/v1/observability/rate-limits/health`, () => {\n    return HttpResponse.json({\n      overall_status: 'healthy',\n      total_tenants: 10,\n      healthy_tenants: 8,\n      warning_tenants: 2,\n      critical_tenants: 0,\n      system_performance: {\n        avg_processing_time_ms: 2.1,\n        p95_processing_time_ms: 4.2,\n        p99_processing_time_ms: 4.8,\n        overhead_percentage: 0.8,\n        redis_connection_health: true,\n        error_rate: 0.01\n      },\n      top_violations: [\n        {\n          tenant_id: 'org-123',\n          tenant_name: 'Test Organization',\n          violation_count: 25,\n          unique_users: 3\n        }\n      ],\n      alerts: []\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/api/v1/observability/rate-limits/dashboard`, ({ request }) => {\n    const url = new URL(request.url)\n    const time_range = url.searchParams.get('time_range')\n    \n    return HttpResponse.json({\n      time_range: time_range || '24h',\n      total_requests: 125000,\n      blocked_requests: 847,\n      block_rate: 0.68,\n      unique_tenants: 10,\n      unique_users: 156,\n      performance_metrics: {\n        avg_processing_time_ms: 2.3,\n        p95_processing_time_ms: 4.5,\n        p99_processing_time_ms: 4.9,\n        overhead_percentage: 0.9,\n        redis_connection_health: true,\n        error_rate: 0.005\n      },\n      violation_trends: [\n        { timestamp: '2025-01-08T10:00:00Z', value: 12, label: '12 violations' },\n        { timestamp: '2025-01-08T11:00:00Z', value: 8, label: '8 violations' },\n        { timestamp: '2025-01-08T12:00:00Z', value: 15, label: '15 violations' }\n      ],\n      tenant_usage: [\n        {\n          tenant_id: 'org-123',\n          tenant_name: 'Test Organization',\n          total_requests: 15000,\n          blocked_requests: 250,\n          block_rate: 1.67\n        }\n      ],\n      top_endpoints: [\n        {\n          endpoint: '/api/v1/market-edge/dashboard',\n          method: 'GET',\n          violation_count: 45,\n          unique_tenants: 8\n        }\n      ]\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/api/v1/observability/rate-limits/tenant/:tenantId/health`, ({ params }) => {\n    const { tenantId } = params\n    const org = getOrCreateMockOrganization(tenantId as string)\n    \n    return HttpResponse.json({\n      tenant_id: tenantId,\n      tenant_name: org.name,\n      status: 'healthy',\n      current_rate_limit: org.rate_limit_per_hour,\n      current_usage: 450,\n      usage_percentage: 9.0,\n      recent_violations: 12,\n      last_violation_time: '2025-01-08T09:30:00Z'\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/api/v1/observability/rate-limits/performance`, ({ request }) => {\n    const url = new URL(request.url)\n    const hours_back = url.searchParams.get('hours_back')\n    const hoursBack = parseInt(hours_back as string) || 24\n    \n    const metrics = []\n    for (let i = 0; i < hoursBack; i++) {\n      const hour = new Date(Date.now() - i * 3600000)\n      metrics.push({\n        timestamp: hour.toISOString(),\n        avg_processing_time_ms: 2.1 + (Math.random() * 0.5),\n        p95_processing_time_ms: 4.2 + (Math.random() * 0.8),\n        p99_processing_time_ms: 4.8 + (Math.random() * 0.6),\n        requests_processed: 15000 - (i * 100),\n        redis_operations: 45000 - (i * 300),\n        redis_errors: Math.floor(Math.random() * 5),\n        memory_usage_mb: 128 + (i % 10),\n        cpu_usage_percent: 15.5 + (i % 5)\n      })\n    }\n    \n    return HttpResponse.json({\n      metrics: metrics.reverse(),\n      summary: {\n        avg_processing_time_ms: 2.3,\n        sla_compliance: 99.8,\n        error_rate: 0.01,\n        uptime_percentage: 99.99\n      }\n    })\n  }),\n\n  http.get(`${API_BASE_URL}/api/v1/observability/rate-limits/alerts`, () => {\n    return HttpResponse.json({\n      alerts: [\n        {\n          id: 'rate_limit_org-123_violations',\n          severity: 'high',\n          type: 'rate_limit_violations',\n          title: 'High rate limit violations for Test Organization',\n          description: 'Tenant has 125 violations in the last hour',\n          tenant_id: 'org-123',\n          tenant_name: 'Test Organization',\n          violation_count: 125,\n          created_at: new Date(Date.now() - 1800000).toISOString(), // 30 minutes ago\n          acknowledged: false,\n          actions: [\n            { type: 'investigate', label: 'Investigate tenant' },\n            { type: 'emergency_bypass', label: 'Emergency bypass' },\n            { type: 'contact_tenant', label: 'Contact tenant' }\n          ]\n        }\n      ],\n      summary: {\n        total: 1,\n        critical: 0,\n        high: 1,\n        warning: 0,\n        unacknowledged: 1\n      }\n    })\n  }),\n\n  // Error scenarios for testing\n  http.get(`${API_BASE_URL}/api/v1/error/500`, () => {\n    return HttpResponse.json(\n      { error: 'Internal Server Error', message: 'Something went wrong' },\n      { status: 500 }\n    )\n  }),\n\n  http.get(`${API_BASE_URL}/api/v1/error/404`, () => {\n    return HttpResponse.json(\n      { error: 'Not Found', message: 'Resource not found' },\n      { status: 404 }\n    )\n  }),\n\n  http.get(`${API_BASE_URL}/api/v1/error/rate-limit`, () => {\n    return HttpResponse.json(\n      {\n        error: 'Rate limit exceeded',\n        message: 'Too many requests. Please try again later.',\n        rate_limit: {\n          limit: 5000,\n          remaining: 0,\n          reset: Math.floor(Date.now() / 1000) + 3600\n        }\n      },\n      {\n        status: 429,\n        headers: {\n          'X-RateLimit-Limit': '5000',\n          'X-RateLimit-Remaining': '0',\n          'X-RateLimit-Reset': String(Math.floor(Date.now() / 1000) + 3600)\n        }\n      }\n    )\n  }),\n\n  // Health check\n  http.get(`${API_BASE_URL}/health`, () => {\n    return HttpResponse.json({ status: 'healthy', version: '1.0.0' })\n  }),\n\n  // Relative path handlers for frontend API calls\n  http.get('/api/v1/admin/rate-limits', () => {\n    const rateLimits = Object.values(mockOrganizations).map(org => ({\n      id: `rate-limit-${org.id}`,\n      tenant_id: org.id,\n      tenant_name: org.name,\n      tier: org.subscription_plan === 'basic' ? 'standard' : \n            org.subscription_plan === 'professional' ? 'premium' : 'enterprise',\n      requests_per_hour: org.rate_limit_per_hour,\n      burst_size: org.burst_limit,\n      enabled: org.rate_limit_enabled,\n      emergency_bypass: false,\n      created_at: '2025-01-08T10:00:00Z',\n      updated_at: '2025-01-08T10:00:00Z'\n    }))\n    \n    return HttpResponse.json(rateLimits)\n  }),\n\n  http.put('/api/v1/admin/rate-limits/:tenantId', ({ params }) => {\n    const { tenantId } = params\n    const org = getOrCreateMockOrganization(tenantId as string)\n    \n    return HttpResponse.json({\n      id: `rate-limit-${tenantId}`,\n      tenant_id: tenantId,\n      tenant_name: org.name,\n      tier: 'premium',\n      requests_per_hour: 5000,\n      burst_size: 250,\n      enabled: true,\n      emergency_bypass: false,\n      created_at: '2025-01-08T10:00:00Z',\n      updated_at: new Date().toISOString()\n    })\n  }),\n\n  http.post('/api/v1/admin/rate-limits/:tenantId/emergency-bypass', ({ params }) => {\n    const { tenantId } = params\n    const org = getOrCreateMockOrganization(tenantId as string)\n    \n    return HttpResponse.json({\n      id: `rate-limit-${tenantId}`,\n      tenant_id: tenantId,\n      tenant_name: org.name,\n      tier: 'standard',\n      requests_per_hour: org.rate_limit_per_hour,\n      burst_size: org.burst_limit,\n      enabled: true,\n      emergency_bypass: true,\n      bypass_reason: 'Emergency bypass requested for testing',\n      bypass_until: new Date(Date.now() + 3600000).toISOString(), // 1 hour from now\n      created_at: '2025-01-08T10:00:00Z',\n      updated_at: new Date().toISOString()\n    })\n  }),\n\n  http.delete('/api/v1/admin/rate-limits/:tenantId/emergency-bypass', () => {\n    return HttpResponse.json({\n      message: 'Emergency bypass removed successfully'\n    })\n  }),\n]\n\n// Utility functions for dynamic mock manipulation in tests\nexport const mockHandlerUtils = {\n  setMockUser: (userId: string, user: MockUser) => {\n    mockUsers[userId] = user\n  },\n\n  setMockOrganization: (orgId: string, org: MockOrganization) => {\n    mockOrganizations[orgId] = org\n  },\n\n  setMockFeatureFlags: (flags: Record<string, boolean>) => {\n    mockFeatureFlags = { ...mockFeatureFlags, ...flags }\n  },\n\n  resetMocks: () => {\n    mockUsers = {}\n    mockOrganizations = {}\n    mockFeatureFlags = createMockFeatureFlags()\n  },\n\n  simulateNetworkError: () => {\n    return http.all('*', () => {\n      return HttpResponse.error()\n    })\n  },\n\n  simulateSlowNetwork: (delay: number = 2000) => {\n    return http.all('*', async () => {\n      await new Promise(resolve => setTimeout(resolve, delay))\n      return new HttpResponse(null, { status: 200 })\n    })\n  }\n}"],"names":["handlers","mockHandlerUtils","API_BASE_URL","process","env","NEXT_PUBLIC_API_BASE_URL","mockUsers","mockOrganizations","mockFeatureFlags","createMockFeatureFlags","getOrCreateMockUser","userId","createMockUser","id","getOrCreateMockOrganization","orgId","createMockOrganization","http","get","user","HttpResponse","json","post","access_token","refresh_token","token_type","expires_in","message","users","Object","values","total","length","organization","organizations","params","flags","flagKey","isEnabled","flag_key","enabled","rollout_percentage","competitors","name","market_share","pricing_trend","last_updated","market_metrics","total_market_size","growth_rate","competitive_intensity","alerts","type","severity","timestamp","website","industry","revenue_estimate","employee_count","pricing_strategy","key_products","strengths","weaknesses","last_analyzed","pricing_data","competitor","product","current_price","price_change","price_trend","recommendations","confidence","expected_impact","feature_flags","disabled","modules","active","enabled_for_organisations","activity","recent_actions_24h","system","supported_sectors","put","organization_id","organization_name","subscription_plan","rate_limit_per_hour","burst_limit","rate_limit_enabled","violations","client_id","org_id","path","rate_limit_info","limit","remaining","reset","rateLimits","map","org","tenant_id","tenant_name","tier","requests_per_hour","burst_size","emergency_bypass","created_at","updated_at","Date","toISOString","tenantId","bypass_reason","bypass_until","now","delete","request","url","URL","user_id","searchParams","overall_status","total_tenants","healthy_tenants","warning_tenants","critical_tenants","system_performance","avg_processing_time_ms","p95_processing_time_ms","p99_processing_time_ms","overhead_percentage","redis_connection_health","error_rate","top_violations","violation_count","unique_users","time_range","total_requests","blocked_requests","block_rate","unique_tenants","performance_metrics","violation_trends","value","label","tenant_usage","top_endpoints","endpoint","method","status","current_rate_limit","current_usage","usage_percentage","recent_violations","last_violation_time","hours_back","hoursBack","parseInt","metrics","i","hour","push","Math","random","requests_processed","redis_operations","redis_errors","floor","memory_usage_mb","cpu_usage_percent","reverse","summary","sla_compliance","uptime_percentage","title","description","acknowledged","actions","critical","high","warning","unacknowledged","error","rate_limit","headers","String","version","setMockUser","setMockOrganization","setMockFeatureFlags","resetMocks","simulateNetworkError","all","simulateSlowNetwork","delay","Promise","resolve","setTimeout"],"mappings":"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"}