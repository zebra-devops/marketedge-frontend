ec6ade87f09cb0d1c7c5b03706b33229
"use strict";
// Mock Next.js router
jest.mock("next/router", ()=>({
        useRouter () {
            return {
                route: "/",
                pathname: "/",
                query: {},
                asPath: "/",
                push: jest.fn(),
                pop: jest.fn(),
                reload: jest.fn(),
                back: jest.fn(),
                prefetch: jest.fn().mockResolvedValue(undefined),
                beforePopState: jest.fn(),
                events: {
                    on: jest.fn(),
                    off: jest.fn(),
                    emit: jest.fn()
                },
                isFallback: false,
                isLocaleDomain: true,
                isReady: true,
                defaultLocale: "en",
                domainLocales: [],
                isPreview: false
            };
        }
    }));
// Mock Next.js navigation
jest.mock("next/navigation", ()=>({
        useRouter () {
            return {
                push: jest.fn(),
                replace: jest.fn(),
                refresh: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                prefetch: jest.fn()
            };
        },
        useSearchParams () {
            return {
                get: jest.fn()
            };
        },
        usePathname () {
            return "/";
        }
    }));
// Mock Next.js Image component
jest.mock("next/image", ()=>({
        __esModule: true,
        default: (props)=>{
            // eslint-disable-next-line @next/next/no-img-element
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("img", {
                ...props
            });
        }
    }));
// Mock Next.js Link component
jest.mock("next/link", ()=>({
        __esModule: true,
        default: ({ children, href, ...props })=>{
            return /*#__PURE__*/ (0, _jsxruntime.jsx)("a", {
                href: href,
                ...props,
                children: children
            });
        }
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "server", {
    enumerable: true,
    get: function() {
        return server;
    }
});
const _jsxruntime = require("react/jsx-runtime");
require("@testing-library/jest-dom");
require("jest-axe/extend-expect");
require("./src/__tests__/mocks/server");
const _node = require("msw/node");
const _msw = require("msw");
// Mock ResizeObserver
global.ResizeObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock IntersectionObserver
global.IntersectionObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock window.matchMedia
Object.defineProperty(window, "matchMedia", {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// Mock window.scrollTo
Object.defineProperty(window, "scrollTo", {
    writable: true,
    value: jest.fn()
});
// Mock localStorage
Object.defineProperty(window, "localStorage", {
    value: {
        getItem: jest.fn(),
        setItem: jest.fn(),
        removeItem: jest.fn(),
        clear: jest.fn(),
        key: jest.fn(),
        length: 0
    },
    writable: true
});
// Mock sessionStorage
Object.defineProperty(window, "sessionStorage", {
    value: {
        getItem: jest.fn(),
        setItem: jest.fn(),
        removeItem: jest.fn(),
        clear: jest.fn(),
        key: jest.fn(),
        length: 0
    },
    writable: true
});
// Mock crypto for UUID generation
Object.defineProperty(global, "crypto", {
    value: {
        randomUUID: jest.fn(()=>"test-uuid-1234"),
        getRandomValues: jest.fn((arr)=>{
            for(let i = 0; i < arr.length; i++){
                arr[i] = Math.floor(Math.random() * 256);
            }
            return arr;
        })
    }
});
// Mock fetch if not available
if (!global.fetch) {
    global.fetch = jest.fn();
}
// Custom console override to catch errors during tests
const originalError = console.error;
const originalWarn = console.warn;
beforeAll(()=>{
    console.error = (...args)=>{
        if (typeof args[0] === "string" && (args[0].includes("Warning: ReactDOM.render is no longer supported") || args[0].includes("Warning: React.createFactory() is deprecated") || args[0].includes("Warning: componentWillReceiveProps") || args[0].includes("act(...)"))) {
            return;
        }
        originalError.call(console, ...args);
    };
    console.warn = (...args)=>{
        if (typeof args[0] === "string" && args[0].includes("componentWillReceiveProps")) {
            return;
        }
        originalWarn.call(console, ...args);
    };
});
afterAll(()=>{
    console.error = originalError;
    console.warn = originalWarn;
});
// Clean up after each test
afterEach(()=>{
    jest.clearAllMocks();
    // Reset localStorage and sessionStorage
    window.localStorage.clear();
    window.sessionStorage.clear();
});
// Global test utilities available in all tests
global.testUtils = {
    // Helper to create mock user with tenant context
    createMockUser: (overrides = {})=>({
            id: "test-user-id",
            email: "test@example.com",
            name: "Test User",
            role: "user",
            organisation_id: "test-tenant-id",
            is_active: true,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString(),
            ...overrides
        }),
    // Helper to create mock organisation
    createMockOrganisation: (overrides = {})=>({
            id: "test-tenant-id",
            name: "Test Organisation",
            industry: "general",
            subscription_plan: "professional",
            is_active: true,
            ...overrides
        }),
    // Helper to create mock API response
    createMockApiResponse: (data, status = 200)=>({
            ok: status >= 200 && status < 300,
            status,
            json: jest.fn().mockResolvedValue(data),
            text: jest.fn().mockResolvedValue(JSON.stringify(data))
        })
};
// Make fetch return successful responses by default
global.fetch.mockResolvedValue({
    ok: true,
    status: 200,
    json: jest.fn().mockResolvedValue({}),
    text: jest.fn().mockResolvedValue("")
});
const server = (0, _node.setupServer)(// Default handlers that can be overridden in individual tests
_msw.http.get("/api/v1/auth/me", ()=>{
    return _msw.HttpResponse.json(global.testUtils.createMockUser());
}), _msw.http.get("/api/v1/organisations", ()=>{
    return _msw.HttpResponse.json({
        organisations: [
            global.testUtils.createMockOrganisation()
        ]
    });
}), // Health check endpoint
_msw.http.get("/health", ()=>{
    return _msw.HttpResponse.json({
        status: "healthy"
    });
}));
// Start server before all tests
beforeAll(()=>server.listen({
        onUnhandledRequest: "warn"
    }));
// Reset handlers after each test to ensure test isolation
afterEach(()=>server.resetHandlers());
// Clean up after all tests
afterAll(()=>server.close());

//# sourceMappingURL=data:application/json;base64,