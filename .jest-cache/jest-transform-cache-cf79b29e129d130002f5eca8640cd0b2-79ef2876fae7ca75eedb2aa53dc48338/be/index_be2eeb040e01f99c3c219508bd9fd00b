9968607c33dfe1a9ede4d1c47eb3122f
/**
 * Multi-Tenant Testing Utilities
 * 
 * Provides utilities for testing multi-tenant scenarios including:
 * - Custom render functions with providers
 * - Mock data generators
 * - Tenant context setup
 * - API mocking helpers
 * - User interaction utilities
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    DEFAULT_ORGANIZATION: function() {
        return DEFAULT_ORGANIZATION;
    },
    DEFAULT_TENANT: function() {
        return DEFAULT_TENANT;
    },
    DEFAULT_USER: function() {
        return DEFAULT_USER;
    },
    createMockOrganization: function() {
        return createMockOrganization;
    },
    createMockUser: function() {
        return createMockUser;
    },
    createTenantScenarios: function() {
        return createTenantScenarios;
    },
    createUserEvent: function() {
        return createUserEvent;
    },
    generateMockApiResponse: function() {
        return generateMockApiResponse;
    },
    mockDataGenerators: function() {
        return mockDataGenerators;
    },
    mockTenantLocation: function() {
        return mockTenantLocation;
    },
    render: function() {
        return renderWithProviders;
    },
    renderWithProviders: function() {
        return renderWithProviders;
    },
    renderWithTenant: function() {
        return renderWithTenant;
    },
    renderWithUser: function() {
        return renderWithUser;
    },
    resetTestEnvironment: function() {
        return resetTestEnvironment;
    },
    userEvent: function() {
        return _userevent.default;
    },
    waitForAsyncOperations: function() {
        return waitForAsyncOperations;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = _export_star(require("@testing-library/react"), exports);
const _reactquery = require("react-query");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _useAuth = require("../hooks/useAuth");
const _ToastProvider = require("../components/providers/ToastProvider");
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
const DEFAULT_TENANT = {
    tenantId: "test-tenant-123",
    organizationName: "Test Organization",
    industry: "b2b",
    features: [
        "market-edge",
        "analytics",
        "reporting"
    ],
    subscription: "premium",
    limits: {
        users: 100,
        apiCalls: 10000,
        storage: 1000
    }
};
const DEFAULT_ORGANIZATION = {
    id: "test-org-123",
    name: "Test Organization",
    industry: "b2b",
    sic_code: "5400",
    subscription_plan: "professional",
    rate_limit_per_hour: 5000,
    burst_limit: 250,
    features: [
        "market-edge",
        "analytics",
        "reporting"
    ]
};
const DEFAULT_USER = {
    id: "test-user-456",
    email: "test@example.com",
    name: "Test User",
    role: "user",
    organizationId: "test-org-123",
    permissions: [
        "read:data",
        "write:data"
    ],
    isActive: true,
    organisation: DEFAULT_ORGANIZATION
};
const createMockOrganization = (overrides = {})=>{
    return {
        ...DEFAULT_ORGANIZATION,
        ...overrides
    };
};
const createMockUser = (overrides = {})=>{
    const organization = overrides.organisation || DEFAULT_ORGANIZATION;
    return {
        ...DEFAULT_USER,
        ...overrides,
        organizationId: organization.id,
        organisation: organization
    };
};
const TestProviders = ({ children, tenant, user, enableAuth, enableQuery, queryClient: providedQueryClient })=>{
    const queryClient = providedQueryClient || new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
                cacheTime: 0
            },
            mutations: {
                retry: false
            }
        }
    });
    let wrappedChildren = _react.default.createElement(_react.default.Fragment, {}, children);
    // Wrap with Query Provider if enabled
    if (enableQuery) {
        wrappedChildren = _react.default.createElement(_reactquery.QueryClientProvider, {
            client: queryClient
        }, wrappedChildren);
    }
    // Wrap with Auth Provider if enabled
    if (enableAuth) {
        const mockAuthValue = {
            user,
            isLoading: false,
            isAuthenticated: true,
            login: jest.fn(),
            logout: jest.fn(),
            refreshUser: jest.fn()
        };
        wrappedChildren = _react.default.createElement(_useAuth.AuthContext.Provider, {
            value: mockAuthValue
        }, wrappedChildren);
    }
    // Always wrap with Toast Provider for notifications
    wrappedChildren = _react.default.createElement(_ToastProvider.ToastProvider, {}, wrappedChildren);
    return wrappedChildren;
};
const renderWithProviders = (ui, options = {})=>{
    const { tenant = {}, user = {}, enableAuth = true, enableQuery = true, queryClient, ...renderOptions } = options;
    const mergedTenant = {
        ...DEFAULT_TENANT,
        ...tenant
    };
    const mergedUser = {
        ...DEFAULT_USER,
        ...user,
        organizationId: mergedTenant.tenantId
    };
    const AllTheProviders = ({ children })=>_react.default.createElement(TestProviders, {
            tenant: mergedTenant,
            user: mergedUser,
            enableAuth,
            enableQuery,
            queryClient
        }, children);
    return (0, _react1.render)(ui, {
        wrapper: AllTheProviders,
        ...renderOptions
    });
};
const renderWithTenant = (ui, tenantOverrides = {}, options = {})=>{
    return renderWithProviders(ui, {
        ...options,
        tenant: tenantOverrides
    });
};
const renderWithUser = (ui, userOverrides = {}, options = {})=>{
    return renderWithProviders(ui, {
        ...options,
        user: userOverrides
    });
};
const createUserEvent = ()=>{
    return _userevent.default.setup({
        delay: null
    });
};
const mockDataGenerators = {
    cinema: {
        venue: (overrides = {})=>({
                id: "cinema-venue-1",
                name: "Grand Cinema",
                location: "Downtown",
                screens: 12,
                totalSeats: 2400,
                ...overrides
            }),
        movie: (overrides = {})=>({
                id: "movie-1",
                title: "Test Movie",
                genre: "Action",
                duration: 120,
                rating: "PG-13",
                showtimes: [
                    "14:00",
                    "17:00",
                    "20:00"
                ],
                ...overrides
            }),
        booking: (overrides = {})=>({
                id: "booking-1",
                movieId: "movie-1",
                venueId: "cinema-venue-1",
                showtime: "20:00",
                seats: [
                    "A1",
                    "A2"
                ],
                totalPrice: 24.99,
                status: "confirmed",
                ...overrides
            })
    },
    hotel: {
        property: (overrides = {})=>({
                id: "hotel-1",
                name: "Grand Hotel",
                location: "City Center",
                stars: 4,
                totalRooms: 200,
                amenities: [
                    "wifi",
                    "pool",
                    "restaurant"
                ],
                ...overrides
            }),
        room: (overrides = {})=>({
                id: "room-1",
                number: "101",
                type: "standard",
                price: 120,
                capacity: 2,
                amenities: [
                    "wifi",
                    "tv",
                    "minibar"
                ],
                isAvailable: true,
                ...overrides
            }),
        reservation: (overrides = {})=>({
                id: "reservation-1",
                hotelId: "hotel-1",
                roomId: "room-1",
                checkIn: "2024-01-15",
                checkOut: "2024-01-18",
                guests: 2,
                totalPrice: 360,
                status: "confirmed",
                ...overrides
            })
    },
    gym: {
        facility: (overrides = {})=>({
                id: "gym-1",
                name: "Fitness Center",
                location: "Mall Complex",
                equipment: [
                    "cardio",
                    "weights",
                    "pool"
                ],
                operatingHours: "06:00-22:00",
                capacity: 150,
                ...overrides
            }),
        member: (overrides = {})=>({
                id: "member-1",
                name: "John Doe",
                email: "john@example.com",
                membershipType: "premium",
                joinDate: "2024-01-01",
                isActive: true,
                ...overrides
            }),
        checkin: (overrides = {})=>({
                id: "checkin-1",
                memberId: "member-1",
                facilityId: "gym-1",
                timestamp: "2024-01-15T10:30:00Z",
                duration: 90,
                activities: [
                    "cardio",
                    "weights"
                ],
                ...overrides
            })
    },
    retail: {
        store: (overrides = {})=>({
                id: "store-1",
                name: "Fashion Store",
                location: "Shopping Center",
                category: "clothing",
                area: 1200,
                employees: 8,
                ...overrides
            }),
        product: (overrides = {})=>({
                id: "product-1",
                name: "T-Shirt",
                category: "clothing",
                price: 29.99,
                stock: 50,
                sku: "TS-001",
                ...overrides
            }),
        sale: (overrides = {})=>({
                id: "sale-1",
                storeId: "store-1",
                products: [
                    {
                        productId: "product-1",
                        quantity: 2
                    }
                ],
                totalAmount: 59.98,
                timestamp: "2024-01-15T15:30:00Z",
                paymentMethod: "credit_card",
                ...overrides
            })
    },
    b2b: {
        client: (overrides = {})=>({
                id: "client-1",
                name: "Enterprise Corp",
                industry: "technology",
                size: "large",
                revenue: 50000000,
                contractValue: 100000,
                ...overrides
            }),
        project: (overrides = {})=>({
                id: "project-1",
                name: "Digital Transformation",
                clientId: "client-1",
                status: "active",
                startDate: "2024-01-01",
                endDate: "2024-12-31",
                budget: 500000,
                ...overrides
            }),
        report: (overrides = {})=>({
                id: "report-1",
                projectId: "project-1",
                type: "monthly",
                period: "2024-01",
                metrics: {
                    revenue: 25000,
                    costs: 15000,
                    profit: 10000
                },
                ...overrides
            })
    }
};
const generateMockApiResponse = (industry, dataType, count = 1, overrides = {})=>{
    const generator = mockDataGenerators[industry]?.[dataType];
    if (!generator) {
        throw new Error(`No mock generator found for ${industry}.${dataType}`);
    }
    return Array.from({
        length: count
    }, (_, index)=>generator({
            id: `${dataType}-${index + 1}`,
            ...overrides
        }));
};
const createTenantScenarios = ()=>{
    const scenarios = [
        {
            name: "Cinema Chain",
            tenant: {
                industry: "cinema",
                organizationName: "CineMax Theaters",
                features: [
                    "market-edge",
                    "competitor-analysis",
                    "pricing-optimization"
                ],
                subscription: "premium"
            },
            user: {
                role: "manager",
                permissions: [
                    "read:venues",
                    "write:showtimes"
                ]
            }
        },
        {
            name: "Hotel Group",
            tenant: {
                industry: "hotel",
                organizationName: "Luxury Hotels Ltd",
                features: [
                    "market-edge",
                    "revenue-management",
                    "guest-analytics"
                ],
                subscription: "enterprise"
            },
            user: {
                role: "admin",
                permissions: [
                    "read:all",
                    "write:all"
                ]
            }
        },
        {
            name: "Gym Chain",
            tenant: {
                industry: "gym",
                organizationName: "FitLife Centers",
                features: [
                    "member-analytics",
                    "capacity-management"
                ],
                subscription: "basic"
            },
            user: {
                role: "user",
                permissions: [
                    "read:members",
                    "write:checkins"
                ]
            }
        },
        {
            name: "Retail Chain",
            tenant: {
                industry: "retail",
                organizationName: "Fashion Forward",
                features: [
                    "market-edge",
                    "inventory-optimization",
                    "sales-analytics"
                ],
                subscription: "premium"
            },
            user: {
                role: "manager",
                permissions: [
                    "read:stores",
                    "write:inventory"
                ]
            }
        },
        {
            name: "B2B Services",
            tenant: {
                industry: "b2b",
                organizationName: "Business Solutions Inc",
                features: [
                    "market-edge",
                    "client-analytics",
                    "project-management"
                ],
                subscription: "enterprise"
            },
            user: {
                role: "admin",
                permissions: [
                    "read:all",
                    "write:all",
                    "admin:users"
                ]
            }
        }
    ];
    return scenarios;
};
const waitForAsyncOperations = async ()=>{
    await new Promise((resolve)=>setTimeout(resolve, 0));
};
const mockTenantLocation = (tenantSubdomain)=>{
    Object.defineProperty(window, "location", {
        writable: true,
        value: {
            ...window.location,
            hostname: `${tenantSubdomain}.platform.local`,
            origin: `http://${tenantSubdomain}.platform.local:3000`,
            href: `http://${tenantSubdomain}.platform.local:3000/`
        }
    });
};
const resetTestEnvironment = ()=>{
    // Reset localStorage
    localStorage.clear();
    sessionStorage.clear();
    // Reset location
    Object.defineProperty(window, "location", {
        writable: true,
        value: {
            hostname: "localhost",
            port: "3000",
            protocol: "http:",
            pathname: "/",
            search: "",
            hash: "",
            origin: "http://localhost:3000",
            href: "http://localhost:3000",
            assign: jest.fn(),
            replace: jest.fn(),
            reload: jest.fn()
        }
    });
    // Clear any global state
    if (window.__PLATFORM_CONFIG__) {
        delete window.__PLATFORM_CONFIG__;
    }
};

//# sourceMappingURL=data:application/json;base64,