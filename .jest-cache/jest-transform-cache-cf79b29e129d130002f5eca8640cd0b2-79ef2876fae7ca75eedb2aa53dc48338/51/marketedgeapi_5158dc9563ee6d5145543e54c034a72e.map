{"version":3,"names":["marketEdgeAPI","API_BASE","cov_7loy28mpb","s","MarketEdgeAPI","request","endpoint","options","b","f","token","_jscookie","default","get","console","log","hasToken","substring","response","fetch","headers","ok","error","json","catch","detail","Error","status","getMarkets","createMarket","marketData","method","body","JSON","stringify","getMarket","marketId","updateMarket","deleteMarket","getCompetitors","createCompetitor","competitorData","getCompetitor","competitorId","updateCompetitor","createPricingData","pricingData","getMarketPricingData","params","URLSearchParams","competitor_id","append","product_service","limit","toString","query","getMarketOverview","getMarketAnalysis","days_back","getCompetitorAnalysis","compareCompetitors","competitor_ids","join","getPricingTrends","getMarketAlerts","unread_only","markAlertRead","alertId","generateMarketReport","reportType","searchMarkets","markets","filter","market","name","toLowerCase","includes","getMarketSummary","overview","alerts","Promise","all","unread_alerts","exportMarketData","format","generateCSVExport","generatePDFExport","csvContent","competitors","length","recent_data_points","include_competitors","forEach","comp","business_type","market_share_estimate","tracking_priority","Blob","type","content"],"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/services/market-edge-api.ts"],"sourcesContent":["import { \n  Market, \n  Competitor, \n  PricingData, \n  MarketAlert, \n  MarketOverview,\n  MarketMetrics,\n  CompetitorAnalysis,\n  CompetitorComparison,\n  MarketTrends,\n  MarketReport\n} from '@/types/market-edge';\nimport Cookies from 'js-cookie';\n\nconst API_BASE = 'http://localhost:8000/api/v1/market-edge';\n\nclass MarketEdgeAPI {\n  private async request<T>(\n    endpoint: string, \n    options: RequestInit = {}\n  ): Promise<T> {\n    const token = Cookies.get('access_token');\n    \n    // Debug logging\n    console.log('Market Edge API Request:', {\n      endpoint: `${API_BASE}${endpoint}`,\n      hasToken: !!token,\n      token: token ? `${token.substring(0, 20)}...` : 'No token'\n    });\n    \n    const response = await fetch(`${API_BASE}${endpoint}`, {\n      ...options,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': token ? `Bearer ${token}` : '',\n        ...options.headers,\n      },\n    });\n\n    if (!response.ok) {\n      const error = await response.json().catch(() => ({ detail: 'Request failed' }));\n      throw new Error(error.detail || `HTTP ${response.status}`);\n    }\n\n    return response.json();\n  }\n\n  // Market endpoints\n  async getMarkets(): Promise<Market[]> {\n    return this.request<Market[]>('/markets');\n  }\n\n  async createMarket(marketData: {\n    name: string;\n    geographic_bounds?: Record<string, any>;\n    tracking_config?: Record<string, any>;\n  }): Promise<Market> {\n    return this.request<Market>('/markets', {\n      method: 'POST',\n      body: JSON.stringify(marketData),\n    });\n  }\n\n  async getMarket(marketId: string): Promise<Market> {\n    return this.request<Market>(`/markets/${marketId}`);\n  }\n\n  async updateMarket(\n    marketId: string, \n    marketData: {\n      name: string;\n      geographic_bounds?: Record<string, any>;\n      tracking_config?: Record<string, any>;\n    }\n  ): Promise<Market> {\n    return this.request<Market>(`/markets/${marketId}`, {\n      method: 'PUT',\n      body: JSON.stringify(marketData),\n    });\n  }\n\n  async deleteMarket(marketId: string): Promise<void> {\n    await this.request(`/markets/${marketId}`, {\n      method: 'DELETE',\n    });\n  }\n\n  // Competitor endpoints\n  async getCompetitors(marketId: string): Promise<Competitor[]> {\n    return this.request<Competitor[]>(`/markets/${marketId}/competitors`);\n  }\n\n  async createCompetitor(competitorData: {\n    name: string;\n    market_id: string;\n    business_type?: string;\n    website?: string;\n    locations?: Record<string, any>;\n    tracking_priority?: number;\n    description?: string;\n    market_share_estimate?: number;\n  }): Promise<Competitor> {\n    return this.request<Competitor>('/competitors', {\n      method: 'POST',\n      body: JSON.stringify(competitorData),\n    });\n  }\n\n  async getCompetitor(competitorId: string): Promise<Competitor> {\n    return this.request<Competitor>(`/competitors/${competitorId}`);\n  }\n\n  async updateCompetitor(\n    competitorId: string,\n    competitorData: {\n      name: string;\n      market_id: string;\n      business_type?: string;\n      website?: string;\n      locations?: Record<string, any>;\n      tracking_priority?: number;\n      description?: string;\n      market_share_estimate?: number;\n    }\n  ): Promise<Competitor> {\n    return this.request<Competitor>(`/competitors/${competitorId}`, {\n      method: 'PUT',\n      body: JSON.stringify(competitorData),\n    });\n  }\n\n  // Pricing data endpoints\n  async createPricingData(pricingData: {\n    competitor_id: string;\n    product_service: string;\n    price_point: number;\n    currency?: string;\n    date_collected: string;\n    source?: string;\n    metadata?: Record<string, any>;\n    is_promotion?: boolean;\n    promotion_details?: string;\n  }): Promise<PricingData> {\n    return this.request<PricingData>('/pricing-data', {\n      method: 'POST',\n      body: JSON.stringify(pricingData),\n    });\n  }\n\n  async getMarketPricingData(\n    marketId: string,\n    options: {\n      competitor_id?: string;\n      product_service?: string;\n      limit?: number;\n    } = {}\n  ): Promise<PricingData[]> {\n    const params = new URLSearchParams();\n    if (options.competitor_id) params.append('competitor_id', options.competitor_id);\n    if (options.product_service) params.append('product_service', options.product_service);\n    if (options.limit) params.append('limit', options.limit.toString());\n\n    const query = params.toString() ? `?${params.toString()}` : '';\n    return this.request<PricingData[]>(`/markets/${marketId}/pricing-data${query}`);\n  }\n\n  // Analysis endpoints\n  async getMarketOverview(marketId: string): Promise<MarketOverview> {\n    return this.request<MarketOverview>(`/markets/${marketId}/overview`);\n  }\n\n  async getMarketAnalysis(\n    marketId: string,\n    options: {\n      product_service?: string;\n      days_back?: number;\n    } = {}\n  ): Promise<MarketMetrics> {\n    const params = new URLSearchParams();\n    if (options.product_service) params.append('product_service', options.product_service);\n    if (options.days_back) params.append('days_back', options.days_back.toString());\n\n    const query = params.toString() ? `?${params.toString()}` : '';\n    return this.request<MarketMetrics>(`/markets/${marketId}/analysis${query}`);\n  }\n\n  async getCompetitorAnalysis(\n    competitorId: string,\n    options: {\n      days_back?: number;\n    } = {}\n  ): Promise<CompetitorAnalysis> {\n    const params = new URLSearchParams();\n    if (options.days_back) params.append('days_back', options.days_back.toString());\n\n    const query = params.toString() ? `?${params.toString()}` : '';\n    return this.request<CompetitorAnalysis>(`/competitors/${competitorId}/analysis${query}`);\n  }\n\n  async compareCompetitors(\n    marketId: string,\n    options: {\n      competitor_ids?: string[];\n      product_service?: string;\n    } = {}\n  ): Promise<CompetitorComparison> {\n    const params = new URLSearchParams();\n    if (options.competitor_ids) {\n      params.append('competitor_ids', options.competitor_ids.join(','));\n    }\n    if (options.product_service) params.append('product_service', options.product_service);\n\n    const query = params.toString() ? `?${params.toString()}` : '';\n    return this.request<CompetitorComparison>(`/markets/${marketId}/comparison${query}`);\n  }\n\n  async getPricingTrends(\n    marketId: string,\n    options: {\n      competitor_id?: string;\n      product_service?: string;\n      days_back?: number;\n    } = {}\n  ): Promise<MarketTrends> {\n    const params = new URLSearchParams();\n    if (options.competitor_id) params.append('competitor_id', options.competitor_id);\n    if (options.product_service) params.append('product_service', options.product_service);\n    if (options.days_back) params.append('days_back', options.days_back.toString());\n\n    const query = params.toString() ? `?${params.toString()}` : '';\n    return this.request<MarketTrends>(`/markets/${marketId}/trends${query}`);\n  }\n\n  // Alert endpoints\n  async getMarketAlerts(\n    marketId: string,\n    options: {\n      unread_only?: boolean;\n      limit?: number;\n    } = {}\n  ): Promise<MarketAlert[]> {\n    const params = new URLSearchParams();\n    if (options.unread_only) params.append('unread_only', 'true');\n    if (options.limit) params.append('limit', options.limit.toString());\n\n    const query = params.toString() ? `?${params.toString()}` : '';\n    return this.request<MarketAlert[]>(`/markets/${marketId}/alerts${query}`);\n  }\n\n  async markAlertRead(alertId: string): Promise<void> {\n    await this.request(`/alerts/${alertId}/mark-read`, {\n      method: 'POST',\n    });\n  }\n\n  // Report endpoints\n  async generateMarketReport(\n    marketId: string,\n    reportType: 'comprehensive' | 'summary' | 'trends' = 'comprehensive'\n  ): Promise<MarketReport> {\n    const params = new URLSearchParams();\n    params.append('report_type', reportType);\n\n    return this.request<MarketReport>(`/markets/${marketId}/report?${params.toString()}`);\n  }\n\n  // Utility methods\n  async searchMarkets(query: string): Promise<Market[]> {\n    const markets = await this.getMarkets();\n    return markets.filter(market => \n      market.name.toLowerCase().includes(query.toLowerCase())\n    );\n  }\n\n  async getMarketSummary(marketId: string) {\n    const [overview, alerts] = await Promise.all([\n      this.getMarketOverview(marketId),\n      this.getMarketAlerts(marketId, { unread_only: true, limit: 5 })\n    ]);\n\n    return {\n      ...overview,\n      unread_alerts: alerts\n    };\n  }\n\n  // Export functionality\n  async exportMarketData(\n    marketId: string,\n    format: 'csv' | 'pdf' = 'csv',\n    options: {\n      include_pricing?: boolean;\n      include_competitors?: boolean;\n      include_trends?: boolean;\n      date_range?: {\n        start: string;\n        end: string;\n      };\n    } = {}\n  ): Promise<Blob> {\n    // This would typically call a dedicated export endpoint\n    // For now, we'll generate the data client-side\n    const overview = await this.getMarketOverview(marketId);\n    \n    if (format === 'csv') {\n      return this.generateCSVExport(overview, options);\n    } else {\n      return this.generatePDFExport(overview, options);\n    }\n  }\n\n  private async generateCSVExport(\n    overview: MarketOverview, \n    options: any\n  ): Promise<Blob> {\n    let csvContent = 'Market Edge Export\\n\\n';\n    \n    // Market info\n    csvContent += `Market,${overview.market.name}\\n`;\n    csvContent += `Competitors,${overview.competitors.length}\\n`;\n    csvContent += `Data Points,${overview.recent_data_points}\\n\\n`;\n    \n    // Competitors\n    if (options.include_competitors !== false) {\n      csvContent += 'Competitor Name,Business Type,Market Share,Tracking Priority\\n';\n      overview.competitors.forEach(comp => {\n        csvContent += `${comp.name},${comp.business_type || ''},${comp.market_share_estimate || ''},${comp.tracking_priority}\\n`;\n      });\n    }\n    \n    return new Blob([csvContent], { type: 'text/csv' });\n  }\n\n  private async generatePDFExport(\n    overview: MarketOverview, \n    options: any\n  ): Promise<Blob> {\n    // This would use a PDF library like jsPDF\n    // For now, return a simple text blob\n    const content = `Market Edge Report - ${overview.market.name}`;\n    return new Blob([content], { type: 'application/pdf' });\n  }\n}\n\nexport const marketEdgeAPI = new MarketEdgeAPI();"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","ignoreList":[]}