dc04760ccc693b0a9c63874e85dc6e54
"use client";
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    AuthContext: function() {
        return AuthContext;
    },
    useAuth: function() {
        return useAuth;
    },
    useAuthContext: function() {
        return useAuthContext;
    }
});
const _react = require("react");
const _auth = require("../services/auth");
const _timerutils = require("../utils/timer-utils");
const AuthContext = (0, _react.createContext)(undefined);
const useAuthContext = ()=>{
    const context = (0, _react.useContext)(AuthContext);
    if (!context) {
        throw new Error("useAuthContext must be used within an AuthProvider");
    }
    return context;
};
const useAuth = ()=>{
    const [state, setState] = (0, _react.useState)({
        user: null,
        tenant: null,
        permissions: [],
        isLoading: true,
        isAuthenticated: false,
        isInitialized: false
    });
    (0, _react.useEffect)(()=>{
        initializeAuth();
    }, []);
    // Initialize timer-based features only on client-side after mount
    (0, _react.useEffect)(()=>{
        if (typeof window !== "undefined") {
            // Ensure timer functions are available before initialization
            (0, _timerutils.ensureTimerFunctions)();
            // Initialize auto-refresh and activity tracking
            _auth.authService.initializeAutoRefresh();
            _auth.authService.initializeActivityTracking();
            // Cleanup function to clear intervals when component unmounts
            return ()=>{
                const refreshInterval = window.__authRefreshInterval;
                const timeoutInterval = window.__sessionTimeoutInterval;
                if (refreshInterval) {
                    (0, _timerutils.safeClearInterval)(refreshInterval);
                    delete window.__authRefreshInterval;
                }
                if (timeoutInterval) {
                    (0, _timerutils.safeClearInterval)(timeoutInterval);
                    delete window.__sessionTimeoutInterval;
                }
            };
        }
    }, [
        state.isAuthenticated
    ]) // Re-initialize when auth state changes
    ;
    const initializeAuth = async ()=>{
        try {
            setState((prev)=>({
                    ...prev,
                    isLoading: true
                }));
            // Check if user has valid authentication
            if (_auth.authService.isAuthenticated()) {
                try {
                    // Get current user data from backend
                    const userResponse = await _auth.authService.getCurrentUser();
                    const permissions = _auth.authService.getUserPermissions();
                    setState({
                        user: userResponse.user,
                        tenant: userResponse.tenant,
                        permissions,
                        isLoading: false,
                        isAuthenticated: true,
                        isInitialized: true
                    });
                } catch (error) {
                    console.error("Failed to get current user:", error);
                    // Clear invalid tokens
                    await _auth.authService.logout();
                    setState({
                        user: null,
                        tenant: null,
                        permissions: [],
                        isLoading: false,
                        isAuthenticated: false,
                        isInitialized: true
                    });
                }
            } else {
                setState({
                    user: null,
                    tenant: null,
                    permissions: [],
                    isLoading: false,
                    isAuthenticated: false,
                    isInitialized: true
                });
            }
        } catch (error) {
            console.error("Auth initialization failed:", error);
            setState({
                user: null,
                tenant: null,
                permissions: [],
                isLoading: false,
                isAuthenticated: false,
                isInitialized: true
            });
        }
    };
    const login = async (loginData)=>{
        setState((prev)=>({
                ...prev,
                isLoading: true
            }));
        try {
            const response = await _auth.authService.login(loginData);
            setState({
                user: response.user,
                tenant: response.tenant,
                permissions: response.permissions,
                isLoading: false,
                isAuthenticated: true,
                isInitialized: true
            });
            return response;
        } catch (error) {
            setState((prev)=>({
                    ...prev,
                    isLoading: false,
                    user: null,
                    tenant: null,
                    permissions: [],
                    isAuthenticated: false
                }));
            throw error;
        }
    };
    const logout = async (allDevices = false)=>{
        setState((prev)=>({
                ...prev,
                isLoading: true
            }));
        try {
            await _auth.authService.logout(allDevices);
        } catch (error) {
            console.warn("Logout error:", error);
        } finally{
            setState({
                user: null,
                tenant: null,
                permissions: [],
                isLoading: false,
                isAuthenticated: false,
                isInitialized: true
            });
        }
    };
    const refreshUser = async ()=>{
        try {
            const userResponse = await _auth.authService.getCurrentUser();
            const permissions = _auth.authService.getUserPermissions();
            setState((prev)=>({
                    ...prev,
                    user: userResponse.user,
                    tenant: userResponse.tenant,
                    permissions
                }));
        } catch (error) {
            console.error("Failed to refresh user data:", error);
            throw error;
        }
    };
    const hasPermission = (permission)=>{
        return _auth.authService.hasPermission(permission);
    };
    const hasAnyPermission = (permissions)=>{
        return _auth.authService.hasAnyPermission(permissions);
    };
    const hasRole = (role)=>{
        return _auth.authService.getUserRole() === role;
    };
    const checkSession = async ()=>{
        try {
            return await _auth.authService.checkSession();
        } catch (error) {
            console.error("Session check failed:", error);
            throw error;
        }
    };
    const extendSession = async ()=>{
        try {
            return await _auth.authService.extendSession();
        } catch (error) {
            console.error("Session extension failed:", error);
            throw error;
        }
    };
    const getTenantContext = ()=>{
        return state.tenant;
    };
    const validateTenantAccess = (requiredTenant)=>{
        if (!state.tenant || !state.isAuthenticated) {
            return false;
        }
        return state.tenant.id === requiredTenant;
    };
    return {
        ...state,
        login,
        logout,
        refreshUser,
        hasPermission,
        hasAnyPermission,
        hasRole,
        checkSession,
        extendSession,
        getTenantContext,
        validateTenantAccess
    };
};

//# sourceMappingURL=data:application/json;base64,