{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/market-edge/__tests__/MarketSelector.test.tsx"],"sourcesContent":["/**\n * Test file for MarketSelector component\n * \n * Demonstrates multi-tenant testing patterns with industry-specific scenarios\n */\n\nimport React from 'react'\nimport { screen, waitFor } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { \n  renderWithProviders,\n  renderForIndustry,\n  mockApiEndpoints,\n  testAccessibility,\n  industryTestScenarios,\n  generateTestData,\n  waitForLoadingToFinish,\n} from '../../../utils/test-utils'\nimport { MarketSelector } from '../MarketSelector'\n\n// Mock the MarketSelector component for testing\njest.mock('../MarketSelector', () => ({\n  MarketSelector: ({ onMarketChange, currentMarket, industry }: any) => (\n    <div data-testid=\"market-selector\">\n      <select\n        value={currentMarket || ''}\n        onChange={(e) => onMarketChange?.(e.target.value)}\n        data-testid=\"market-select\"\n      >\n        <option value=\"\">Select Market</option>\n        {industry === 'cinema' && (\n          <>\n            <option value=\"cinema-downtown\">Downtown Cinema</option>\n            <option value=\"cinema-mall\">Mall Cinema</option>\n            <option value=\"cinema-suburban\">Suburban Cinema</option>\n          </>\n        )}\n        {industry === 'hotel' && (\n          <>\n            <option value=\"hotel-luxury\">Luxury Hotels</option>\n            <option value=\"hotel-business\">Business Hotels</option>\n            <option value=\"hotel-budget\">Budget Hotels</option>\n          </>\n        )}\n        {industry === 'gym' && (\n          <>\n            <option value=\"gym-premium\">Premium Fitness</option>\n            <option value=\"gym-community\">Community Gyms</option>\n            <option value=\"gym-24h\">24/7 Gyms</option>\n          </>\n        )}\n        {(!industry || industry === 'general') && (\n          <>\n            <option value=\"general-local\">Local Market</option>\n            <option value=\"general-regional\">Regional Market</option>\n            <option value=\"general-national\">National Market</option>\n          </>\n        )}\n      </select>\n      <div data-testid=\"market-info\">\n        Current Industry: {industry || 'general'}\n      </div>\n    </div>\n  ),\n}))\n\ndescribe('MarketSelector Component', () => {\n  \n  describe('Basic functionality', () => {\n    it('renders with default props', () => {\n      renderWithProviders(<MarketSelector />)\n      \n      expect(screen.getByTestId('market-selector')).toBeInTheDocument()\n      expect(screen.getByTestId('market-select')).toBeInTheDocument()\n    })\n    \n    it('displays current market selection', () => {\n      renderWithProviders(\n        <MarketSelector currentMarket=\"general-local\" />\n      )\n      \n      const select = screen.getByTestId('market-select') as HTMLSelectElement\n      expect(select.value).toBe('general-local')\n    })\n    \n    it('calls onMarketChange when selection changes', async () => {\n      const onMarketChange = jest.fn()\n      const { user } = renderWithProviders(\n        <MarketSelector onMarketChange={onMarketChange} />\n      )\n      \n      const select = screen.getByTestId('market-select')\n      await user.selectOptions(select, 'general-regional')\n      \n      expect(onMarketChange).toHaveBeenCalledWith('general-regional')\n    })\n  })\n  \n  describe('Industry-specific behavior', () => {\n    it('shows cinema-specific markets for cinema industry', () => {\n      renderForIndustry(\n        <MarketSelector />,\n        'cinema'\n      )\n      \n      expect(screen.getByText('Downtown Cinema')).toBeInTheDocument()\n      expect(screen.getByText('Mall Cinema')).toBeInTheDocument()\n      expect(screen.getByText('Suburban Cinema')).toBeInTheDocument()\n      expect(screen.getByText('Current Industry: cinema')).toBeInTheDocument()\n    })\n    \n    it('shows hotel-specific markets for hotel industry', () => {\n      renderForIndustry(\n        <MarketSelector />,\n        'hotel'\n      )\n      \n      expect(screen.getByText('Luxury Hotels')).toBeInTheDocument()\n      expect(screen.getByText('Business Hotels')).toBeInTheDocument()\n      expect(screen.getByText('Budget Hotels')).toBeInTheDocument()\n      expect(screen.getByText('Current Industry: hotel')).toBeInTheDocument()\n    })\n    \n    it('shows gym-specific markets for gym industry', () => {\n      renderForIndustry(\n        <MarketSelector />,\n        'gym'\n      )\n      \n      expect(screen.getByText('Premium Fitness')).toBeInTheDocument()\n      expect(screen.getByText('Community Gyms')).toBeInTheDocument()\n      expect(screen.getByText('24/7 Gyms')).toBeInTheDocument()\n      expect(screen.getByText('Current Industry: gym')).toBeInTheDocument()\n    })\n    \n    it('shows general markets for unknown industry', () => {\n      renderForIndustry(\n        <MarketSelector />,\n        'general'\n      )\n      \n      expect(screen.getByText('Local Market')).toBeInTheDocument()\n      expect(screen.getByText('Regional Market')).toBeInTheDocument()\n      expect(screen.getByText('National Market')).toBeInTheDocument()\n      expect(screen.getByText('Current Industry: general')).toBeInTheDocument()\n    })\n  })\n  \n  describe('Multi-tenant isolation', () => {\n    it('preserves market selection across tenant switches', async () => {\n      const onMarketChange = jest.fn()\n      \n      // Render for cinema tenant\n      const { rerender, user } = renderForIndustry(\n        <MarketSelector onMarketChange={onMarketChange} />,\n        'cinema'\n      )\n      \n      // Select cinema market\n      const select = screen.getByTestId('market-select')\n      await user.selectOptions(select, 'cinema-downtown')\n      \n      expect(onMarketChange).toHaveBeenCalledWith('cinema-downtown')\n      \n      // Switch to hotel tenant\n      rerender(\n        <MarketSelector \n          onMarketChange={onMarketChange} \n          currentMarket=\"hotel-luxury\"\n        />,\n        { industryType: 'hotel' }\n      )\n      \n      // Should show hotel options now\n      expect(screen.getByText('Luxury Hotels')).toBeInTheDocument()\n      expect(screen.getByText('Current Industry: hotel')).toBeInTheDocument()\n    })\n  })\n  \n  describe('Accessibility', () => {\n    it('has no accessibility violations', async () => {\n      const { container } = renderWithProviders(\n        <MarketSelector currentMarket=\"general-local\" />\n      )\n      \n      await testAccessibility(container)\n    })\n    \n    it('supports keyboard navigation', async () => {\n      const onMarketChange = jest.fn()\n      const { user } = renderWithProviders(\n        <MarketSelector onMarketChange={onMarketChange} />\n      )\n      \n      const select = screen.getByTestId('market-select')\n      \n      // Focus and navigate with keyboard\n      select.focus()\n      await user.keyboard('{ArrowDown}')\n      await user.keyboard('{Enter}')\n      \n      expect(onMarketChange).toHaveBeenCalled()\n    })\n    \n    it('has proper ARIA labels and descriptions', () => {\n      renderWithProviders(<MarketSelector />)\n      \n      const select = screen.getByTestId('market-select')\n      expect(select).toBeInTheDocument()\n      \n      // Should have accessible name\n      expect(select).toBeVisible()\n    })\n  })\n  \n  describe('Loading states', () => {\n    it('handles loading state gracefully', async () => {\n      // Mock API delay\n      mockApiEndpoints.mockMarketEdge()\n      \n      const { container } = renderWithProviders(\n        <MarketSelector />\n      )\n      \n      await waitForLoadingToFinish(container)\n      \n      expect(screen.getByTestId('market-selector')).toBeInTheDocument()\n    })\n  })\n  \n  describe('Error handling', () => {\n    it('displays error state when API fails', async () => {\n      // Mock API failure\n      mockApiEndpoints.mockMarketEdge()\n      \n      renderWithProviders(<MarketSelector />)\n      \n      // Component should still render with fallback options\n      expect(screen.getByTestId('market-selector')).toBeInTheDocument()\n    })\n  })\n  \n  describe('Performance', () => {\n    it('renders efficiently with many market options', async () => {\n      const manyMarkets = generateTestData.competitors(50)\n      \n      const startTime = performance.now()\n      \n      renderWithProviders(\n        <MarketSelector />\n      )\n      \n      const endTime = performance.now()\n      const renderTime = endTime - startTime\n      \n      // Should render in reasonable time (< 100ms)\n      expect(renderTime).toBeLessThan(100)\n    })\n  })\n  \n  describe('Integration scenarios', () => {\n    describe('Cinema industry', () => {\n      beforeEach(() => {\n        industryTestScenarios.cinema.ticketingSystem()\n      })\n      \n      it('integrates with cinema ticketing data', async () => {\n        const onMarketChange = jest.fn()\n        const { user } = renderForIndustry(\n          <MarketSelector onMarketChange={onMarketChange} />,\n          'cinema'\n        )\n        \n        // Select cinema market\n        const select = screen.getByTestId('market-select')\n        await user.selectOptions(select, 'cinema-downtown')\n        \n        expect(onMarketChange).toHaveBeenCalledWith('cinema-downtown')\n        \n        // Should trigger integration with ticketing system\n        await waitFor(() => {\n          expect(screen.getByText('Current Industry: cinema')).toBeInTheDocument()\n        })\n      })\n    })\n    \n    describe('Hotel industry', () => {\n      beforeEach(() => {\n        industryTestScenarios.hotel.realTimePricing()\n      })\n      \n      it('integrates with real-time pricing data', async () => {\n        const onMarketChange = jest.fn()\n        const { user } = renderForIndustry(\n          <MarketSelector onMarketChange={onMarketChange} />,\n          'hotel'\n        )\n        \n        const select = screen.getByTestId('market-select')\n        await user.selectOptions(select, 'hotel-luxury')\n        \n        expect(onMarketChange).toHaveBeenCalledWith('hotel-luxury')\n      })\n    })\n    \n    describe('Gym industry', () => {\n      beforeEach(() => {\n        industryTestScenarios.gym.membershipTracking()\n      })\n      \n      it('integrates with membership tracking', async () => {\n        const onMarketChange = jest.fn()\n        const { user } = renderForIndustry(\n          <MarketSelector onMarketChange={onMarketChange} />,\n          'gym'\n        )\n        \n        const select = screen.getByTestId('market-select')\n        await user.selectOptions(select, 'gym-premium')\n        \n        expect(onMarketChange).toHaveBeenCalledWith('gym-premium')\n      })\n    })\n  })\n  \n  describe('Snapshot tests', () => {\n    it('matches snapshot for general industry', () => {\n      const { container } = renderWithProviders(<MarketSelector />)\n      expect(container.firstChild).toMatchSnapshot()\n    })\n    \n    it('matches snapshot for cinema industry', () => {\n      const { container } = renderForIndustry(\n        <MarketSelector />,\n        'cinema'\n      )\n      expect(container.firstChild).toMatchSnapshot()\n    })\n    \n    it('matches snapshot for hotel industry', () => {\n      const { container } = renderForIndustry(\n        <MarketSelector />,\n        'hotel'\n      )\n      expect(container.firstChild).toMatchSnapshot()\n    })\n  })\n})"],"names":["jest","mock","MarketSelector","onMarketChange","currentMarket","industry","div","data-testid","select","value","onChange","e","target","option","describe","it","renderWithProviders","expect","screen","getByTestId","toBeInTheDocument","toBe","fn","user","selectOptions","toHaveBeenCalledWith","renderForIndustry","getByText","rerender","industryType","container","testAccessibility","focus","keyboard","toHaveBeenCalled","toBeVisible","mockApiEndpoints","mockMarketEdge","waitForLoadingToFinish","manyMarkets","generateTestData","competitors","startTime","performance","now","endTime","renderTime","toBeLessThan","beforeEach","industryTestScenarios","cinema","ticketingSystem","waitFor","hotel","realTimePricing","gym","membershipTracking","firstChild","toMatchSnapshot"],"mappings":"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"}