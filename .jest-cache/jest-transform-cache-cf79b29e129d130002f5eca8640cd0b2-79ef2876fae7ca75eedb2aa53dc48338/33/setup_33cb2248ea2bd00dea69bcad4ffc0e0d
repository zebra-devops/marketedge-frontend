62699731984f47010e3a49b1077ee7c4
/**
 * Jest Test Setup for Multi-Tenant Platform Testing
 * 
 * Configures:
 * - React Testing Library
 * - Jest DOM matchers
 * - Mock Service Worker
 * - Multi-tenant test environment
 * - Global test utilities
 */ "use strict";
// Mock next/router for Next.js components
jest.mock("next/router", ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn(),
                query: {},
                pathname: "/",
                asPath: "/",
                route: "/",
                isReady: true,
                events: {
                    on: jest.fn(),
                    off: jest.fn(),
                    emit: jest.fn()
                }
            })
    }));
// Mock next/navigation for App Router
jest.mock("next/navigation", ()=>({
        useRouter: ()=>({
                push: jest.fn(),
                replace: jest.fn(),
                back: jest.fn(),
                forward: jest.fn(),
                refresh: jest.fn(),
                prefetch: jest.fn()
            }),
        usePathname: ()=>"/",
        useSearchParams: ()=>new URLSearchParams(),
        useParams: ()=>({})
    }));
// Mock next/image
jest.mock("next/image", ()=>({
        __esModule: true,
        default: (props)=>_react.default.createElement("img", props)
    }));
// Mock Chart.js and recharts for data visualization components
jest.mock("recharts", ()=>({
        ...jest.requireActual("recharts"),
        ResponsiveContainer: ({ children })=>children
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "TestErrorBoundary", {
    enumerable: true,
    get: function() {
        return TestErrorBoundary;
    }
});
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
require("@testing-library/jest-dom");
const _react1 = require("@testing-library/react");
const _jestaxe = require("jest-axe");
const _server = require("../__tests__/mocks/server");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// Extend Jest matchers
expect.extend(_jestaxe.toHaveNoViolations);
// Configure React Testing Library
(0, _react1.configure)({
    // Increase timeout for complex multi-tenant scenarios
    asyncUtilTimeout: 5000,
    // Custom test ID attribute for better component identification
    testIdAttribute: "data-testid",
    // Show suggestions for better queries
    showOriginalStackTrace: true
});
// Mock Service Worker setup
beforeAll(()=>{
    // Start the mocking server
    _server.server.listen({
        onUnhandledRequest: "warn"
    });
});
afterEach(()=>{
    // Reset any runtime request handlers we may have added during tests
    _server.server.resetHandlers();
    // Clean up any DOM changes
    document.body.innerHTML = "";
    // Clear localStorage for multi-tenant isolation
    localStorage.clear();
    sessionStorage.clear();
    // Reset any global state
    if (window.__PLATFORM_CONFIG__) {
        delete window.__PLATFORM_CONFIG__;
    }
});
afterAll(()=>{
    // Stop the mocking server
    _server.server.close();
});
// Global test environment setup
beforeEach(()=>{
    // Set up default platform configuration for tests
    window.__PLATFORM_CONFIG__ = {
        environment: "test",
        apiUrl: "http://localhost:8000",
        enableDebugMode: true,
        features: {
            rateLimit: true,
            multiTenant: true,
            analytics: false
        }
    };
    // Mock console methods to reduce noise in tests
    jest.spyOn(console, "error").mockImplementation(()=>{});
    jest.spyOn(console, "warn").mockImplementation(()=>{});
    jest.spyOn(console, "info").mockImplementation(()=>{});
});
// Global mocks for browser APIs
Object.defineProperty(window, "matchMedia", {
    writable: true,
    value: jest.fn().mockImplementation((query)=>({
            matches: false,
            media: query,
            onchange: null,
            addListener: jest.fn(),
            removeListener: jest.fn(),
            addEventListener: jest.fn(),
            removeEventListener: jest.fn(),
            dispatchEvent: jest.fn()
        }))
});
// Mock ResizeObserver
global.ResizeObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn()
    }));
// Mock IntersectionObserver
global.IntersectionObserver = jest.fn().mockImplementation(()=>({
        observe: jest.fn(),
        unobserve: jest.fn(),
        disconnect: jest.fn(),
        root: null,
        rootMargin: "",
        thresholds: []
    }));
// Mock document event handling for Auth Service activity tracking
if (typeof document !== "undefined") {
    const originalAddEventListener = document.addEventListener;
    const originalRemoveEventListener = document.removeEventListener;
    document.addEventListener = jest.fn((event, handler, options)=>{
        // For test environment, just store the mock but don't actually add listeners
        // This prevents issues with activity tracking in auth service
        return jest.fn();
    });
    document.removeEventListener = jest.fn((event, handler, options)=>{
        return jest.fn();
    });
}
// Mock window event handling
if (typeof window !== "undefined") {
    const originalWindowAddEventListener = window.addEventListener;
    const originalWindowRemoveEventListener = window.removeEventListener;
    window.addEventListener = jest.fn();
    window.removeEventListener = jest.fn();
}
// Mock window.location for multi-tenant URL testing
Object.defineProperty(window, "location", {
    writable: true,
    value: {
        hostname: "localhost",
        port: "3000",
        protocol: "http:",
        pathname: "/",
        search: "",
        hash: "",
        origin: "http://localhost:3000",
        href: "http://localhost:3000",
        assign: jest.fn(),
        replace: jest.fn(),
        reload: jest.fn()
    }
});
// Mock fetch for API calls not handled by MSW
global.fetch = jest.fn();
class TestErrorBoundary extends Error {
    constructor(message){
        super(message);
        this.name = "TestErrorBoundary";
    }
}
// Global error handler for unhandled promise rejections
process.on("unhandledRejection", (reason, promise)=>{
    console.error("Unhandled Rejection at:", promise, "reason:", reason);
});
// Suppress specific warnings in tests
const originalError = console.error;
beforeAll(()=>{
    console.error = (...args)=>{
        if (args[0]?.includes?.("Warning: ReactDOM.render is no longer supported") || args[0]?.includes?.("Warning: React.createFactory") || args[0]?.includes?.("act(") || args[0]?.includes?.("useLayoutEffect does nothing on the server")) {
            return;
        }
        originalError.call(console, ...args);
    };
});
afterAll(()=>{
    console.error = originalError;
});
// Global test timeout for async operations
jest.setTimeout(10000);
// Enable fake timers by default for better test control
// Individual tests can opt-out using jest.useRealTimers()
beforeEach(()=>{
    jest.useFakeTimers();
});
afterEach(()=>{
    jest.runOnlyPendingTimers();
    jest.useRealTimers();
});

//# sourceMappingURL=data:application/json;base64,