a906c056491c4d7c366fb040dd950533
"use strict";
// Mock Heroicons
jest.mock("@heroicons/react/24/outline", ()=>({
        ChevronUpIcon: ({ className })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                "data-testid": "chevron-up",
                className: className,
                children: "up"
            }),
        ChevronDownIcon: ({ className })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                "data-testid": "chevron-down",
                className: className,
                children: "down"
            }),
        EyeIcon: ({ className })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                "data-testid": "eye-icon",
                className: className,
                children: "view"
            }),
        PencilIcon: ({ className })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                "data-testid": "pencil-icon",
                className: className,
                children: "edit"
            }),
        GlobeAltIcon: ({ className })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                "data-testid": "globe-icon",
                className: className,
                children: "globe"
            }),
        BuildingOfficeIcon: ({ className })=>/*#__PURE__*/ (0, _jsxruntime.jsx)("svg", {
                "data-testid": "building-icon",
                className: className,
                children: "building"
            })
    }));
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _testutils = require("../../../test-utils");
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _CompetitorTable = require("../CompetitorTable");
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
describe("CompetitorTable Component", ()=>{
    const user = _userevent.default.setup();
    const mockCompetitors = [
        {
            id: "comp-1",
            name: "Alpha Corp",
            business_type: "Technology",
            market_share_estimate: 25.5,
            tracking_priority: 4,
            website: "https://alpha-corp.com",
            last_updated: "2023-12-01T10:00:00Z"
        },
        {
            id: "comp-2",
            name: "Beta LLC",
            business_type: "Retail",
            market_share_estimate: 18.3,
            tracking_priority: 2,
            website: "https://beta-llc.com",
            last_updated: "2023-11-28T15:30:00Z"
        },
        {
            id: "comp-3",
            name: "Gamma Industries",
            business_type: "Manufacturing",
            market_share_estimate: null,
            tracking_priority: 5,
            website: null,
            last_updated: null
        }
    ];
    const defaultProps = {
        competitors: mockCompetitors,
        isLoading: false
    };
    beforeEach(()=>{
        jest.clearAllMocks();
        // Mock current date for consistent last_updated formatting
        jest.useFakeTimers();
        jest.setSystemTime(new Date("2023-12-05T12:00:00Z"));
    });
    afterEach(()=>{
        jest.useRealTimers();
    });
    it("renders table with competitors data", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps
        }));
        expect(_testutils.screen.getByRole("table")).toBeInTheDocument();
        expect(_testutils.screen.getByText("Alpha Corp")).toBeInTheDocument();
        expect(_testutils.screen.getByText("Beta LLC")).toBeInTheDocument();
        expect(_testutils.screen.getByText("Gamma Industries")).toBeInTheDocument();
    });
    it("displays loading state", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps,
            isLoading: true
        }));
        expect(_testutils.screen.getByText("Loading competitors...")).toBeInTheDocument();
        expect(_testutils.screen.queryByRole("table")).not.toBeInTheDocument();
    });
    it("displays empty state when no competitors", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps,
            competitors: []
        }));
        expect(_testutils.screen.getByText("No competitors")).toBeInTheDocument();
        expect(_testutils.screen.getByText("Get started by adding competitors to track in this market.")).toBeInTheDocument();
        expect(_testutils.screen.getByTestId("building-icon")).toBeInTheDocument();
    });
    it("renders all table headers", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps
        }));
        expect(_testutils.screen.getByText("Competitor")).toBeInTheDocument();
        expect(_testutils.screen.getByText("Type")).toBeInTheDocument();
        expect(_testutils.screen.getByText("Market Share")).toBeInTheDocument();
        expect(_testutils.screen.getByText("Priority")).toBeInTheDocument();
        expect(_testutils.screen.getByText("Last Updated")).toBeInTheDocument();
    });
    it("formats market share correctly", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps
        }));
        expect(_testutils.screen.getByText("25.5%")).toBeInTheDocument();
        expect(_testutils.screen.getByText("18.3%")).toBeInTheDocument();
        expect(_testutils.screen.getByText("N/A")).toBeInTheDocument() // For null market share
        ;
    });
    it("displays priority badges with correct styling", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps
        }));
        const highPriority = _testutils.screen.getByText("High");
        expect(highPriority).toHaveClass("bg-orange-100", "text-orange-800");
        const belowAveragePriority = _testutils.screen.getByText("Below Average");
        expect(belowAveragePriority).toHaveClass("bg-blue-100", "text-blue-800");
        const criticalPriority = _testutils.screen.getByText("Critical");
        expect(criticalPriority).toHaveClass("bg-red-100", "text-red-800");
    });
    it("formats last updated dates correctly", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps
        }));
        expect(_testutils.screen.getByText("4 days ago")).toBeInTheDocument() // Dec 1
        ;
        expect(_testutils.screen.getByText("1 weeks ago")).toBeInTheDocument() // Nov 28 
        ;
        expect(_testutils.screen.getByText("Never")).toBeInTheDocument() // null date
        ;
    });
    it("renders website links correctly", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps
        }));
        const alphaLink = _testutils.screen.getByText("alpha-corp.com");
        expect(alphaLink).toHaveAttribute("href", "https://alpha-corp.com");
        expect(alphaLink).toHaveAttribute("target", "_blank");
        expect(alphaLink).toHaveAttribute("rel", "noopener noreferrer");
        const betaLink = _testutils.screen.getByText("beta-llc.com");
        expect(betaLink).toHaveAttribute("href", "https://beta-llc.com");
    });
    it("handles sorting by name", async ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps
        }));
        const nameHeader = _testutils.screen.getByText("Competitor");
        await user.click(nameHeader);
        const rows = _testutils.screen.getAllByRole("row");
        // First row is header, so check data rows
        expect(rows[1]).toHaveTextContent("Alpha Corp");
        expect(rows[2]).toHaveTextContent("Beta LLC");
        expect(rows[3]).toHaveTextContent("Gamma Industries");
        // Click again to sort descending
        await user.click(nameHeader);
        const rowsDesc = _testutils.screen.getAllByRole("row");
        expect(rowsDesc[1]).toHaveTextContent("Gamma Industries");
        expect(rowsDesc[2]).toHaveTextContent("Beta LLC");
        expect(rowsDesc[3]).toHaveTextContent("Alpha Corp");
    });
    it("handles sorting by market share", async ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps
        }));
        const marketShareHeader = _testutils.screen.getByText("Market Share");
        await user.click(marketShareHeader);
        // Should sort by market share ascending (null values last)
        const rows = _testutils.screen.getAllByRole("row");
        expect(rows[1]).toHaveTextContent("Beta LLC") // 18.3%
        ;
        expect(rows[2]).toHaveTextContent("Alpha Corp") // 25.5%
        ;
        expect(rows[3]).toHaveTextContent("Gamma Industries") // null
        ;
    });
    it("shows sort indicators correctly", async ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps
        }));
        const nameHeader = _testutils.screen.getByText("Competitor");
        await user.click(nameHeader);
        expect(_testutils.screen.getByTestId("chevron-up")).toBeInTheDocument();
        await user.click(nameHeader);
        expect(_testutils.screen.getByTestId("chevron-down")).toBeInTheDocument();
    });
    it("calls onViewCompetitor when view button is clicked", async ()=>{
        const onViewCompetitor = jest.fn();
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps,
            onViewCompetitor: onViewCompetitor
        }));
        const viewButtons = _testutils.screen.getAllByTestId("eye-icon");
        await user.click(viewButtons[0]);
        expect(onViewCompetitor).toHaveBeenCalledWith(mockCompetitors[0]);
    });
    it("calls onEditCompetitor when edit button is clicked", async ()=>{
        const onEditCompetitor = jest.fn();
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps,
            onEditCompetitor: onEditCompetitor
        }));
        const editButtons = _testutils.screen.getAllByTestId("pencil-icon");
        await user.click(editButtons[0]);
        expect(onEditCompetitor).toHaveBeenCalledWith(mockCompetitors[0]);
    });
    it("does not render action buttons when handlers not provided", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps
        }));
        expect(_testutils.screen.queryByTestId("eye-icon")).not.toBeInTheDocument();
        expect(_testutils.screen.queryByTestId("pencil-icon")).not.toBeInTheDocument();
    });
    it("applies custom className", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps,
            className: "custom-table-class"
        }));
        const tableContainer = _testutils.screen.getByRole("table").closest("div");
        expect(tableContainer).toHaveClass("custom-table-class");
    });
    it("handles null/undefined business types", ()=>{
        const competitorsWithNullType = [
            {
                ...mockCompetitors[0],
                business_type: null
            }
        ];
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            competitors: competitorsWithNullType
        }));
        expect(_testutils.screen.getByText("Not specified")).toBeInTheDocument();
    });
    it("has proper table structure and accessibility", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps
        }));
        const table = _testutils.screen.getByRole("table");
        expect(table).toHaveClass("min-w-full", "divide-y", "divide-gray-200");
        const thead = table.querySelector("thead");
        expect(thead).toHaveClass("bg-gray-50");
        const tbody = table.querySelector("tbody");
        expect(tbody).toHaveClass("bg-white", "divide-y", "divide-gray-200");
    });
    it("has hover effects on rows", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps
        }));
        const dataRows = _testutils.screen.getAllByRole("row").slice(1) // Skip header row
        ;
        dataRows.forEach((row)=>{
            expect(row).toHaveClass("hover:bg-gray-50");
        });
    });
    it("handles responsive design classes", ()=>{
        (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_CompetitorTable.CompetitorTable, {
            ...defaultProps
        }));
        const container = _testutils.screen.getByRole("table").closest("div");
        expect(container).toHaveClass("overflow-x-auto");
        const outerContainer = container?.parentElement;
        expect(outerContainer).toHaveClass("bg-white", "rounded-lg", "border", "border-gray-200", "overflow-hidden");
    });
});

//# sourceMappingURL=data:application/json;base64,