d1dd01700c19404e260336df33afacf7
/**
 * Tests for Button Component
 * 
 * Comprehensive test suite covering:
 * - Basic rendering and functionality
 * - Different variants and sizes
 * - Accessibility features
 * - User interactions
 * - Loading and disabled states
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
const _jsxruntime = require("react/jsx-runtime");
const _testutils = require("@test-utils");
const _jestaxe = require("jest-axe");
const _Button = require("../Button");
describe("Button Component", ()=>{
    describe("Basic Rendering", ()=>{
        it("renders button with text content", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                children: "Click me"
            }));
            const button = _testutils.screen.getByRole("button", {
                name: /click me/i
            });
            expect(button).toBeInTheDocument();
            expect(button).toHaveTextContent("Click me");
        });
        it("renders button with custom className", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                className: "custom-class",
                children: "Test"
            }));
            const button = _testutils.screen.getByRole("button");
            expect(button).toHaveClass("custom-class");
        });
        it("forwards ref correctly", ()=>{
            const ref = {
                current: null
            };
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                ref: ref,
                children: "Test"
            }));
            expect(ref.current).toBeInstanceOf(HTMLButtonElement);
        });
    });
    describe("Button Variants", ()=>{
        it("renders primary variant by default", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                children: "Primary"
            }));
            const button = _testutils.screen.getByRole("button");
            expect(button).toHaveClass("bg-blue-600") // Assuming Tailwind classes
            ;
        });
        it("renders secondary variant when specified", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                variant: "secondary",
                children: "Secondary"
            }));
            const button = _testutils.screen.getByRole("button");
            expect(button).toHaveClass("bg-gray-600");
        });
        it("renders destructive variant when specified", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                variant: "destructive",
                children: "Delete"
            }));
            const button = _testutils.screen.getByRole("button");
            expect(button).toHaveClass("bg-red-600");
        });
        it("renders outline variant when specified", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                variant: "outline",
                children: "Outline"
            }));
            const button = _testutils.screen.getByRole("button");
            expect(button).toHaveClass("border");
            expect(button).not.toHaveClass("bg-blue-600");
        });
        it("renders ghost variant when specified", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                variant: "ghost",
                children: "Ghost"
            }));
            const button = _testutils.screen.getByRole("button");
            expect(button).toHaveClass("hover:bg-gray-100");
        });
    });
    describe("Button Sizes", ()=>{
        it("renders default size when not specified", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                children: "Default"
            }));
            const button = _testutils.screen.getByRole("button");
            expect(button).toHaveClass("h-10");
        });
        it("renders small size when specified", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                size: "sm",
                children: "Small"
            }));
            const button = _testutils.screen.getByRole("button");
            expect(button).toHaveClass("h-9");
        });
        it("renders large size when specified", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                size: "lg",
                children: "Large"
            }));
            const button = _testutils.screen.getByRole("button");
            expect(button).toHaveClass("h-11");
        });
        it("renders icon size when specified", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                size: "icon",
                children: "\uD83D\uDD0D"
            }));
            const button = _testutils.screen.getByRole("button");
            expect(button).toHaveClass("h-10", "w-10");
        });
    });
    describe("Interactive States", ()=>{
        it("handles click events", ()=>{
            const handleClick = jest.fn();
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                onClick: handleClick,
                children: "Click me"
            }));
            const button = _testutils.screen.getByRole("button");
            _testutils.fireEvent.click(button);
            expect(handleClick).toHaveBeenCalledTimes(1);
        });
        it("does not trigger onClick when disabled", ()=>{
            const handleClick = jest.fn();
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                disabled: true,
                onClick: handleClick,
                children: "Disabled"
            }));
            const button = _testutils.screen.getByRole("button");
            _testutils.fireEvent.click(button);
            expect(handleClick).not.toHaveBeenCalled();
            expect(button).toBeDisabled();
        });
        it("shows loading state correctly", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                loading: true,
                children: "Loading"
            }));
            const button = _testutils.screen.getByRole("button");
            expect(button).toBeDisabled();
            expect(_testutils.screen.getByTestId("loading-spinner")).toBeInTheDocument();
        });
        it("prevents click events during loading", ()=>{
            const handleClick = jest.fn();
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                loading: true,
                onClick: handleClick,
                children: "Loading"
            }));
            const button = _testutils.screen.getByRole("button");
            _testutils.fireEvent.click(button);
            expect(handleClick).not.toHaveBeenCalled();
        });
    });
    describe("Accessibility", ()=>{
        it("has no accessibility violations", async ()=>{
            const { container } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                children: "Accessible Button"
            }));
            const results = await (0, _jestaxe.axe)(container);
            expect(results).toHaveNoViolations();
        });
        it("supports custom ARIA labels", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                "aria-label": "Custom label",
                children: "Icon only"
            }));
            const button = _testutils.screen.getByRole("button", {
                name: /custom label/i
            });
            expect(button).toBeInTheDocument();
        });
        it("supports ARIA describedby", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                        "aria-describedby": "help-text",
                        children: "Submit"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("div", {
                        id: "help-text",
                        children: "This will submit the form"
                    })
                ]
            }));
            const button = _testutils.screen.getByRole("button");
            expect(button).toHaveAttribute("aria-describedby", "help-text");
        });
        it("has correct role and type attributes", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                type: "submit",
                children: "Submit"
            }));
            const button = _testutils.screen.getByRole("button");
            expect(button).toHaveAttribute("type", "submit");
        });
    });
    describe("Form Integration", ()=>{
        it("can be used as form submission button", ()=>{
            const handleSubmit = jest.fn((e)=>e.preventDefault());
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)("form", {
                onSubmit: handleSubmit,
                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                    type: "submit",
                    children: "Submit Form"
                })
            }));
            const button = _testutils.screen.getByRole("button");
            _testutils.fireEvent.click(button);
            expect(handleSubmit).toHaveBeenCalledTimes(1);
        });
        it("can be used as form reset button", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsxs)("form", {
                children: [
                    /*#__PURE__*/ (0, _jsxruntime.jsx)("input", {
                        defaultValue: "test"
                    }),
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                        type: "reset",
                        children: "Reset Form"
                    })
                ]
            }));
            const input = _testutils.screen.getByRole("textbox");
            const resetButton = _testutils.screen.getByRole("button");
            // Change input value
            _testutils.fireEvent.change(input, {
                target: {
                    value: "changed"
                }
            });
            expect(input).toHaveValue("changed");
            // Reset form
            _testutils.fireEvent.click(resetButton);
            expect(input).toHaveValue("test");
        });
    });
    describe("Multi-tenant Context", ()=>{
        it("renders correctly in cinema tenant context", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                children: "Book Tickets"
            }), {
                tenant: {
                    industry: "cinema",
                    organizationName: "CineMax"
                }
            });
            const button = _testutils.screen.getByRole("button");
            expect(button).toBeInTheDocument();
            expect(button).toHaveTextContent("Book Tickets");
        });
        it("renders correctly in hotel tenant context", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                children: "Make Reservation"
            }), {
                tenant: {
                    industry: "hotel",
                    organizationName: "Grand Hotel"
                }
            });
            const button = _testutils.screen.getByRole("button");
            expect(button).toBeInTheDocument();
            expect(button).toHaveTextContent("Make Reservation");
        });
        it("applies tenant-specific styling if implemented", ()=>{
            // This test would be more relevant if the button component
            // actually uses tenant context for styling
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                children: "Test"
            }), {
                tenant: {
                    industry: "cinema"
                }
            });
            const button = _testutils.screen.getByRole("button");
            expect(button).toBeInTheDocument();
        // Add assertions for tenant-specific styling if implemented
        });
    });
    describe("Edge Cases", ()=>{
        it("handles very long button text", ()=>{
            const longText = "This is a very long button text that should be handled gracefully";
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                children: longText
            }));
            const button = _testutils.screen.getByRole("button");
            expect(button).toHaveTextContent(longText);
            expect(button).toBeInTheDocument();
        });
        it("handles empty content gracefully", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {}));
            const button = _testutils.screen.getByRole("button");
            expect(button).toBeInTheDocument();
            expect(button).toHaveTextContent("");
        });
        it("handles rapid clicks", ()=>{
            const handleClick = jest.fn();
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                onClick: handleClick,
                children: "Rapid Click"
            }));
            const button = _testutils.screen.getByRole("button");
            // Simulate rapid clicks
            for(let i = 0; i < 5; i++){
                _testutils.fireEvent.click(button);
            }
            expect(handleClick).toHaveBeenCalledTimes(5);
        });
        it("maintains focus when not disabled", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                children: "Focus Test"
            }));
            const button = _testutils.screen.getByRole("button");
            button.focus();
            expect(button).toHaveFocus();
        });
        it("cannot receive focus when disabled", ()=>{
            (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                disabled: true,
                children: "Disabled Focus"
            }));
            const button = _testutils.screen.getByRole("button");
            button.focus();
            expect(button).not.toHaveFocus();
        });
    });
    describe("Performance", ()=>{
        it("does not re-render unnecessarily", ()=>{
            const renderSpy = jest.fn();
            const TestButton = (props)=>{
                renderSpy();
                return /*#__PURE__*/ (0, _jsxruntime.jsx)(_Button.Button, {
                    ...props
                });
            };
            const { rerender } = (0, _testutils.render)(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestButton, {
                children: "Test"
            }));
            expect(renderSpy).toHaveBeenCalledTimes(1);
            // Re-render with same props
            rerender(/*#__PURE__*/ (0, _jsxruntime.jsx)(TestButton, {
                children: "Test"
            }));
            // Should not cause additional renders if properly memoized
            expect(renderSpy).toHaveBeenCalledTimes(2);
        });
    });
});

//# sourceMappingURL=data:application/json;base64,