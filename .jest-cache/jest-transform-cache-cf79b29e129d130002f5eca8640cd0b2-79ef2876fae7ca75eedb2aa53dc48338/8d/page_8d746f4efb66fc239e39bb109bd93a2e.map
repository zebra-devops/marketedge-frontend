{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/app/market-edge/page.tsx"],"sourcesContent":["'use client';\n\nimport React, { useState, useEffect } from 'react';\nimport { \n  ChartBarIcon, \n  UsersIcon, \n  ExclamationTriangleIcon,\n  PlusIcon,\n  ArrowPathIcon,\n  BeakerIcon\n} from '@heroicons/react/24/outline';\nimport { MarketSelector } from '@/components/market-edge/MarketSelector';\nimport { CompetitorTable } from '@/components/market-edge/CompetitorTable';\nimport { PricingChart } from '@/components/market-edge/PricingChart';\nimport { PerformanceMetrics } from '@/components/market-edge/PerformanceMetrics';\nimport { AlertsPanel } from '@/components/market-edge/AlertsPanel';\nimport { AccountMenu } from '@/components/ui/AccountMenu';\nimport { DummyDataToggle } from '@/components/ui/DummyDataToggle';\nimport { marketEdgeAPI } from '@/services/market-edge-api';\nimport { \n  Market, \n  MarketOverview, \n  MarketTrends, \n  CompetitorComparison \n} from '@/types/market-edge';\n\nexport default function MarketEdgePage() {\n  const [selectedMarket, setSelectedMarket] = useState<Market | null>(null);\n  const [marketOverview, setMarketOverview] = useState<MarketOverview | null>(null);\n  const [pricingTrends, setPricingTrends] = useState<MarketTrends | null>(null);\n  const [competitorComparison, setCompetitorComparison] = useState<CompetitorComparison | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const [activeTab, setActiveTab] = useState<'overview' | 'competitors' | 'pricing' | 'alerts'>('overview');\n  const [isDummyMode, setIsDummyMode] = useState(true); // Default to dummy mode for testing\n\n  useEffect(() => {\n    if (selectedMarket) {\n      loadMarketData();\n    }\n  }, [selectedMarket, isDummyMode]); // Reload data when dummy mode changes\n\n  const loadMarketData = async () => {\n    if (!selectedMarket) return;\n\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const [overview, trends, comparison] = await Promise.all([\n        marketEdgeAPI.getMarketOverview(selectedMarket.id),\n        marketEdgeAPI.getPricingTrends(selectedMarket.id, { days_back: 30 }),\n        marketEdgeAPI.compareCompetitors(selectedMarket.id)\n      ]);\n\n      setMarketOverview(overview);\n      setPricingTrends(trends);\n      setCompetitorComparison(comparison);\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Failed to load market data');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleRefreshData = () => {\n    loadMarketData();\n  };\n\n  const tabs = [\n    { id: 'overview', name: 'Overview', icon: ChartBarIcon },\n    { id: 'competitors', name: 'Competitors', icon: UsersIcon },\n    { id: 'pricing', name: 'Pricing Analysis', icon: ChartBarIcon },\n    { id: 'alerts', name: 'Alerts', icon: ExclamationTriangleIcon },\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b border-gray-200\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex items-center justify-between h-16\">\n            <div className=\"flex items-center\">\n              <ChartBarIcon className=\"h-8 w-8 text-blue-600 mr-3\" />\n              <h1 className=\"text-2xl font-bold text-gray-900\">Market Edge</h1>\n              <span className=\"ml-3 text-sm text-gray-500\">Competitive Intelligence</span>\n            </div>\n            \n            <div className=\"flex items-center space-x-6\">\n              {/* Dummy Data Toggle */}\n              <DummyDataToggle\n                isDummyMode={isDummyMode}\n                onToggle={setIsDummyMode}\n              />\n              \n              {/* Market Selector and Actions */}\n              <div className=\"flex items-center space-x-4\">\n                <MarketSelector\n                  selectedMarket={selectedMarket || undefined}\n                  onMarketSelect={setSelectedMarket}\n                  onCreateMarket={() => {\n                    // This would open a create market modal\n                    console.log('Create new market');\n                  }}\n                  className=\"w-64\"\n                />\n                \n                {selectedMarket && (\n                  <button\n                    onClick={handleRefreshData}\n                    disabled={isLoading}\n                    className=\"inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50\"\n                  >\n                    <ArrowPathIcon className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />\n                    Refresh\n                  </button>\n                )}\n              </div>\n              \n              {/* Account Menu */}\n              <AccountMenu />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        {!selectedMarket ? (\n          // Welcome State\n          <div className=\"text-center py-12\">\n            <ChartBarIcon className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-lg font-medium text-gray-900\">Welcome to Market Edge</h3>\n            <p className=\"mt-1 text-sm text-gray-500 max-w-2xl mx-auto\">\n              Get started by selecting a market to analyze, or create a new market to begin tracking competitors and pricing data.\n              {isDummyMode && (\n                <span className=\"block mt-2 text-blue-600 font-medium\">\n                  Currently in test mode - select a market to see sample competitive intelligence data.\n                </span>\n              )}\n            </p>\n            <div className=\"mt-6\">\n              <button\n                onClick={() => {\n                  // This would open market selector or create modal\n                  console.log('Get started');\n                }}\n                className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500\"\n              >\n                <PlusIcon className=\"h-4 w-4 mr-2\" />\n                Get Started\n              </button>\n            </div>\n          </div>\n        ) : error ? (\n          // Error State\n          <div className=\"text-center py-12\">\n            <ExclamationTriangleIcon className=\"mx-auto h-12 w-12 text-red-400\" />\n            <h3 className=\"mt-2 text-lg font-medium text-gray-900\">Error Loading Market Data</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">{error}</p>\n            <div className=\"mt-6\">\n              <button\n                onClick={handleRefreshData}\n                className=\"inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-blue-600 hover:bg-blue-700\"\n              >\n                <ArrowPathIcon className=\"h-4 w-4 mr-2\" />\n                Try Again\n              </button>\n            </div>\n          </div>\n        ) : (\n          <>\n            {/* Data Mode Banner */}\n            {isDummyMode && (\n              <div className=\"mb-6 bg-blue-50 border border-blue-200 rounded-lg p-4\">\n                <div className=\"flex items-center\">\n                  <BeakerIcon className=\"h-5 w-5 text-blue-600 mr-2\" />\n                  <p className=\"text-sm text-blue-700\">\n                    <span className=\"font-medium\">Test Mode Active:</span> You're viewing sample competitive intelligence data for demonstration purposes.\n                    Toggle to \"Live\" mode to connect to real data sources.\n                  </p>\n                </div>\n              </div>\n            )}\n            \n            {/* Navigation Tabs */}\n            <div className=\"border-b border-gray-200 mb-8\">\n              <nav className=\"-mb-px flex space-x-8\">\n                {tabs.map((tab) => {\n                  const Icon = tab.icon;\n                  return (\n                    <button\n                      key={tab.id}\n                      onClick={() => setActiveTab(tab.id as any)}\n                      className={`${\n                        activeTab === tab.id\n                          ? 'border-blue-500 text-blue-600'\n                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n                      } whitespace-nowrap py-2 px-1 border-b-2 font-medium text-sm flex items-center`}\n                    >\n                      <Icon className=\"h-4 w-4 mr-2\" />\n                      {tab.name}\n                    </button>\n                  );\n                })}\n              </nav>\n            </div>\n\n            {/* Tab Content */}\n            {activeTab === 'overview' && (\n              <div className=\"space-y-8\">\n                {/* Market Overview Cards */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n                    <div className=\"flex items-center\">\n                      <UsersIcon className=\"h-8 w-8 text-blue-600\" />\n                      <div className=\"ml-4\">\n                        <p className=\"text-sm font-medium text-gray-500\">Competitors</p>\n                        <p className=\"text-2xl font-semibold text-gray-900\">\n                          {marketOverview?.competitors.length || 0}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n                    <div className=\"flex items-center\">\n                      <ChartBarIcon className=\"h-8 w-8 text-green-600\" />\n                      <div className=\"ml-4\">\n                        <p className=\"text-sm font-medium text-gray-500\">Data Points</p>\n                        <p className=\"text-2xl font-semibold text-gray-900\">\n                          {marketOverview?.recent_data_points || 0}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"bg-white p-6 rounded-lg border border-gray-200\">\n                    <div className=\"flex items-center\">\n                      <ExclamationTriangleIcon className=\"h-8 w-8 text-yellow-600\" />\n                      <div className=\"ml-4\">\n                        <p className=\"text-sm font-medium text-gray-500\">Active Alerts</p>\n                        <p className=\"text-2xl font-semibold text-gray-900\">\n                          {marketOverview?.recent_alerts.filter(a => !a.is_read).length || 0}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Performance Metrics */}\n                {marketOverview?.metrics && (\n                  <PerformanceMetrics \n                    metrics={marketOverview.metrics} \n                    isLoading={isLoading}\n                  />\n                )}\n\n                {/* Recent Alerts */}\n                {marketOverview?.recent_alerts && (\n                  <AlertsPanel\n                    alerts={marketOverview.recent_alerts}\n                    isLoading={isLoading}\n                    onRefresh={handleRefreshData}\n                  />\n                )}\n              </div>\n            )}\n\n            {activeTab === 'competitors' && (\n              <div className=\"space-y-8\">\n                {marketOverview?.competitors && (\n                  <CompetitorTable\n                    competitors={marketOverview.competitors}\n                    isLoading={isLoading}\n                    onViewCompetitor={(competitor) => {\n                      console.log('View competitor:', competitor);\n                    }}\n                    onEditCompetitor={(competitor) => {\n                      console.log('Edit competitor:', competitor);\n                    }}\n                  />\n                )}\n\n                {competitorComparison && (\n                  <PricingChart\n                    data={competitorComparison}\n                    chartType=\"bar\"\n                    title=\"Competitor Price Comparison\"\n                    height={400}\n                  />\n                )}\n              </div>\n            )}\n\n            {activeTab === 'pricing' && (\n              <div className=\"space-y-8\">\n                {pricingTrends && (\n                  <PricingChart\n                    data={pricingTrends}\n                    chartType=\"line\"\n                    title=\"Pricing Trends Over Time\"\n                    height={500}\n                  />\n                )}\n\n                {marketOverview?.metrics && (\n                  <PerformanceMetrics \n                    metrics={marketOverview.metrics} \n                    isLoading={isLoading}\n                  />\n                )}\n              </div>\n            )}\n\n            {activeTab === 'alerts' && (\n              <div className=\"space-y-8\">\n                {marketOverview?.recent_alerts && (\n                  <AlertsPanel\n                    alerts={marketOverview.recent_alerts}\n                    isLoading={isLoading}\n                    onRefresh={handleRefreshData}\n                  />\n                )}\n              </div>\n            )}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}"],"names":["MarketEdgePage","selectedMarket","setSelectedMarket","useState","marketOverview","setMarketOverview","pricingTrends","setPricingTrends","competitorComparison","setCompetitorComparison","isLoading","setIsLoading","error","setError","activeTab","setActiveTab","isDummyMode","setIsDummyMode","useEffect","loadMarketData","overview","trends","comparison","Promise","all","marketEdgeAPI","getMarketOverview","id","getPricingTrends","days_back","compareCompetitors","err","Error","message","handleRefreshData","tabs","name","icon","ChartBarIcon","UsersIcon","ExclamationTriangleIcon","div","className","h1","span","DummyDataToggle","onToggle","MarketSelector","undefined","onMarketSelect","onCreateMarket","console","log","button","onClick","disabled","ArrowPathIcon","AccountMenu","h3","p","PlusIcon","BeakerIcon","nav","map","tab","Icon","competitors","length","recent_data_points","recent_alerts","filter","a","is_read","metrics","PerformanceMetrics","AlertsPanel","alerts","onRefresh","CompetitorTable","onViewCompetitor","competitor","onEditCompetitor","PricingChart","data","chartType","title","height"],"mappings":"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"}