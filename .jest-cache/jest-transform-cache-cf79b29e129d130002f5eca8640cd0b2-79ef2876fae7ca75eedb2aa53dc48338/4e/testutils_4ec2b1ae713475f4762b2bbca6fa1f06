a8f11fa022a1e8a528d15b759b6d2cf0
/**
 * Multi-Tenant Testing Utilities
 * 
 * Comprehensive testing utilities for the platform wrapper that support:
 * - Multi-tenant context providers
 * - Auth provider mocking
 * - API mocking with MSW
 * - Accessibility testing
 * - Performance testing helpers
 * - Industry-specific test scenarios
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createTestOrganisation: function() {
        return createTestOrganisation;
    },
    createTestQueryClient: function() {
        return createTestQueryClient;
    },
    createTestUser: function() {
        return createTestUser;
    },
    defaultRender: function() {
        return _react1.render;
    },
    generateTestData: function() {
        return generateTestData;
    },
    industryTestScenarios: function() {
        return industryTestScenarios;
    },
    measureRenderTime: function() {
        return measureRenderTime;
    },
    mockApiEndpoints: function() {
        return mockApiEndpoints;
    },
    renderAsAdmin: function() {
        return renderAsAdmin;
    },
    renderForIndustry: function() {
        return renderForIndustry;
    },
    renderUnauthenticated: function() {
        return renderUnauthenticated;
    },
    renderWithProviders: function() {
        return renderWithProviders;
    },
    testAccessibility: function() {
        return testAccessibility;
    },
    userEvent: function() {
        return _userevent.default;
    },
    waitForLoadingToFinish: function() {
        return waitForLoadingToFinish;
    },
    withNetworkDelay: function() {
        return withNetworkDelay;
    }
});
const _jsxruntime = require("react/jsx-runtime");
const _react = /*#__PURE__*/ _interop_require_default(require("react"));
const _react1 = _export_star(require("@testing-library/react"), exports);
const _userevent = /*#__PURE__*/ _interop_require_default(require("@testing-library/user-event"));
const _reactquery = require("react-query");
const _reacthottoast = require("react-hot-toast");
const _jestaxe = require("jest-axe");
const _msw = require("msw");
const _jestsetup = require("../../jest.setup");
function _export_star(from, to) {
    Object.keys(from).forEach(function(k) {
        if (k !== "default" && !Object.prototype.hasOwnProperty.call(to, k)) {
            Object.defineProperty(to, k, {
                enumerable: true,
                get: function() {
                    return from[k];
                }
            });
        }
    });
    return from;
}
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
// Extend Jest matchers
expect.extend(_jestaxe.toHaveNoViolations);
/**
 * Mock Auth Provider for testing
 */ const MockAuthProvider = ({ children, value })=>{
    // This would normally use your AuthContext
    // For now, we'll make the auth context available via window for testing
    _react.default.useEffect(()=>{
        window.__TEST_AUTH_CONTEXT__ = value;
    }, [
        value
    ]);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: children
    });
};
const createTestUser = (overrides = {}, industry = "general")=>{
    const industrySpecificDefaults = {
        cinema: {
            email: "cinema@test.com",
            name: "Cinema Manager"
        },
        hotel: {
            email: "hotel@test.com",
            name: "Hotel Manager"
        },
        gym: {
            email: "gym@test.com",
            name: "Gym Manager"
        },
        b2b: {
            email: "b2b@test.com",
            name: "B2B Manager"
        },
        retail: {
            email: "retail@test.com",
            name: "Retail Manager"
        },
        general: {
            email: "general@test.com",
            name: "General Manager"
        }
    };
    return {
        id: `test-user-${industry}`,
        email: industrySpecificDefaults[industry].email,
        name: industrySpecificDefaults[industry].name,
        role: "user",
        organisation_id: `test-org-${industry}`,
        is_active: true,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        ...overrides
    };
};
const createTestOrganisation = (industry = "general", overrides = {})=>{
    const industryDefaults = {
        cinema: {
            name: "Cinema Corp",
            subscription_plan: "enterprise",
            rate_limit_per_hour: 10000,
            burst_limit: 300
        },
        hotel: {
            name: "Hotel Group",
            subscription_plan: "professional",
            rate_limit_per_hour: 7500,
            burst_limit: 200
        },
        gym: {
            name: "Fitness Chain",
            subscription_plan: "professional",
            rate_limit_per_hour: 5000,
            burst_limit: 150
        },
        b2b: {
            name: "B2B Services",
            subscription_plan: "enterprise",
            rate_limit_per_hour: 6000,
            burst_limit: 180
        },
        retail: {
            name: "Retail Store",
            subscription_plan: "basic",
            rate_limit_per_hour: 4000,
            burst_limit: 120
        },
        general: {
            name: "General Business",
            subscription_plan: "basic",
            rate_limit_per_hour: 3000,
            burst_limit: 100
        }
    };
    const defaults = industryDefaults[industry];
    return {
        id: `test-org-${industry}`,
        industry,
        is_active: true,
        ...defaults,
        ...overrides
    };
};
const createTestQueryClient = ()=>{
    return new _reactquery.QueryClient({
        defaultOptions: {
            queries: {
                retry: false,
                cacheTime: 0
            },
            mutations: {
                retry: false
            }
        }
    });
};
/**
 * Create the test wrapper with all providers
 */ const createTestWrapper = (options = {})=>{
    const { user = null, organisation = null, isAuthenticated = !!user, isAuthLoading = false, queryClient = createTestQueryClient(), skipAuthProvider = false, skipQueryProvider = false, skipToastProvider = false } = options;
    const authContext = {
        user,
        organisation,
        isAuthenticated,
        isLoading: isAuthLoading,
        login: jest.fn(),
        logout: jest.fn(),
        refreshToken: jest.fn()
    };
    // Build wrapper component
    const TestWrapper = ({ children })=>{
        let wrappedChildren = children;
        // Wrap with QueryClient provider
        if (!skipQueryProvider) {
            wrappedChildren = /*#__PURE__*/ (0, _jsxruntime.jsx)(_reactquery.QueryClientProvider, {
                client: queryClient,
                children: wrappedChildren
            });
        }
        // Wrap with Auth provider
        if (!skipAuthProvider) {
            wrappedChildren = /*#__PURE__*/ (0, _jsxruntime.jsx)(MockAuthProvider, {
                value: authContext,
                children: wrappedChildren
            });
        }
        // Wrap with Toast provider
        if (!skipToastProvider) {
            wrappedChildren = /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                children: [
                    wrappedChildren,
                    /*#__PURE__*/ (0, _jsxruntime.jsx)(_reacthottoast.ToastContainer, {})
                ]
            });
        }
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
            children: wrappedChildren
        });
    };
    return TestWrapper;
};
const renderWithProviders = (ui, options = {})=>{
    const TestWrapper = createTestWrapper(options);
    const renderResult = (0, _react1.render)(ui, {
        wrapper: TestWrapper,
        ...options
    });
    // Setup user event
    const userEventSetup = _userevent.default.setup();
    // Custom rerender that maintains the wrapper
    const rerender = (ui, rerenderOptions)=>{
        const NewTestWrapper = createTestWrapper({
            ...options,
            ...rerenderOptions
        });
        return renderResult.rerender(/*#__PURE__*/ _react.default.cloneElement(ui, {
            wrapper: NewTestWrapper
        }));
    };
    return {
        ...renderResult,
        user: userEventSetup,
        rerender
    };
};
const renderForIndustry = (ui, industry, overrides = {})=>{
    const user = createTestUser({}, industry);
    const organisation = createTestOrganisation(industry);
    return renderWithProviders(ui, {
        user,
        organisation,
        industryType: industry,
        ...overrides
    });
};
const renderAsAdmin = (ui, options = {})=>{
    const adminUser = createTestUser({
        role: "admin",
        email: "admin@test.com"
    });
    const organisation = createTestOrganisation(options.industryType);
    return renderWithProviders(ui, {
        user: adminUser,
        organisation,
        ...options
    });
};
const renderUnauthenticated = (ui, options = {})=>{
    return renderWithProviders(ui, {
        user: null,
        organisation: null,
        isAuthenticated: false,
        ...options
    });
};
const mockApiEndpoints = {
    // Authentication endpoints
    mockAuth: (user = null)=>{
        _jestsetup.server.use(_msw.http.get("/api/v1/auth/me", ()=>{
            if (!user) {
                return new _msw.HttpResponse(null, {
                    status: 401
                });
            }
            return _msw.HttpResponse.json(user);
        }), _msw.http.post("/api/v1/auth/login", ()=>{
            return _msw.HttpResponse.json({
                access_token: "mock_access_token",
                refresh_token: "mock_refresh_token",
                user: user || createTestUser()
            });
        }), _msw.http.post("/api/v1/auth/logout", ()=>{
            return _msw.HttpResponse.json({
                message: "Logged out successfully"
            });
        }));
    },
    // Organisation endpoints
    mockOrganisation: (organisation)=>{
        _jestsetup.server.use(_msw.http.get("/api/v1/organisations/:id", ({ params })=>{
            if (params.id === organisation.id) {
                return _msw.HttpResponse.json(organisation);
            }
            return new _msw.HttpResponse(null, {
                status: 404
            });
        }), _msw.http.get("/api/v1/organisations", ()=>{
            return _msw.HttpResponse.json({
                organisations: [
                    organisation
                ]
            });
        }));
    },
    // Market Edge endpoints
    mockMarketEdge: ()=>{
        _jestsetup.server.use(_msw.http.get("/api/v1/market-edge/competitors", ()=>{
            return _msw.HttpResponse.json([
                {
                    id: "1",
                    name: "Competitor 1",
                    market_share: 25.5,
                    pricing_tier: "premium"
                }
            ]);
        }), _msw.http.get("/api/v1/market-edge/performance", ()=>{
            return _msw.HttpResponse.json({
                revenue: 150000,
                growth: 12.5,
                market_position: 3
            });
        }));
    },
    // Admin endpoints
    mockAdmin: ()=>{
        _jestsetup.server.use(_msw.http.get("/api/v1/admin/dashboard/stats", ()=>{
            return _msw.HttpResponse.json({
                total_users: 150,
                active_organisations: 45,
                system_health: "good"
            });
        }));
    },
    // Rate limiting endpoints
    mockRateLimiting: (blocked = false)=>{
        _jestsetup.server.use(_msw.http.get("/api/v1/admin/rate-limits/status", ()=>{
            return _msw.HttpResponse.json({
                remaining: blocked ? 0 : 50,
                reset_time: Date.now() + 60000,
                blocked
            });
        }));
    }
};
const testAccessibility = async (container)=>{
    const results = await (0, _jestaxe.axe)(container);
    expect(results).toHaveNoViolations();
};
const measureRenderTime = async (renderFn)=>{
    const start = performance.now();
    await renderFn();
    const end = performance.now();
    return end - start;
};
const waitForLoadingToFinish = async (container)=>{
    const { waitForElementToBeRemoved } = await Promise.resolve().then(()=>/*#__PURE__*/ _interop_require_wildcard(require("@testing-library/react")));
    // Wait for loading spinners to disappear
    try {
        await waitForElementToBeRemoved(()=>container.querySelector('[data-testid="loading"]') || container.querySelector(".loading") || container.querySelector('[role="progressbar"]'), {
            timeout: 5000
        });
    } catch (error) {
    // Loading elements might not exist, which is fine
    }
};
const withNetworkDelay = (fn, delay = 100)=>{
    return (...args)=>{
        return new Promise((resolve)=>{
            setTimeout(()=>{
                resolve(fn(...args));
            }, delay);
        });
    };
};
const generateTestData = {
    competitors: (count = 5)=>Array.from({
            length: count
        }, (_, i)=>({
                id: `competitor-${i + 1}`,
                name: `Competitor ${i + 1}`,
                market_share: Math.random() * 50,
                pricing_tier: [
                    "budget",
                    "mid-range",
                    "premium"
                ][Math.floor(Math.random() * 3)]
            })),
    users: (count = 10)=>Array.from({
            length: count
        }, (_, i)=>createTestUser({
                id: `user-${i + 1}`,
                email: `user${i + 1}@test.com`,
                name: `Test User ${i + 1}`
            })),
    organisations: (count = 5)=>Array.from({
            length: count
        }, (_, i)=>createTestOrganisation("general", {
                id: `org-${i + 1}`,
                name: `Organisation ${i + 1}`
            }))
};
const industryTestScenarios = {
    cinema: {
        highTrafficRateLimiting: ()=>mockApiEndpoints.mockRateLimiting(false),
        ticketingSystem: ()=>{
            _jestsetup.server.use(_msw.http.get("/api/v1/cinema/showtimes", ()=>{
                return _msw.HttpResponse.json([
                    {
                        id: "1",
                        movie: "Test Movie",
                        time: "19:00",
                        available_seats: 150
                    }
                ]);
            }));
        }
    },
    hotel: {
        realTimePricing: ()=>{
            _jestsetup.server.use(_msw.http.get("/api/v1/hotel/pricing", ()=>{
                return _msw.HttpResponse.json({
                    base_rate: 120,
                    dynamic_rate: 145,
                    occupancy: 0.75
                });
            }));
        }
    },
    gym: {
        membershipTracking: ()=>{
            _jestsetup.server.use(_msw.http.get("/api/v1/gym/members", ()=>{
                return _msw.HttpResponse.json([
                    {
                        id: "1",
                        name: "John Doe",
                        membership_type: "premium",
                        check_ins: 15
                    }
                ]);
            }));
        }
    }
};

//# sourceMappingURL=data:application/json;base64,