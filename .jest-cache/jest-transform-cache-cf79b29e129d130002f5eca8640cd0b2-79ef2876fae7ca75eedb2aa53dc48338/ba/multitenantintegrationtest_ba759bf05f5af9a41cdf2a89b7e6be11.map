{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/__tests__/integration/multi-tenant-integration.test.tsx"],"sourcesContent":["/**\n * Multi-Tenant Integration Tests\n * \n * Comprehensive tests demonstrating multi-tenant behavior across:\n * - Different industries (hotel, cinema, gym)\n * - Various subscription plans (basic, professional, enterprise)\n * - Rate limiting scenarios\n * - Feature flag variations\n * - Cross-tenant isolation\n */\n\nimport React from 'react'\nimport { renderWithProviders, screen, waitFor, act } from '@/test-utils'\nimport userEvent from '@testing-library/user-event'\nimport { server } from '@/test-utils/mocks/server'\nimport { \n  TENANT_SCENARIOS,\n  createTenantHandlers,\n  RateLimitTestHelper,\n  TenantIsolationTestHelper,\n  FeatureFlagTestHelper,\n  IndustryTestDataGenerator\n} from '@/test-utils/multi-tenant-test-helpers'\nimport { MarketEdgeDashboard } from '@/components/market-edge/MarketEdgeDashboard'\nimport { AdminPanel } from '@/components/admin/AdminPanel'\n\n// Mock components for testing\nconst MockMarketEdgeDashboard: React.FC = () => {\n  const [data, setData] = React.useState<any>(null)\n  const [loading, setLoading] = React.useState(true)\n  const [error, setError] = React.useState<string | null>(null)\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('/api/v1/market-edge/competitors')\n        if (!response.ok) {\n          throw new Error(`HTTP ${response.status}`)\n        }\n        const result = await response.json()\n        setData(result)\n      } catch (err) {\n        setError(err instanceof Error ? err.message : 'Unknown error')\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchData()\n  }, [])\n\n  if (loading) return <div>Loading market data...</div>\n  if (error) return <div>Error: {error}</div>\n\n  return (\n    <div data-testid=\"market-edge-dashboard\">\n      <h1>Market Edge Dashboard</h1>\n      <div data-testid=\"competitors-count\">\n        Competitors: {data?.competitors?.length || 0}\n      </div>\n      {data?.competitors?.map((comp: any) => (\n        <div key={comp.id} data-testid={`competitor-${comp.id}`}>\n          {comp.name} ({comp.business_type})\n        </div>\n      ))}\n    </div>\n  )\n}\n\nconst MockRateLimitComponent: React.FC = () => {\n  const [requests, setRequests] = React.useState<any[]>([])\n  const [isRateLimited, setIsRateLimited] = React.useState(false)\n\n  const makeRequest = async () => {\n    try {\n      const response = await fetch('/api/v1/test-rate-limit')\n      const result = await response.json()\n      \n      if (response.status === 429) {\n        setIsRateLimited(true)\n        setRequests(prev => [...prev, { error: true, ...result }])\n      } else {\n        setRequests(prev => [...prev, result])\n      }\n    } catch (error) {\n      setRequests(prev => [...prev, { error: true, message: 'Network error' }])\n    }\n  }\n\n  return (\n    <div data-testid=\"rate-limit-component\">\n      <button onClick={makeRequest} data-testid=\"make-request-btn\">\n        Make API Request\n      </button>\n      <div data-testid=\"request-count\">\n        Total Requests: {requests.length}\n      </div>\n      {isRateLimited && (\n        <div data-testid=\"rate-limited-message\">\n          Rate limit exceeded!\n        </div>\n      )}\n      {requests.map((req, idx) => (\n        <div key={idx} data-testid={`request-${idx}`}>\n          {req.error ? 'ERROR' : `Success #${req.request_number}`}\n        </div>\n      ))}\n    </div>\n  )\n}\n\ndescribe('Multi-Tenant Integration Tests', () => {\n  const user = userEvent.setup()\n\n  afterEach(() => {\n    server.resetHandlers()\n  })\n\n  describe('Industry-Specific Behavior', () => {\n    it('should display hotel-specific features for hotel tenants', async () => {\n      const hotelScenario = TENANT_SCENARIOS.hotel_professional\n      server.use(...createTenantHandlers(hotelScenario))\n\n      renderWithProviders(<MockMarketEdgeDashboard />, {\n        tenantConfig: {\n          user: hotelScenario.user,\n          industry: 'hotel'\n        }\n      })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('market-edge-dashboard')).toBeInTheDocument()\n      })\n\n      expect(screen.getByText('Market Edge Dashboard')).toBeInTheDocument()\n      expect(screen.getByTestId('competitors-count')).toHaveTextContent('Competitors: 1')\n      \n      // Check for hotel-specific competitor\n      await waitFor(() => {\n        expect(screen.getByTestId('competitor-comp-1')).toHaveTextContent('hotel Competitor 1 (hotel)')\n      })\n    })\n\n    it('should display cinema-specific features for cinema tenants', async () => {\n      const cinemaScenario = TENANT_SCENARIOS.cinema_professional\n      server.use(...createTenantHandlers(cinemaScenario))\n\n      renderWithProviders(<MockMarketEdgeDashboard />, {\n        tenantConfig: {\n          user: cinemaScenario.user,\n          industry: 'cinema'\n        }\n      })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('market-edge-dashboard')).toBeInTheDocument()\n      })\n\n      // Check for cinema-specific competitor\n      await waitFor(() => {\n        expect(screen.getByTestId('competitor-comp-1')).toHaveTextContent('cinema Competitor 1 (cinema)')\n      })\n    })\n\n    it('should display gym-specific features for gym tenants', async () => {\n      const gymScenario = TENANT_SCENARIOS.gym_professional\n      server.use(...createTenantHandlers(gymScenario))\n\n      renderWithProviders(<MockMarketEdgeDashboard />, {\n        tenantConfig: {\n          user: gymScenario.user,\n          industry: 'gym'\n        }\n      })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('market-edge-dashboard')).toBeInTheDocument()\n      })\n\n      // Check for gym-specific competitor\n      await waitFor(() => {\n        expect(screen.getByTestId('competitor-comp-1')).toHaveTextContent('gym Competitor 1 (gym)')\n      })\n    })\n  })\n\n  describe('Subscription Plan Behavior', () => {\n    it('should enforce basic plan limitations', async () => {\n      const basicScenario = TENANT_SCENARIOS.hotel_basic\n      server.use(...createTenantHandlers(basicScenario))\n\n      renderWithProviders(<MockMarketEdgeDashboard />, {\n        tenantConfig: {\n          user: basicScenario.user\n        }\n      })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('market-edge-dashboard')).toBeInTheDocument()\n      })\n\n      // Basic plan should have limited features\n      expect(screen.queryByTestId('advanced-analytics')).not.toBeInTheDocument()\n      expect(screen.queryByTestId('predictive-features')).not.toBeInTheDocument()\n    })\n\n    it('should enable professional plan features', async () => {\n      const proScenario = TENANT_SCENARIOS.hotel_professional\n      server.use(...createTenantHandlers(proScenario))\n\n      renderWithProviders(<MockMarketEdgeDashboard />, {\n        tenantConfig: {\n          user: proScenario.user\n        }\n      })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('market-edge-dashboard')).toBeInTheDocument()\n      })\n\n      // Professional plan should have more features than basic\n      expect(screen.getByTestId('competitors-count')).toBeInTheDocument()\n    })\n\n    it('should enable all enterprise plan features', async () => {\n      const enterpriseScenario = TENANT_SCENARIOS.hotel_enterprise\n      server.use(...createTenantHandlers(enterpriseScenario))\n\n      renderWithProviders(<MockMarketEdgeDashboard />, {\n        tenantConfig: {\n          user: enterpriseScenario.user\n        }\n      })\n\n      await waitFor(() => {\n        expect(screen.getByTestId('market-edge-dashboard')).toBeInTheDocument()\n      })\n\n      // Enterprise should have access to all features\n      expect(screen.getByTestId('competitors-count')).toBeInTheDocument()\n    })\n  })\n\n  describe('Rate Limiting Behavior', () => {\n    it('should enforce rate limits for basic plan users', async () => {\n      const basicScenario = TENANT_SCENARIOS.hotel_basic\n      const rateLimitHelper = new RateLimitTestHelper(basicScenario)\n      \n      server.use(...rateLimitHelper.createRateLimitHandlers())\n\n      renderWithProviders(<MockRateLimitComponent />, {\n        tenantConfig: {\n          user: basicScenario.user\n        }\n      })\n\n      const makeRequestBtn = screen.getByTestId('make-request-btn')\n\n      // Make requests up to the limit (30 for basic plan)\n      for (let i = 0; i < 30; i++) {\n        await user.click(makeRequestBtn)\n        await waitFor(() => {\n          expect(screen.getByTestId(`request-${i}`)).toHaveTextContent(`Success #${i + 1}`)\n        })\n      }\n\n      // Next request should be rate limited\n      await user.click(makeRequestBtn)\n      await waitFor(() => {\n        expect(screen.getByTestId('rate-limited-message')).toHaveTextContent('Rate limit exceeded!')\n      })\n    })\n\n    it('should allow more requests for professional plan users', async () => {\n      const proScenario = TENANT_SCENARIOS.hotel_professional\n      const rateLimitHelper = new RateLimitTestHelper(proScenario)\n      \n      server.use(...rateLimitHelper.createRateLimitHandlers())\n\n      renderWithProviders(<MockRateLimitComponent />, {\n        tenantConfig: {\n          user: proScenario.user\n        }\n      })\n\n      const makeRequestBtn = screen.getByTestId('make-request-btn')\n\n      // Professional plan should allow more requests (100)\n      // Test first 50 requests\n      for (let i = 0; i < 50; i++) {\n        await user.click(makeRequestBtn)\n        await waitFor(() => {\n          expect(screen.getByTestId(`request-${i}`)).toHaveTextContent(`Success #${i + 1}`)\n        })\n      }\n\n      expect(screen.queryByTestId('rate-limited-message')).not.toBeInTheDocument()\n    })\n  })\n\n  describe('Feature Flag Variations', () => {\n    it('should show different features based on feature flags', async () => {\n      const flagConfigs = {\n        'test-tenant-1': {\n          advanced_features: true,\n          beta_features: true\n        },\n        'test-tenant-2': {\n          advanced_features: false,\n          beta_features: false\n        }\n      }\n\n      server.use(...FeatureFlagTestHelper.createFeatureFlagHandlers(flagConfigs))\n\n      const MockFeatureFlagComponent: React.FC = () => {\n        const [features, setFeatures] = React.useState<any>(null)\n\n        React.useEffect(() => {\n          fetch('/api/v1/conditional-feature', {\n            headers: { 'X-Tenant-ID': 'test-tenant-1' }\n          })\n            .then(res => res.json())\n            .then(setFeatures)\n        }, [])\n\n        if (!features) return <div>Loading features...</div>\n\n        return (\n          <div data-testid=\"feature-flag-component\">\n            <div data-testid=\"feature-level\">\n              Level: {features.feature_level}\n            </div>\n            {features.additional_data && (\n              <div data-testid=\"advanced-data\">\n                {features.additional_data}\n              </div>\n            )}\n          </div>\n        )\n      }\n\n      renderWithProviders(<MockFeatureFlagComponent />)\n\n      await waitFor(() => {\n        expect(screen.getByTestId('feature-level')).toHaveTextContent('Level: advanced')\n        expect(screen.getByTestId('advanced-data')).toHaveTextContent('Only available with advanced features flag')\n      })\n    })\n  })\n\n  describe('Cross-Tenant Isolation', () => {\n    it('should prevent access to other tenant data', async () => {\n      const allowedTenantId = 'tenant-a'\n      server.use(...TenantIsolationTestHelper.createIsolationHandlers(allowedTenantId))\n\n      const MockIsolationComponent: React.FC<{ tenantId: string }> = ({ tenantId }) => {\n        const [data, setData] = React.useState<any>(null)\n        const [error, setError] = React.useState<string | null>(null)\n\n        React.useEffect(() => {\n          fetch('/api/v1/market-edge/competitors', {\n            headers: { 'X-Tenant-ID': tenantId }\n          })\n            .then(res => {\n              if (!res.ok) {\n                throw new Error(`HTTP ${res.status}`)\n              }\n              return res.json()\n            })\n            .then(setData)\n            .catch(err => setError(err.message))\n        }, [tenantId])\n\n        if (error) {\n          return <div data-testid=\"error-message\">Error: {error}</div>\n        }\n\n        if (!data) {\n          return <div>Loading...</div>\n        }\n\n        return (\n          <div data-testid=\"isolation-component\">\n            <div data-testid=\"competitor-data\">\n              Competitors: {data.competitors?.length || 0}\n            </div>\n          </div>\n        )\n      }\n\n      // Test allowed tenant\n      const { rerender } = renderWithProviders(<MockIsolationComponent tenantId=\"tenant-a\" />)\n\n      await waitFor(() => {\n        expect(screen.getByTestId('competitor-data')).toHaveTextContent('Competitors: 1')\n      })\n\n      // Test blocked tenant\n      rerender(<MockIsolationComponent tenantId=\"tenant-b\" />)\n\n      await waitFor(() => {\n        expect(screen.getByTestId('error-message')).toHaveTextContent('Error: HTTP 403')\n      })\n    })\n\n    it('should maintain data separation between tenants', async () => {\n      server.use(...TenantIsolationTestHelper.createCrossTenantAccessTest('tenant-a', 'tenant-b'))\n\n      const MockCrossTenantComponent: React.FC<{ tenantId: string }> = ({ tenantId }) => {\n        const [data, setData] = React.useState<any>(null)\n\n        React.useEffect(() => {\n          fetch('/api/v1/cross-tenant-test', {\n            headers: { 'X-Tenant-ID': tenantId }\n          })\n            .then(res => res.json())\n            .then(setData)\n        }, [tenantId])\n\n        if (!data) return <div>Loading...</div>\n\n        return (\n          <div data-testid=\"cross-tenant-component\">\n            <div data-testid=\"accessible-data\">\n              Data: {data.accessible_data}\n            </div>\n            <div data-testid=\"tenant-id\">\n              Tenant: {data.requesting_tenant}\n            </div>\n          </div>\n        )\n      }\n\n      // Test tenant A\n      const { rerender } = renderWithProviders(<MockCrossTenantComponent tenantId=\"tenant-a\" />)\n\n      await waitFor(() => {\n        expect(screen.getByTestId('accessible-data')).toHaveTextContent('Data: Data for A')\n        expect(screen.getByTestId('tenant-id')).toHaveTextContent('Tenant: tenant-a')\n      })\n\n      // Test tenant B\n      rerender(<MockCrossTenantComponent tenantId=\"tenant-b\" />)\n\n      await waitFor(() => {\n        expect(screen.getByTestId('accessible-data')).toHaveTextContent('Data: Data for B')\n        expect(screen.getByTestId('tenant-id')).toHaveTextContent('Tenant: tenant-b')\n      })\n    })\n  })\n\n  describe('Error Handling and Edge Cases', () => {\n    it('should handle API errors gracefully', async () => {\n      server.use(\n        // Mock an API endpoint that returns an error\n        server.use(...[{\n          method: 'GET',\n          path: '/api/v1/market-edge/competitors',\n          handler: () => new Response(null, { status: 500 })\n        }] as any)\n      )\n\n      renderWithProviders(<MockMarketEdgeDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText('Error: HTTP 500')).toBeInTheDocument()\n      })\n    })\n\n    it('should handle network failures', async () => {\n      server.use(\n        // Mock network failure\n        server.use(...[{\n          method: 'GET',\n          path: '/api/v1/market-edge/competitors',\n          handler: () => Promise.reject(new Error('Network Error'))\n        }] as any)\n      )\n\n      renderWithProviders(<MockMarketEdgeDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText(/Error:/)).toBeInTheDocument()\n      })\n    })\n\n    it('should handle malformed responses', async () => {\n      server.use(\n        // Mock malformed response\n        server.use(...[{\n          method: 'GET', \n          path: '/api/v1/market-edge/competitors',\n          handler: () => new Response('invalid json', {\n            headers: { 'Content-Type': 'application/json' }\n          })\n        }] as any)\n      )\n\n      renderWithProviders(<MockMarketEdgeDashboard />)\n\n      await waitFor(() => {\n        expect(screen.getByText(/Error:/)).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Performance Testing', () => {\n    it('should handle loading states correctly', async () => {\n      let resolveRequest: (value: any) => void\n      const requestPromise = new Promise(resolve => {\n        resolveRequest = resolve\n      })\n\n      server.use(\n        // Mock delayed response\n        server.use(...[{\n          method: 'GET',\n          path: '/api/v1/market-edge/competitors',\n          handler: async () => {\n            await requestPromise\n            return new Response(JSON.stringify({ competitors: [] }))\n          }\n        }] as any)\n      )\n\n      renderWithProviders(<MockMarketEdgeDashboard />)\n\n      // Should show loading state initially\n      expect(screen.getByText('Loading market data...')).toBeInTheDocument()\n\n      // Resolve the request\n      act(() => {\n        resolveRequest!({ competitors: [] })\n      })\n\n      // Should show content after loading\n      await waitFor(() => {\n        expect(screen.queryByText('Loading market data...')).not.toBeInTheDocument()\n        expect(screen.getByTestId('market-edge-dashboard')).toBeInTheDocument()\n      })\n    })\n  })\n})"],"names":["MockMarketEdgeDashboard","data","setData","React","useState","loading","setLoading","error","setError","useEffect","fetchData","response","fetch","ok","Error","status","result","json","err","message","div","data-testid","h1","competitors","length","map","comp","id","name","business_type","MockRateLimitComponent","requests","setRequests","isRateLimited","setIsRateLimited","makeRequest","prev","button","onClick","req","idx","request_number","describe","user","userEvent","setup","afterEach","server","resetHandlers","it","hotelScenario","TENANT_SCENARIOS","hotel_professional","use","createTenantHandlers","renderWithProviders","tenantConfig","industry","waitFor","expect","screen","getByTestId","toBeInTheDocument","getByText","toHaveTextContent","cinemaScenario","cinema_professional","gymScenario","gym_professional","basicScenario","hotel_basic","queryByTestId","not","proScenario","enterpriseScenario","hotel_enterprise","rateLimitHelper","RateLimitTestHelper","createRateLimitHandlers","makeRequestBtn","i","click","flagConfigs","advanced_features","beta_features","FeatureFlagTestHelper","createFeatureFlagHandlers","MockFeatureFlagComponent","features","setFeatures","headers","then","res","feature_level","additional_data","allowedTenantId","TenantIsolationTestHelper","createIsolationHandlers","MockIsolationComponent","tenantId","catch","rerender","createCrossTenantAccessTest","MockCrossTenantComponent","accessible_data","requesting_tenant","method","path","handler","Response","Promise","reject","resolveRequest","requestPromise","resolve","JSON","stringify","act","queryByText"],"mappings":"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"}