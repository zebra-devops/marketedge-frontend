{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/components/admin/__tests__/RateLimitManager.test.tsx"],"sourcesContent":["/**\n * Comprehensive tests for RateLimitManager component\n * \n * Demonstrates multi-tenant testing patterns, accessibility compliance,\n * API integration testing, and role-based testing scenarios.\n */\n\nimport React from 'react'\nimport { screen, waitFor, within } from '@testing-library/react'\nimport userEvent from '@testing-library/user-event'\nimport { rest } from 'msw'\nimport { axe, toHaveNoViolations } from 'jest-axe'\n\nimport { RateLimitManager } from '../RateLimitManager'\nimport { \n  renderWithProviders, \n  renderWithRole,\n  createMockOrganization,\n  mockHandlerUtils,\n  server\n} from '@/__tests__/utils/test-utils'\n\n// Extend Jest matchers for accessibility testing\nexpect.extend(toHaveNoViolations)\n\ndescribe('RateLimitManager', () => {\n  beforeEach(() => {\n    // Reset mocks before each test\n    mockHandlerUtils.resetMocks()\n    \n    // Setup default organizations for testing\n    mockHandlerUtils.setMockOrganization('org-1', createMockOrganization({\n      id: 'org-1',\n      name: 'Hotel Chain A',\n      industry: 'hotel',\n      subscription_plan: 'professional',\n      rate_limit_per_hour: 5000,\n      burst_limit: 250,\n      rate_limit_enabled: true\n    }))\n    \n    mockHandlerUtils.setMockOrganization('org-2', createMockOrganization({\n      id: 'org-2',\n      name: 'Cinema Group B',\n      industry: 'cinema',\n      subscription_plan: 'basic',\n      rate_limit_per_hour: 1000,\n      burst_limit: 100,\n      rate_limit_enabled: true\n    }))\n\n    mockHandlerUtils.setMockOrganization('org-3', createMockOrganization({\n      id: 'org-3',\n      name: 'Enterprise Corp',\n      industry: 'b2b_service',\n      subscription_plan: 'enterprise',\n      rate_limit_per_hour: 10000,\n      burst_limit: 500,\n      rate_limit_enabled: false\n    }))\n  })\n\n  describe('Rendering and Basic Functionality', () => {\n    it('renders loading state initially', () => {\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      expect(screen.getByTestId('loading-spinner')).toBeInTheDocument()\n      expect(screen.getByLabelText('Loading rate limits')).toBeInTheDocument()\n    })\n\n    it('renders rate limits for all tenants when loaded', async () => {\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      // Wait for loading to complete\n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Check that all organizations are displayed\n      expect(screen.getByText('Hotel Chain A')).toBeInTheDocument()\n      expect(screen.getByText('Cinema Group B')).toBeInTheDocument()\n      expect(screen.getByText('Enterprise Corp')).toBeInTheDocument()\n      \n      // Check tier badges\n      expect(screen.getByText('premium')).toBeInTheDocument()\n      expect(screen.getByText('standard')).toBeInTheDocument()\n      expect(screen.getByText('enterprise')).toBeInTheDocument()\n    })\n\n    it('renders single tenant view when tenantId provided', async () => {\n      renderWithRole(<RateLimitManager tenantId=\"org-1\" />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Should show only the specified tenant\n      expect(screen.getByText('Hotel Chain A')).toBeInTheDocument()\n      expect(screen.queryByText('Cinema Group B')).not.toBeInTheDocument()\n      expect(screen.queryByText('Enterprise Corp')).not.toBeInTheDocument()\n      \n      // Should show single tenant indicator\n      expect(screen.getByText('(Single Tenant)')).toBeInTheDocument()\n    })\n\n    it('displays correct rate limit information', async () => {\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Check rate limit display for Hotel Chain A\n      const hotelSection = screen.getByText('Hotel Chain A').closest('li')\n      expect(within(hotelSection!).getByText('Limit: 5,000 req/hour')).toBeInTheDocument()\n      expect(within(hotelSection!).getByText('Burst: 250')).toBeInTheDocument()\n    })\n\n    it('displays disabled status for inactive rate limits', async () => {\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Enterprise Corp has rate limiting disabled\n      const enterpriseSection = screen.getByText('Enterprise Corp').closest('li')\n      expect(within(enterpriseSection!).getByText('Disabled')).toBeInTheDocument()\n    })\n  })\n\n  describe('Error Handling', () => {\n    it('displays error message when API fails', async () => {\n      // Mock API error\n      server.use(\n        rest.get('/api/v1/admin/rate-limits', (req, res, ctx) => {\n          return res(ctx.status(500), ctx.json({ error: 'Internal server error' }))\n        })\n      )\n\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.getByRole('alert')).toBeInTheDocument()\n        expect(screen.getByText(/Failed to fetch rate limits: 500/)).toBeInTheDocument()\n      })\n      \n      // Should have retry button\n      expect(screen.getByLabelText('Retry loading rate limits')).toBeInTheDocument()\n    })\n\n    it('retries loading when retry button clicked', async () => {\n      // First call fails, second succeeds\n      let callCount = 0\n      server.use(\n        rest.get('/api/v1/admin/rate-limits', (req, res, ctx) => {\n          callCount++\n          if (callCount === 1) {\n            return res(ctx.status(500), ctx.json({ error: 'Server error' }))\n          }\n          return res(ctx.status(200), ctx.json([]))\n        })\n      )\n\n      const user = userEvent.setup()\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      // Wait for error\n      await waitFor(() => {\n        expect(screen.getByRole('alert')).toBeInTheDocument()\n      })\n      \n      // Click retry\n      await user.click(screen.getByLabelText('Retry loading rate limits'))\n      \n      // Should show loading, then success\n      expect(screen.getByTestId('loading-spinner')).toBeInTheDocument()\n      \n      await waitFor(() => {\n        expect(screen.queryByRole('alert')).not.toBeInTheDocument()\n        expect(screen.getByText('No rate limits found')).toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Edit Functionality', () => {\n    it('opens edit modal when edit button clicked', async () => {\n      const user = userEvent.setup()\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Click edit button for Hotel Chain A\n      const editButton = screen.getByLabelText('Edit rate limit for Hotel Chain A')\n      await user.click(editButton)\n      \n      // Modal should open\n      expect(screen.getByRole('dialog')).toBeInTheDocument()\n      expect(screen.getByText('Edit Rate Limit: Hotel Chain A')).toBeInTheDocument()\n      \n      // Form fields should be pre-populated\n      expect(screen.getByDisplayValue('premium')).toBeInTheDocument()\n      expect(screen.getByDisplayValue('5000')).toBeInTheDocument()\n      expect(screen.getByDisplayValue('250')).toBeInTheDocument()\n    })\n\n    it('updates tier and adjusts limits automatically', async () => {\n      const user = userEvent.setup()\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Open edit modal\n      await user.click(screen.getByLabelText('Edit rate limit for Cinema Group B'))\n      \n      // Change tier from standard to enterprise\n      const tierSelect = screen.getByDisplayValue('standard')\n      await user.selectOptions(tierSelect, 'enterprise')\n      \n      // Limits should update automatically\n      expect(screen.getByDisplayValue('10000')).toBeInTheDocument()\n      expect(screen.getByDisplayValue('500')).toBeInTheDocument()\n    })\n\n    it('submits update request when form is valid', async () => {\n      let updateCalled = false\n      server.use(\n        rest.put('/api/v1/admin/rate-limits/org-1', (req, res, ctx) => {\n          updateCalled = true\n          return res(ctx.status(200), ctx.json({\n            id: 'rate-limit-org-1',\n            tenant_id: 'org-1',\n            tenant_name: 'Hotel Chain A',\n            tier: 'enterprise',\n            requests_per_hour: 10000,\n            burst_size: 500,\n            enabled: true,\n            emergency_bypass: false,\n            created_at: '2025-01-08T10:00:00Z',\n            updated_at: new Date().toISOString()\n          }))\n        })\n      )\n\n      const user = userEvent.setup()\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Open edit modal and change tier\n      await user.click(screen.getByLabelText('Edit rate limit for Hotel Chain A'))\n      await user.selectOptions(screen.getByDisplayValue('premium'), 'enterprise')\n      \n      // Submit form\n      await user.click(screen.getByText('Update'))\n      \n      // Should close modal and update data\n      await waitFor(() => {\n        expect(screen.queryByRole('dialog')).not.toBeInTheDocument()\n      })\n      \n      expect(updateCalled).toBe(true)\n    })\n\n    it('prevents submission with invalid values', async () => {\n      const user = userEvent.setup()\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Open edit modal\n      await user.click(screen.getByLabelText('Edit rate limit for Hotel Chain A'))\n      \n      // Clear requests per hour field\n      const requestsField = screen.getByDisplayValue('5000')\n      await user.clear(requestsField)\n      await user.type(requestsField, '0')\n      \n      // Update button should be disabled\n      expect(screen.getByText('Update')).toBeDisabled()\n    })\n\n    it('calls onUpdate callback when provided', async () => {\n      const onUpdate = jest.fn()\n      \n      server.use(\n        rest.put('/api/v1/admin/rate-limits/org-1', (req, res, ctx) => {\n          return res(ctx.status(200), ctx.json({\n            id: 'rate-limit-org-1',\n            tenant_id: 'org-1',\n            tenant_name: 'Hotel Chain A',\n            tier: 'enterprise',\n            requests_per_hour: 10000,\n            burst_size: 500\n          }))\n        })\n      )\n\n      const user = userEvent.setup()\n      renderWithRole(<RateLimitManager onUpdate={onUpdate} />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Edit and submit\n      await user.click(screen.getByLabelText('Edit rate limit for Hotel Chain A'))\n      await user.click(screen.getByText('Update'))\n      \n      await waitFor(() => {\n        expect(onUpdate).toHaveBeenCalledWith(expect.objectContaining({\n          tenant_id: 'org-1',\n          tier: 'enterprise'\n        }))\n      })\n    })\n  })\n\n  describe('Emergency Bypass Functionality', () => {\n    it('opens emergency bypass modal when emergency button clicked', async () => {\n      const user = userEvent.setup()\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Click emergency button for Hotel Chain A\n      await user.click(screen.getByLabelText('Enable emergency bypass for Hotel Chain A'))\n      \n      // Emergency modal should open\n      expect(screen.getByRole('dialog')).toBeInTheDocument()\n      expect(screen.getByText('Emergency Bypass: Hotel Chain A')).toBeInTheDocument()\n      expect(screen.getByText(/Warning.*remove all rate limiting/)).toBeInTheDocument()\n    })\n\n    it('requires reason text before allowing submission', async () => {\n      const user = userEvent.setup()\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Open emergency modal\n      await user.click(screen.getByLabelText('Enable emergency bypass for Hotel Chain A'))\n      \n      // Submit button should be disabled without reason\n      expect(screen.getByText('Enable Emergency Bypass')).toBeDisabled()\n      \n      // Add short reason (should still be disabled)\n      await user.type(screen.getByPlaceholderText('Explain why emergency bypass is needed...'), 'urgent')\n      expect(screen.getByText('Enable Emergency Bypass')).toBeDisabled()\n      \n      // Add sufficient reason\n      await user.clear(screen.getByPlaceholderText('Explain why emergency bypass is needed...'))\n      await user.type(screen.getByPlaceholderText('Explain why emergency bypass is needed...'), 'Emergency maintenance window requires bypassing rate limits for critical operations')\n      \n      expect(screen.getByText('Enable Emergency Bypass')).toBeEnabled()\n    })\n\n    it('shows remove bypass button for tenants with active bypass', async () => {\n      // Mock organization with active bypass\n      mockHandlerUtils.setMockOrganization('org-bypass', createMockOrganization({\n        id: 'org-bypass',\n        name: 'Bypassed Org',\n        rate_limit_enabled: true,\n        // This will be handled by the MSW handler to show emergency bypass\n      }))\n      \n      // Override the handler to show emergency bypass\n      server.use(\n        rest.get('/api/v1/admin/rate-limits', (req, res, ctx) => {\n          return res(ctx.status(200), ctx.json([{\n            id: 'rate-limit-org-bypass',\n            tenant_id: 'org-bypass',\n            tenant_name: 'Bypassed Org',\n            tier: 'standard',\n            requests_per_hour: 1000,\n            burst_size: 100,\n            enabled: true,\n            emergency_bypass: true,\n            bypass_reason: 'Critical system maintenance',\n            bypass_until: new Date(Date.now() + 3600000).toISOString()\n          }]))\n        })\n      )\n\n      renderWithRole(<RateLimitManager tenantId=\"org-bypass\" />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Should show emergency bypass badge and remove button\n      expect(screen.getByText('Emergency Bypass')).toBeInTheDocument()\n      expect(screen.getByText('Critical system maintenance')).toBeInTheDocument()\n      expect(screen.getByLabelText('Remove emergency bypass for Bypassed Org')).toBeInTheDocument()\n    })\n\n    it('removes emergency bypass when remove button clicked', async () => {\n      let removeCalled = false\n      \n      // Setup bypassed organization\n      server.use(\n        rest.get('/api/v1/admin/rate-limits', (req, res, ctx) => {\n          return res(ctx.status(200), ctx.json([{\n            id: 'rate-limit-org-1',\n            tenant_id: 'org-1',\n            tenant_name: 'Hotel Chain A',\n            tier: 'premium',\n            requests_per_hour: 5000,\n            burst_size: 250,\n            enabled: true,\n            emergency_bypass: true,\n            bypass_reason: 'Emergency maintenance'\n          }]))\n        }),\n        rest.delete('/api/v1/admin/rate-limits/org-1/emergency-bypass', (req, res, ctx) => {\n          removeCalled = true\n          return res(ctx.status(200), ctx.json({ message: 'Emergency bypass removed successfully' }))\n        })\n      )\n\n      const user = userEvent.setup()\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Click remove bypass button\n      await user.click(screen.getByLabelText('Remove emergency bypass for Hotel Chain A'))\n      \n      // Should call API\n      await waitFor(() => {\n        expect(removeCalled).toBe(true)\n      })\n    })\n  })\n\n  describe('Multi-tenant Testing Scenarios', () => {\n    it('handles different subscription tiers correctly', async () => {\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Check tier-specific styling\n      const premiumBadge = screen.getByText('premium')\n      expect(premiumBadge).toHaveClass('bg-blue-100', 'text-blue-800')\n      \n      const standardBadge = screen.getByText('standard')\n      expect(standardBadge).toHaveClass('bg-gray-100', 'text-gray-800')\n      \n      const enterpriseBadge = screen.getByText('enterprise')\n      expect(enterpriseBadge).toHaveClass('bg-purple-100', 'text-purple-800')\n    })\n\n    it('shows industry-appropriate default settings in edit form', async () => {\n      const user = userEvent.setup()\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Edit enterprise organization\n      await user.click(screen.getByLabelText('Edit rate limit for Enterprise Corp'))\n      \n      // Should show enterprise tier settings\n      expect(screen.getByDisplayValue('enterprise')).toBeInTheDocument()\n      expect(screen.getByDisplayValue('10000')).toBeInTheDocument()\n      expect(screen.getByDisplayValue('500')).toBeInTheDocument()\n    })\n\n    it('filters by tenant when tenantId prop provided', async () => {\n      const { rerender } = renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Should show all tenants initially\n      expect(screen.getAllByText(/Chain|Group|Corp/)).toHaveLength(3)\n      \n      // Re-render with specific tenant\n      rerender(<RateLimitManager tenantId=\"org-2\" />)\n      \n      // Should only show Cinema Group B\n      await waitFor(() => {\n        expect(screen.getByText('Cinema Group B')).toBeInTheDocument()\n        expect(screen.queryByText('Hotel Chain A')).not.toBeInTheDocument()\n        expect(screen.queryByText('Enterprise Corp')).not.toBeInTheDocument()\n      })\n    })\n  })\n\n  describe('Accessibility Compliance', () => {\n    it('has no accessibility violations', async () => {\n      const { container } = renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      const results = await axe(container)\n      expect(results).toHaveNoViolations()\n    })\n\n    it('provides proper ARIA labels for interactive elements', async () => {\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Check ARIA labels on buttons\n      expect(screen.getByLabelText('Refresh rate limits')).toBeInTheDocument()\n      expect(screen.getByLabelText('Edit rate limit for Hotel Chain A')).toBeInTheDocument()\n      expect(screen.getByLabelText('Enable emergency bypass for Hotel Chain A')).toBeInTheDocument()\n    })\n\n    it('announces errors with proper ARIA live region', async () => {\n      server.use(\n        rest.get('/api/v1/admin/rate-limits', (req, res, ctx) => {\n          return res(ctx.status(500), ctx.json({ error: 'Server error' }))\n        })\n      )\n\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        const alert = screen.getByRole('alert')\n        expect(alert).toBeInTheDocument()\n        expect(alert).toHaveAttribute('aria-live', 'assertive')\n      })\n    })\n\n    it('provides proper modal accessibility', async () => {\n      const user = userEvent.setup()\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Open edit modal\n      await user.click(screen.getByLabelText('Edit rate limit for Hotel Chain A'))\n      \n      const dialog = screen.getByRole('dialog')\n      expect(dialog).toHaveAttribute('aria-modal', 'true')\n      expect(dialog).toHaveAttribute('aria-labelledby', 'edit-modal-title')\n      \n      // Check form accessibility\n      expect(screen.getByLabelText('Tier')).toBeInTheDocument()\n      expect(screen.getByLabelText('Requests per Hour')).toBeInTheDocument()\n      expect(screen.getByLabelText('Burst Size')).toBeInTheDocument()\n      \n      // Check help text associations\n      expect(screen.getByText('Tier determines default rate limits')).toHaveAttribute('id', 'tier-help')\n    })\n\n    it('supports keyboard navigation', async () => {\n      const user = userEvent.setup()\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Tab to first edit button\n      await user.tab()\n      await user.tab()\n      expect(screen.getByLabelText('Edit rate limit for Hotel Chain A')).toHaveFocus()\n      \n      // Tab to emergency button\n      await user.tab()\n      expect(screen.getByLabelText('Enable emergency bypass for Hotel Chain A')).toHaveFocus()\n    })\n  })\n\n  describe('Role-based Access Control', () => {\n    it('renders for super admin users', async () => {\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      expect(screen.getByText('Rate Limit Management')).toBeInTheDocument()\n      expect(screen.getByText('Hotel Chain A')).toBeInTheDocument()\n    })\n\n    // Note: In a real application, you'd test that non-admin users\n    // either can't access this component or have limited functionality\n    it('could restrict functionality for non-admin users', () => {\n      // This would depend on your specific authorization implementation\n      // For example, you might not render edit buttons for non-admin users\n      expect(true).toBe(true) // Placeholder for actual role-based tests\n    })\n  })\n\n  describe('Performance and User Experience', () => {\n    it('refreshes data when refresh button clicked', async () => {\n      let callCount = 0\n      server.use(\n        rest.get('/api/v1/admin/rate-limits', (req, res, ctx) => {\n          callCount++\n          return res(ctx.status(200), ctx.json([]))\n        })\n      )\n\n      const user = userEvent.setup()\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Initial load should have been called\n      expect(callCount).toBe(1)\n      \n      // Click refresh\n      await user.click(screen.getByLabelText('Refresh rate limits'))\n      \n      // Should call API again\n      await waitFor(() => {\n        expect(callCount).toBe(2)\n      })\n    })\n\n    it('shows empty state when no rate limits exist', async () => {\n      server.use(\n        rest.get('/api/v1/admin/rate-limits', (req, res, ctx) => {\n          return res(ctx.status(200), ctx.json([]))\n        })\n      )\n\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.getByText('No rate limits found')).toBeInTheDocument()\n      })\n    })\n\n    it('handles concurrent modal operations correctly', async () => {\n      const user = userEvent.setup()\n      renderWithRole(<RateLimitManager />, 'super_admin')\n      \n      await waitFor(() => {\n        expect(screen.queryByTestId('loading-spinner')).not.toBeInTheDocument()\n      })\n      \n      // Open edit modal\n      await user.click(screen.getByLabelText('Edit rate limit for Hotel Chain A'))\n      expect(screen.getByText('Edit Rate Limit: Hotel Chain A')).toBeInTheDocument()\n      \n      // Cancel and open emergency modal\n      await user.click(screen.getByText('Cancel'))\n      await user.click(screen.getByLabelText('Enable emergency bypass for Hotel Chain A'))\n      \n      // Should show emergency modal, not edit modal\n      expect(screen.getByText('Emergency Bypass: Hotel Chain A')).toBeInTheDocument()\n      expect(screen.queryByText('Edit Rate Limit: Hotel Chain A')).not.toBeInTheDocument()\n    })\n  })\n})"],"names":["expect","extend","toHaveNoViolations","describe","beforeEach","mockHandlerUtils","resetMocks","setMockOrganization","createMockOrganization","id","name","industry","subscription_plan","rate_limit_per_hour","burst_limit","rate_limit_enabled","it","renderWithRole","RateLimitManager","screen","getByTestId","toBeInTheDocument","getByLabelText","waitFor","queryByTestId","not","getByText","tenantId","queryByText","hotelSection","closest","within","enterpriseSection","server","use","rest","get","req","res","ctx","status","json","error","getByRole","callCount","user","userEvent","setup","click","queryByRole","editButton","getByDisplayValue","tierSelect","selectOptions","updateCalled","put","tenant_id","tenant_name","tier","requests_per_hour","burst_size","enabled","emergency_bypass","created_at","updated_at","Date","toISOString","toBe","requestsField","clear","type","toBeDisabled","onUpdate","jest","fn","toHaveBeenCalledWith","objectContaining","getByPlaceholderText","toBeEnabled","bypass_reason","bypass_until","now","removeCalled","delete","message","premiumBadge","toHaveClass","standardBadge","enterpriseBadge","rerender","getAllByText","toHaveLength","container","results","axe","alert","toHaveAttribute","dialog","tab","toHaveFocus"],"mappings":"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"}