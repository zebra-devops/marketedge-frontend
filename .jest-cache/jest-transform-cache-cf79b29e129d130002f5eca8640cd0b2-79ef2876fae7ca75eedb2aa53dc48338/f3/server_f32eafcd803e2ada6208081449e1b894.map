{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/test-utils/mocks/server.ts"],"sourcesContent":["/**\n * Mock Service Worker (MSW) Server Setup\n * \n * Provides API mocking for testing multi-tenant scenarios.\n * Handles authentication, tenant-specific data, and rate limiting responses.\n */\n\nimport { setupServer } from 'msw/node'\nimport { rest } from 'msw'\nimport { generateMockApiResponse, mockDataGenerators } from '../index'\n\n// Base API URL for mocking\nconst API_BASE_URL = 'http://localhost:8000/api/v1'\n\n// Mock handlers for different API endpoints\nconst handlers = [\n  // Authentication endpoints\n  rest.post(`${API_BASE_URL}/auth/login`, (req, res, ctx) => {\n    const { email, password } = req.body as any\n    \n    if (email === 'test@example.com' && password === 'password123') {\n      return res(\n        ctx.status(200),\n        ctx.json({\n          access_token: 'mock-jwt-token',\n          token_type: 'bearer',\n          expires_in: 3600,\n          user: {\n            id: 'test-user-456',\n            email: 'test@example.com',\n            name: 'Test User',\n            role: 'user',\n            organization_id: 'test-tenant-123',\n            is_active: true,\n          },\n          organization: {\n            id: 'test-tenant-123',\n            name: 'Test Organization',\n            industry: 'b2b',\n            subscription: 'premium',\n            features: ['market-edge', 'analytics', 'reporting'],\n          },\n        })\n      )\n    }\n    \n    return res(\n      ctx.status(401),\n      ctx.json({ detail: 'Invalid credentials' })\n    )\n  }),\n\n  rest.post(`${API_BASE_URL}/auth/refresh`, (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        access_token: 'new-mock-jwt-token',\n        token_type: 'bearer',\n        expires_in: 3600,\n      })\n    )\n  }),\n\n  rest.post(`${API_BASE_URL}/auth/logout`, (req, res, ctx) => {\n    return res(ctx.status(200), ctx.json({ message: 'Logged out successfully' }))\n  }),\n\n  // User profile endpoints\n  rest.get(`${API_BASE_URL}/users/me`, (req, res, ctx) => {\n    const authHeader = req.headers.get('authorization')\n    \n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\n      return res(ctx.status(401), ctx.json({ detail: 'Not authenticated' }))\n    }\n    \n    return res(\n      ctx.status(200),\n      ctx.json({\n        id: 'test-user-456',\n        email: 'test@example.com',\n        name: 'Test User',\n        role: 'user',\n        organization_id: 'test-tenant-123',\n        permissions: ['read:data', 'write:data'],\n        is_active: true,\n        created_at: '2024-01-01T00:00:00Z',\n        updated_at: '2024-01-01T00:00:00Z',\n      })\n    )\n  }),\n\n  // Organization endpoints\n  rest.get(`${API_BASE_URL}/organizations/me`, (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        id: 'test-tenant-123',\n        name: 'Test Organization',\n        industry: 'b2b',\n        subscription: 'premium',\n        features: ['market-edge', 'analytics', 'reporting'],\n        limits: {\n          users: 100,\n          api_calls: 10000,\n          storage: 1000,\n        },\n        settings: {\n          timezone: 'UTC',\n          currency: 'USD',\n          date_format: 'YYYY-MM-DD',\n        },\n      })\n    )\n  }),\n\n  // Market Edge API endpoints\n  rest.get(`${API_BASE_URL}/market-edge/competitors`, (req, res, ctx) => {\n    const industry = req.url.searchParams.get('industry') || 'b2b'\n    \n    // Simulate different data based on industry\n    let mockData\n    switch (industry) {\n      case 'cinema':\n        mockData = generateMockApiResponse('cinema', 'venue', 3)\n        break\n      case 'hotel':\n        mockData = generateMockApiResponse('hotel', 'property', 3)\n        break\n      case 'gym':\n        mockData = generateMockApiResponse('gym', 'facility', 3)\n        break\n      case 'retail':\n        mockData = generateMockApiResponse('retail', 'store', 3)\n        break\n      default:\n        mockData = generateMockApiResponse('b2b', 'client', 3)\n    }\n\n    return res(\n      ctx.status(200),\n      ctx.json({\n        data: mockData,\n        meta: {\n          total: mockData.length,\n          page: 1,\n          per_page: 10,\n          industry,\n        },\n      })\n    )\n  }),\n\n  rest.get(`${API_BASE_URL}/market-edge/analytics`, (req, res, ctx) => {\n    const timeframe = req.url.searchParams.get('timeframe') || '7d'\n    \n    return res(\n      ctx.status(200),\n      ctx.json({\n        metrics: {\n          revenue: 125000,\n          growth: 12.5,\n          market_share: 15.2,\n          competitor_count: 8,\n        },\n        trends: {\n          daily_revenue: [\n            { date: '2024-01-08', value: 18000 },\n            { date: '2024-01-09', value: 19200 },\n            { date: '2024-01-10', value: 17800 },\n            { date: '2024-01-11', value: 20100 },\n            { date: '2024-01-12', value: 21500 },\n            { date: '2024-01-13', value: 19800 },\n            { date: '2024-01-14', value: 22000 },\n          ],\n        },\n        timeframe,\n      })\n    )\n  }),\n\n  // Feature flags endpoints\n  rest.get(`${API_BASE_URL}/features`, (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json({\n        flags: {\n          'market-edge': { enabled: true, rollout: 100 },\n          'advanced-analytics': { enabled: true, rollout: 75 },\n          'real-time-data': { enabled: false, rollout: 25 },\n          'mobile-app': { enabled: true, rollout: 100 },\n        },\n      })\n    )\n  }),\n\n  // Admin endpoints (require admin role)\n  rest.get(`${API_BASE_URL}/admin/users`, (req, res, ctx) => {\n    const authHeader = req.headers.get('authorization')\n    \n    // Simulate role-based access control\n    if (!authHeader || authHeader === 'Bearer non-admin-token') {\n      return res(ctx.status(403), ctx.json({ detail: 'Insufficient permissions' }))\n    }\n    \n    return res(\n      ctx.status(200),\n      ctx.json({\n        users: [\n          {\n            id: 'user-1',\n            email: 'admin@example.com',\n            name: 'Admin User',\n            role: 'admin',\n            is_active: true,\n          },\n          {\n            id: 'user-2',\n            email: 'manager@example.com',\n            name: 'Manager User',\n            role: 'manager',\n            is_active: true,\n          },\n          {\n            id: 'user-3',\n            email: 'user@example.com',\n            name: 'Regular User',\n            role: 'user',\n            is_active: true,\n          },\n        ],\n        meta: { total: 3, page: 1, per_page: 10 },\n      })\n    )\n  }),\n\n  // Rate limiting simulation\n  rest.get(`${API_BASE_URL}/test/rate-limit`, (req, res, ctx) => {\n    // Simulate rate limit headers\n    return res(\n      ctx.status(200),\n      ctx.set('X-RateLimit-Limit', '100'),\n      ctx.set('X-RateLimit-Remaining', '95'),\n      ctx.set('X-RateLimit-Reset', String(Date.now() + 3600000)),\n      ctx.json({ message: 'Rate limit test successful' })\n    )\n  }),\n\n  rest.get(`${API_BASE_URL}/test/rate-limit-exceeded`, (req, res, ctx) => {\n    return res(\n      ctx.status(429),\n      ctx.set('X-RateLimit-Limit', '100'),\n      ctx.set('X-RateLimit-Remaining', '0'),\n      ctx.set('X-RateLimit-Reset', String(Date.now() + 3600000)),\n      ctx.set('Retry-After', '60'),\n      ctx.json({\n        error: 'Rate limit exceeded',\n        message: 'Too many requests. Limit: 100 per window',\n        retry_after: 60,\n      })\n    )\n  }),\n\n  // Error simulation endpoints for testing error handling\n  rest.get(`${API_BASE_URL}/test/server-error`, (req, res, ctx) => {\n    return res(\n      ctx.status(500),\n      ctx.json({ detail: 'Internal server error' })\n    )\n  }),\n\n  rest.get(`${API_BASE_URL}/test/network-error`, (req, res, ctx) => {\n    return res.networkError('Network error simulated')\n  }),\n\n  rest.get(`${API_BASE_URL}/test/timeout`, (req, res, ctx) => {\n    // Simulate a slow response\n    return res(\n      ctx.delay(10000), // 10 second delay\n      ctx.status(200),\n      ctx.json({ message: 'Slow response' })\n    )\n  }),\n\n  // Fallback handler for unmatched requests\n  rest.get('*', (req, res, ctx) => {\n    console.warn(`Unhandled GET request to ${req.url.toString()}`)\n    return res(\n      ctx.status(404),\n      ctx.json({ detail: `Endpoint not found: ${req.url.pathname}` })\n    )\n  }),\n\n  rest.post('*', (req, res, ctx) => {\n    console.warn(`Unhandled POST request to ${req.url.toString()}`)\n    return res(\n      ctx.status(404),\n      ctx.json({ detail: `Endpoint not found: ${req.url.pathname}` })\n    )\n  }),\n]\n\n// Create and export the server\nexport const server = setupServer(...handlers)\n\n// Helper functions for test-specific mocking\nexport const mockApiEndpoint = {\n  // Mock successful responses\n  success: (endpoint: string, data: any, status = 200) => {\n    server.use(\n      rest.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx) => {\n        return res(ctx.status(status), ctx.json(data))\n      })\n    )\n  },\n\n  // Mock error responses\n  error: (endpoint: string, status = 500, message = 'Server error') => {\n    server.use(\n      rest.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx) => {\n        return res(ctx.status(status), ctx.json({ detail: message }))\n      })\n    )\n  },\n\n  // Mock rate limit responses\n  rateLimited: (endpoint: string) => {\n    server.use(\n      rest.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx) => {\n        return res(\n          ctx.status(429),\n          ctx.set('X-RateLimit-Limit', '100'),\n          ctx.set('X-RateLimit-Remaining', '0'),\n          ctx.set('Retry-After', '60'),\n          ctx.json({\n            error: 'Rate limit exceeded',\n            message: 'Too many requests',\n            retry_after: 60,\n          })\n        )\n      })\n    )\n  },\n\n  // Mock network errors\n  networkError: (endpoint: string) => {\n    server.use(\n      rest.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx) => {\n        return res.networkError('Network connection failed')\n      })\n    )\n  },\n\n  // Mock slow responses\n  slow: (endpoint: string, delay = 5000) => {\n    server.use(\n      rest.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx) => {\n        return res(\n          ctx.delay(delay),\n          ctx.status(200),\n          ctx.json({ message: 'Delayed response' })\n        )\n      })\n    )\n  },\n}\n\n// Industry-specific mock helpers\nexport const mockIndustryData = {\n  cinema: (endpoint: string) => {\n    server.use(\n      rest.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx) => {\n        return res(\n          ctx.status(200),\n          ctx.json({\n            venues: generateMockApiResponse('cinema', 'venue', 5),\n            movies: generateMockApiResponse('cinema', 'movie', 10),\n            bookings: generateMockApiResponse('cinema', 'booking', 20),\n          })\n        )\n      })\n    )\n  },\n\n  hotel: (endpoint: string) => {\n    server.use(\n      rest.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx) => {\n        return res(\n          ctx.status(200),\n          ctx.json({\n            properties: generateMockApiResponse('hotel', 'property', 3),\n            rooms: generateMockApiResponse('hotel', 'room', 50),\n            reservations: generateMockApiResponse('hotel', 'reservation', 30),\n          })\n        )\n      })\n    )\n  },\n\n  gym: (endpoint: string) => {\n    server.use(\n      rest.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx) => {\n        return res(\n          ctx.status(200),\n          ctx.json({\n            facilities: generateMockApiResponse('gym', 'facility', 2),\n            members: generateMockApiResponse('gym', 'member', 100),\n            checkins: generateMockApiResponse('gym', 'checkin', 200),\n          })\n        )\n      })\n    )\n  },\n\n  retail: (endpoint: string) => {\n    server.use(\n      rest.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx) => {\n        return res(\n          ctx.status(200),\n          ctx.json({\n            stores: generateMockApiResponse('retail', 'store', 5),\n            products: generateMockApiResponse('retail', 'product', 500),\n            sales: generateMockApiResponse('retail', 'sale', 1000),\n          })\n        )\n      })\n    )\n  },\n\n  b2b: (endpoint: string) => {\n    server.use(\n      rest.get(`${API_BASE_URL}${endpoint}`, (req, res, ctx) => {\n        return res(\n          ctx.status(200),\n          ctx.json({\n            clients: generateMockApiResponse('b2b', 'client', 25),\n            projects: generateMockApiResponse('b2b', 'project', 50),\n            reports: generateMockApiResponse('b2b', 'report', 100),\n          })\n        )\n      })\n    )\n  },\n}"],"names":["mockApiEndpoint","mockIndustryData","server","API_BASE_URL","handlers","rest","post","req","res","ctx","email","password","body","status","json","access_token","token_type","expires_in","user","id","name","role","organization_id","is_active","organization","industry","subscription","features","detail","message","get","authHeader","headers","startsWith","permissions","created_at","updated_at","limits","users","api_calls","storage","settings","timezone","currency","date_format","url","searchParams","mockData","generateMockApiResponse","data","meta","total","length","page","per_page","timeframe","metrics","revenue","growth","market_share","competitor_count","trends","daily_revenue","date","value","flags","enabled","rollout","set","String","Date","now","error","retry_after","networkError","delay","console","warn","toString","pathname","setupServer","success","endpoint","use","rateLimited","slow","cinema","venues","movies","bookings","hotel","properties","rooms","reservations","gym","facilities","members","checkins","retail","stores","products","sales","b2b","clients","projects","reports"],"mappings":"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"}