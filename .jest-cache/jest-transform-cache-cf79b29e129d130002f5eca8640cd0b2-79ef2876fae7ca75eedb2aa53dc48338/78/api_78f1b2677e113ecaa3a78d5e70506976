8cb310ed15d119c84ab3335ec533866b
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "apiService", {
    enumerable: true,
    get: function() {
        return apiService;
    }
});
const _axios = /*#__PURE__*/ _interop_require_default(require("axios"));
const _jscookie = /*#__PURE__*/ _interop_require_default(require("js-cookie"));
function _interop_require_default(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
class ApiService {
    constructor(){
        this.currentOrganizationId = null;
        this.client = _axios.default.create({
            baseURL: process.env.NEXT_PUBLIC_API_BASE_URL + "/api/v1",
            timeout: 30000,
            headers: {
                "Content-Type": "application/json"
            }
        });
        this.setupInterceptors();
    }
    setOrganizationContext(organizationId) {
        this.currentOrganizationId = organizationId;
    }
    clearOrganizationContext() {
        this.currentOrganizationId = null;
    }
    setupInterceptors() {
        this.client.interceptors.request.use((config)=>{
            const token = _jscookie.default.get("access_token");
            if (token) {
                config.headers.Authorization = `Bearer ${token}`;
            }
            // Add organization context header if set
            if (this.currentOrganizationId) {
                config.headers["X-Organization-ID"] = this.currentOrganizationId;
            }
            return config;
        }, (error)=>Promise.reject(error));
        this.client.interceptors.response.use((response)=>response, async (error)=>{
            const originalRequest = error.config;
            // Handle specific error cases that should not trigger retries
            if (error?.message?.includes("ERR_INSUFFICIENT_RESOURCES") || error?.code === "ERR_INSUFFICIENT_RESOURCES") {
                console.error("Network resource exhaustion detected:", error);
                return Promise.reject(new Error("Server overloaded. Please wait and try again."));
            }
            // Handle rate limiting
            if (error.response?.status === 429) {
                console.error("Rate limit exceeded:", error);
                return Promise.reject(new Error("Too many requests. Please wait and try again."));
            }
            // Handle 401 with token refresh (but prevent infinite loops)
            if (error.response?.status === 401 && !originalRequest._retry) {
                originalRequest._retry = true;
                try {
                    const refreshToken = _jscookie.default.get("refresh_token");
                    if (refreshToken) {
                        const response = await this.refreshToken({
                            refresh_token: refreshToken
                        });
                        _jscookie.default.set("access_token", response.access_token);
                        originalRequest.headers.Authorization = `Bearer ${response.access_token}`;
                        return this.client(originalRequest);
                    }
                } catch (refreshError) {
                    console.error("Token refresh failed during 401 handling:", refreshError);
                    this.clearTokens();
                    // Prevent multiple redirects by checking current location
                    if (typeof window !== "undefined" && !window.location.pathname.includes("/login")) {
                        window.location.href = "/login";
                    }
                }
            }
            // Handle network errors with better messaging
            if (error.code === "ECONNABORTED" || error.message.includes("timeout")) {
                console.error("Request timeout:", error);
                return Promise.reject(new Error("Request timed out. Please try again."));
            }
            if (error.code === "ERR_NETWORK") {
                console.error("Network error:", error);
                return Promise.reject(new Error("Network error. Please check your connection."));
            }
            return Promise.reject(error);
        });
    }
    clearTokens() {
        _jscookie.default.remove("access_token");
        _jscookie.default.remove("refresh_token");
    }
    async get(url) {
        const response = await this.client.get(url);
        return response.data;
    }
    async post(url, data) {
        const response = await this.client.post(url, data);
        return response.data;
    }
    async put(url, data) {
        const response = await this.client.put(url, data);
        return response.data;
    }
    async delete(url) {
        const response = await this.client.delete(url);
        return response.data;
    }
    async refreshToken(data) {
        const response = await _axios.default.post(`${process.env.NEXT_PUBLIC_API_BASE_URL}/api/v1/auth/refresh`, data);
        return response.data;
    }
    // Organisation Management Methods
    async createOrganisation(data) {
        return this.post("/organisations", data);
    }
    async getAllOrganisations() {
        return this.get("/organisations");
    }
    async getCurrentOrganisation() {
        return this.get("/organisations/current");
    }
    async updateCurrentOrganisation(data) {
        return this.put("/organisations/current", data);
    }
    async getAvailableIndustries() {
        return this.get("/organisations/industries");
    }
    async getOrganisationStats() {
        return this.get("/organisations/stats");
    }
    // Organization Switching Methods
    async getUserAccessibleOrganisations() {
        return this.get("/organisations/accessible");
    }
    async logOrganizationSwitch(organizationId) {
        return this.post("/audit/organization-switch", {
            organization_id: organizationId,
            timestamp: new Date().toISOString(),
            user_agent: navigator.userAgent
        });
    }
}
const apiService = new ApiService();

//# sourceMappingURL=data:application/json;base64,