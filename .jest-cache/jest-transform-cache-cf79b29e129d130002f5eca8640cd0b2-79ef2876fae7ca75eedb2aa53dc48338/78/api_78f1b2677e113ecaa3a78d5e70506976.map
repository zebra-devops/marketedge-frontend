{"version":3,"sources":["/Users/matt/Sites/MarketEdge/platform-wrapper/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosResponse } from 'axios'\nimport Cookies from 'js-cookie'\nimport { TokenResponse, RefreshTokenRequest } from '@/types/auth'\nimport { Organisation, OrganisationCreate, IndustryOption } from '@/types/api'\n\nclass ApiService {\n  private client: AxiosInstance\n  private currentOrganizationId: string | null = null\n\n  constructor() {\n    this.client = axios.create({\n      baseURL: process.env.NEXT_PUBLIC_API_BASE_URL + '/api/v1',\n      timeout: 30000, // 30 second timeout\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n\n    this.setupInterceptors()\n  }\n\n  setOrganizationContext(organizationId: string) {\n    this.currentOrganizationId = organizationId\n  }\n\n  clearOrganizationContext() {\n    this.currentOrganizationId = null\n  }\n\n  private setupInterceptors() {\n    this.client.interceptors.request.use(\n      (config) => {\n        const token = Cookies.get('access_token')\n        if (token) {\n          config.headers.Authorization = `Bearer ${token}`\n        }\n        \n        // Add organization context header if set\n        if (this.currentOrganizationId) {\n          config.headers['X-Organization-ID'] = this.currentOrganizationId\n        }\n        \n        return config\n      },\n      (error) => Promise.reject(error)\n    )\n\n    this.client.interceptors.response.use(\n      (response) => response,\n      async (error) => {\n        const originalRequest = error.config\n\n        // Handle specific error cases that should not trigger retries\n        if (error?.message?.includes('ERR_INSUFFICIENT_RESOURCES') || \n            error?.code === 'ERR_INSUFFICIENT_RESOURCES') {\n          console.error('Network resource exhaustion detected:', error)\n          return Promise.reject(new Error('Server overloaded. Please wait and try again.'))\n        }\n\n        // Handle rate limiting\n        if (error.response?.status === 429) {\n          console.error('Rate limit exceeded:', error)\n          return Promise.reject(new Error('Too many requests. Please wait and try again.'))\n        }\n\n        // Handle 401 with token refresh (but prevent infinite loops)\n        if (error.response?.status === 401 && !originalRequest._retry) {\n          originalRequest._retry = true\n\n          try {\n            const refreshToken = Cookies.get('refresh_token')\n            if (refreshToken) {\n              const response = await this.refreshToken({ refresh_token: refreshToken })\n              Cookies.set('access_token', response.access_token)\n              originalRequest.headers.Authorization = `Bearer ${response.access_token}`\n              return this.client(originalRequest)\n            }\n          } catch (refreshError) {\n            console.error('Token refresh failed during 401 handling:', refreshError)\n            this.clearTokens()\n            // Prevent multiple redirects by checking current location\n            if (typeof window !== 'undefined' && !window.location.pathname.includes('/login')) {\n              window.location.href = '/login'\n            }\n          }\n        }\n\n        // Handle network errors with better messaging\n        if (error.code === 'ECONNABORTED' || error.message.includes('timeout')) {\n          console.error('Request timeout:', error)\n          return Promise.reject(new Error('Request timed out. Please try again.'))\n        }\n\n        if (error.code === 'ERR_NETWORK') {\n          console.error('Network error:', error)\n          return Promise.reject(new Error('Network error. Please check your connection.'))\n        }\n\n        return Promise.reject(error)\n      }\n    )\n  }\n\n  private clearTokens() {\n    Cookies.remove('access_token')\n    Cookies.remove('refresh_token')\n  }\n\n  async get<T>(url: string): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.get(url)\n    return response.data\n  }\n\n  async post<T>(url: string, data?: any): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.post(url, data)\n    return response.data\n  }\n\n  async put<T>(url: string, data?: any): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.put(url, data)\n    return response.data\n  }\n\n  async delete<T>(url: string): Promise<T> {\n    const response: AxiosResponse<T> = await this.client.delete(url)\n    return response.data\n  }\n\n  async refreshToken(data: RefreshTokenRequest): Promise<{ access_token: string; token_type: string }> {\n    const response = await axios.post(\n      `${process.env.NEXT_PUBLIC_API_BASE_URL}/api/v1/auth/refresh`,\n      data\n    )\n    return response.data\n  }\n\n  // Organisation Management Methods\n  async createOrganisation(data: OrganisationCreate): Promise<Organisation> {\n    return this.post<Organisation>('/organisations', data)\n  }\n\n  async getAllOrganisations(): Promise<Organisation[]> {\n    return this.get<Organisation[]>('/organisations')\n  }\n\n  async getCurrentOrganisation(): Promise<Organisation> {\n    return this.get<Organisation>('/organisations/current')\n  }\n\n  async updateCurrentOrganisation(data: Partial<OrganisationCreate>): Promise<Organisation> {\n    return this.put<Organisation>('/organisations/current', data)\n  }\n\n  async getAvailableIndustries(): Promise<IndustryOption[]> {\n    return this.get<IndustryOption[]>('/organisations/industries')\n  }\n\n  async getOrganisationStats(): Promise<Record<string, any>> {\n    return this.get<Record<string, any>>('/organisations/stats')\n  }\n\n  // Organization Switching Methods\n  async getUserAccessibleOrganisations(): Promise<Organisation[]> {\n    return this.get<Organisation[]>('/organisations/accessible')\n  }\n\n  async logOrganizationSwitch(organizationId: string): Promise<void> {\n    return this.post<void>('/audit/organization-switch', { \n      organization_id: organizationId,\n      timestamp: new Date().toISOString(),\n      user_agent: navigator.userAgent\n    })\n  }\n}\n\nexport const apiService = new ApiService()"],"names":["apiService","ApiService","constructor","currentOrganizationId","client","axios","create","baseURL","process","env","NEXT_PUBLIC_API_BASE_URL","timeout","headers","setupInterceptors","setOrganizationContext","organizationId","clearOrganizationContext","interceptors","request","use","config","token","Cookies","get","Authorization","error","Promise","reject","response","originalRequest","message","includes","code","console","Error","status","_retry","refreshToken","refresh_token","set","access_token","refreshError","clearTokens","window","location","pathname","href","remove","url","data","post","put","delete","createOrganisation","getAllOrganisations","getCurrentOrganisation","updateCurrentOrganisation","getAvailableIndustries","getOrganisationStats","getUserAccessibleOrganisations","logOrganizationSwitch","organization_id","timestamp","Date","toISOString","user_agent","navigator","userAgent"],"mappings":"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"}